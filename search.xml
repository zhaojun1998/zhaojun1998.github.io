<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>不用加减乘除做加法</title>
    <url>/Add/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>写一个函数，求两个整数之和，要求在函数体内不得使用 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 四则运算符号。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>对于 num1 = <code>15</code>， num2 = <code>17</code>，返回 <code>32</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>首先先来看下十进制是如何计算的：</p>
<ol>
<li>相加各位的值，不进位，结果是 22, （5 + 7 = 12，舍弃进位就是2, 1 + 1 = 2 没有进位就是 22）</li>
<li>计算进位值，得到 10。</li>
<li>然后将上述两步得到的值重复步骤 1 和 2 。直到进位置为 0，返回不进位的值即可。</li>
</ol>
<p>那么对于二进制也可以用这种方式计算：</p>
<ol>
<li>相加各位的值，不进位，15 (<code>1111</code>) + 17 (<code>10001</code>) = <code>11110</code>，其实就是将不同的位保留，相同的位归0，那么这正是位运算中的异或运算的规则，所以 15 ^ 17 即可得到不进位的值。</li>
<li>计算进位置其实就是将只保留相同的位，也就是 15 (<code>1111</code>) + 17 (<code>10001</code>) = <code>00001</code>，既然是进位值，还应该左移一位，也就是 <code>00010</code>，这两个小操作对应的就是位运算中的 <code>&amp;</code> 和 <code>&lt;&lt;</code>，即 <code>(num1 &amp; num2) &lt;&lt; 1</code>。</li>
<li>然后将上述两步得到的值重复步骤 1 和 2 。直到进位置为 0，返回不进位的值即可。</li>
</ol>
<h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h3><p>Java 对于高精度运算有一个类是 BigInteger，其中有一个 <code>add()</code> 方法，可以进行加法运算。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="位运算-1"><a href="#位运算-1" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (num2 != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = num1 ^ num2;</span><br><span class="line">            num2 = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            num1 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BigInteger-1"><a href="#BigInteger-1" class="headerlink" title="BigInteger"></a>BigInteger</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        BigInteger b1 = <span class="keyword">new</span> BigInteger(String.valueOf(num1));</span><br><span class="line">        BigInteger b2 = <span class="keyword">new</span> BigInteger(String.valueOf(num2));</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&tqId=11201&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">牛客网：不用加减乘除做加法</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：IO流之File</title>
    <url>/Java%E5%9F%BA%E7%A1%80-IO%E6%B5%81%E4%B9%8BFile/</url>
    <content><![CDATA[<h2 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a>File对象</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>File 对象是文件和目录路径名的抽象表示形式。 </p>
<span id="more"></span>

<h3 id="构造方法摘要"><a href="#构造方法摘要" class="headerlink" title="构造方法摘要"></a>构造方法摘要</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File(File parent, String child)     <span class="comment">//根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。 </span></span><br><span class="line">File(String pathname)               <span class="comment">//通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。 </span></span><br><span class="line">File(String parent, String child)   <span class="comment">//根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。 </span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//File(File parent, String child)  演示</span></span><br><span class="line">File parent = <span class="keyword">new</span> File(<span class="string">&quot;D:\\java&quot;</span>);</span><br><span class="line">File file = <span class="keyword">new</span> File(parent, <span class="string">&quot;hello.java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//File(String pathname)   //演示</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\java\\hello.java&quot;</span>);</span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">&quot;D:\\java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//File(String parent, String child) 演示</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\java&quot;</span>, <span class="string">&quot;hello.java&quot;</span>);</span><br></pre></td></tr></table></figure>

<div class="note info"><p>文件或者文件夹都可以被封装成文件对象。</p>
</div>


<h3 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span> <span class="comment">//在指定位置创建文件，如果文件已存在，则不创建，返回false</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span>     <span class="comment">//创建文件夹，只能创建一层目录</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span>    <span class="comment">//创建文件夹，可以创建多级目录</span></span></span><br></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果此路径名表示一个目录，则该目录必须为空才能删除。 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span>    <span class="comment">//删除失败返回false。如若文件正在被占用，则删除不了会返回 false,</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteOnExit</span><span class="params">()</span> <span class="comment">//在虚拟机退出时删除文件。</span></span></span><br></pre></td></tr></table></figure>
<h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span>    <span class="comment">//文件是否存在</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span>    <span class="comment">//是否是一个文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> isDirectory <span class="comment">//是否是一个文件夹</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span>  <span class="comment">//是否是一个隐藏文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAbsolute</span><span class="params">()</span><span class="comment">//判断是否是一个绝对路径</span></span></span><br></pre></td></tr></table></figure>

<div class="note danger"><p>注意：对文件对象进行判断操作时，除了 <code>isAbsolute</code> 方法，其他都需先判断文件是否存在，如文件不存在一律返回 <code>false</code> 。</p>
</div>


<h4 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span>            <span class="comment">//获取文件名称</span></span></span><br><span class="line"><span class="function">String <span class="title">getPath</span><span class="params">()</span>            <span class="comment">//获取文件的路径，创建对象是填的路径是什么就返回什么</span></span></span><br><span class="line"><span class="function">String <span class="title">getParent</span><span class="params">()</span>          <span class="comment">//获取父路径  返回的是创建对象时填写路径的父路径</span></span></span><br><span class="line"><span class="function">String <span class="title">getAbsolutePath</span><span class="params">()</span>    <span class="comment">//返回文件的绝对路径</span></span></span><br><span class="line"><span class="function">File <span class="title">getAbsoluteFile</span><span class="params">()</span>      <span class="comment">//返回文件的绝对路径的对象表现形式</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span>         <span class="comment">//返回文件的最后修改时间，如文件不存在，则返回0</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">length</span><span class="params">()</span>               <span class="comment">//返回文件的大小，单位：字节数，如是一个文件夹，则返回 0</span></span></span><br></pre></td></tr></table></figure>

<div class="note info"><p>对于 getParent 方法，如果创建对象时写的是 <code>F:\\java\hello.java</code>，则返回值为 <code>&quot;java&quot;</code>，如果创建对象时写的是相对路径 <code>hello.java</code>，则返回 <code>null</code></p>
</div>

<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">renameTo</span><span class="params">(File dest)</span> <span class="comment">//重名名一个文件或文件夹，也可以当做剪贴功能来看</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> File[] <span class="title">listRoots</span><span class="params">()</span></span>;  <span class="comment">//列出可用的文件系统根。 在 Windows 环境下即为盘符</span></span><br><span class="line">String[] list()             <span class="comment">//返回一个字符串数组，数组中存放了指定目录下的所有子文件及文件夹，</span></span><br><span class="line">                            <span class="comment">//包括隐藏文件，如果该目录不存在或者是一个文件，那么会返回 null</span></span><br><span class="line">File[] listFiles()          <span class="comment">//与上方的 list 方法功能类似，这里返回的是文件对象</span></span><br><span class="line"></span><br><span class="line">String[] list(FilenameFilter filter)        <span class="comment">//返回文件夹下过滤后的文件名称</span></span><br><span class="line">File[] listFiles(FilenameFilter filter)     <span class="comment">//返回文件夹下过滤后的文件对象</span></span><br><span class="line">File[] listFiles(FileFilter filter)         <span class="comment">//返回文件夹下过滤后的文件对象</span></span><br></pre></td></tr></table></figure>



<h3 id="方法演示"><a href="#方法演示" class="headerlink" title="方法演示"></a>方法演示</h3><h4 id="FilenameFilter"><a href="#FilenameFilter" class="headerlink" title="FilenameFilter"></a>FilenameFilter</h4><p>获取一个文件夹下所有的后缀名为 .java 的文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFilenameFilter</span> <span class="keyword">implements</span> <span class="title">FilenameFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name.endsWith(<span class="string">&quot;.java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilenameFilterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;F:\\java&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        String[] names = file.list(<span class="keyword">new</span> MyFilenameFilter());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="FileFilter"><a href="#FileFilter" class="headerlink" title="FileFilter"></a>FileFilter</h4><p>获取一个文件夹下所有的大小大于 1024 个字节的文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFileFilter</span> <span class="keyword">implements</span> <span class="title">FileFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pathname.length() &gt; <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFilterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;F:\\java&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        File[] files = file.listFiles(<span class="keyword">new</span> MyFileFilter());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="递归获取文件目录"><a href="#递归获取文件目录" class="headerlink" title="递归获取文件目录"></a>递归获取文件目录</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetFilesDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getFile(<span class="keyword">new</span> File(<span class="string">&quot;E:\\hexo\\public&quot;</span>), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFile</span> <span class="params">(File file, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        </span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; i; x++) &#123;</span><br><span class="line">            str+=<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">                System.err.println(str + f.getName());</span><br><span class="line">                getFile(f, i+<span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f.isFile()) &#123;</span><br><span class="line">                System.out.println(str + f.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><p>上述代码中为了以便区分，文件夹使用的是红色的错误输出颜色，文件使用的是普通颜色。</p>
</div>

<h4 id="删除带有文件的文件夹"><a href="#删除带有文件的文件夹" class="headerlink" title="删除带有文件的文件夹"></a>删除带有文件的文件夹</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteFilesDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        deleteAll(<span class="keyword">new</span> File(<span class="string">&quot;E:\\java&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">                deleteAll(f);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f.isFile()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!f.delete())</span><br><span class="line">                    System.out.println(f.getAbsolutePath() + <span class="string">&quot;正在被占用，无法删除&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!file.delete())</span><br><span class="line">            System.out.println(file.getAbsolutePath() + <span class="string">&quot;正在被占用，无法删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><p><code>File</code> 默认的 <code>delete</code> 方法无法删除非空的文件夹，所以这里要先将要被删除的文件夹以及其字文件夹和文件先删除，再删除其要删除的文件夹即可。</p>
<p>但要注意的是，如果文件正在被占用的话，是无法删除的。</p>
</div>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：IO流之Properties</title>
    <url>/Java%E5%9F%BA%E7%A1%80-IO%E6%B5%81%E4%B9%8BProperties/</url>
    <content><![CDATA[<h2 id="Properties-简介"><a href="#Properties-简介" class="headerlink" title="Properties 简介"></a>Properties 简介</h2><p>Properties 是 Hashtable 的子类，具有 Map 集合的特点，存储的是键值对的数据，且都是 String 类型的。</p>
<p>其实此类严格意义上将不属于 IO 流部分因为它是 java.util 包中的而非 java.io 包，但是它却是集合与 IO 技术的集合容器。</p>
<span id="more"></span>

<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="存取和读取"><a href="#存取和读取" class="headerlink" title="存取和读取"></a>存取和读取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//存取一个配置</span></span><br><span class="line">    prop.setProperty(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Join&quot;</span>);</span><br><span class="line">    prop.setProperty(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读取一个配置</span></span><br><span class="line">    String age = prop.getProperty(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;age:&quot;</span> + age);</span><br><span class="line">    </span><br><span class="line">    Set&lt;String&gt; propSet = prop.stringPropertyNames();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String s : propSet) &#123;</span><br><span class="line">        System.out.println(s + <span class="string">&quot;=&quot;</span> + prop.getProperty(s));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="从文件中读取配置信息"><a href="#从文件中读取配置信息" class="headerlink" title="从文件中读取配置信息"></a>从文件中读取配置信息</h3><p>有文件 <code>e:\info.ini</code> ，文件内容是：</p>
<pre><code>name=Join
age=16
Phone=13800000000
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;e:\\info.ini&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.load(fis);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读取配置中所有的键的 Set 集合表现形式</span></span><br><span class="line">    Set&lt;String&gt; propSet = prop.stringPropertyNames();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (String s : propSet) &#123;</span><br><span class="line">        System.out.println(s + <span class="string">&quot;:&quot;</span> + prop.getProperty(s));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="将配置信息写入到文件中"><a href="#将配置信息写入到文件中" class="headerlink" title="将配置信息写入到文件中"></a>将配置信息写入到文件中</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">storeDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//存取一个配置</span></span><br><span class="line">    prop.setProperty(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Join&quot;</span>);</span><br><span class="line">    prop.setProperty(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;E:\\storeDemo.ini&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第一个参数是输出流，第二个是注释信息。</span></span><br><span class="line">    prop.store(fos, <span class="string">&quot;storeDemo&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<div class="note info"><p><code>load</code> 方法和 <code>store</code> 方法中可以写字符流 Reader 也可以写字节流 InputStream，传入字节流的方法是 <code>JDK 1.6</code> 才出现的。</p>
</div>

<h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><p><strong>用配置文件记录一个程序运行的次数，当运行次数达到 10 次，则提示用户”试用次数已到”。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        </span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;count.ini&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        prop.load(fis);</span><br><span class="line">        </span><br><span class="line">        String value = prop.getProperty(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            count = Integer.parseInt(value);</span><br><span class="line">            <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;试用次数已到！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        count++;</span><br><span class="line">        </span><br><span class="line">        prop.setProperty(<span class="string">&quot;count&quot;</span>, count + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        </span><br><span class="line">        prop.store(fos, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><p>思路很简单，只需要先判断文件存在不存在，不存在则创建，存在则读取信息，如果没有这个信息，则写入一个初始值为 1 的次数，有的话则取出值，并增加一次，再存储起来。</p>
</div>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO流</tag>
        <tag>Properties</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：IO流之合并流</title>
    <url>/Java%E5%9F%BA%E7%A1%80-IO%E6%B5%81%E4%B9%8B%E5%90%88%E5%B9%B6%E6%B5%81/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>合并流就是 java.io.SequenceInputStream，它可以将多个输入流对象，当做一个流来处理。</p>
<span id="more"></span>

<h2 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SequenceInputStream(Enumeration&lt;? extends InputStream&gt; e)   <span class="comment">//将一个枚举对象中的所有输如流当做一个流</span></span><br><span class="line">SequenceInputStream(InputStream s1, InputStream s2) <span class="comment">//将两个输入流当做一个流。</span></span><br></pre></td></tr></table></figure>

<h3 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">available</span><span class="params">()</span> <span class="comment">//返回合并后的所有流的总可操作字节数</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>    <span class="comment">//关闭此输入流并释放与此流关联的所有系统资源</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>      <span class="comment">//从输入流中读取下一个数组字节</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>    <span class="comment">//将最多 len 个字节从此输入流读入 byte 数组</span></span></span><br></pre></td></tr></table></figure>

<h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><h3 id="合并三个文本文件"><a href="#合并三个文本文件" class="headerlink" title="合并三个文本文件"></a>合并三个文本文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceInputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Vector&lt;FileInputStream&gt; v = <span class="keyword">new</span> Vector&lt;FileInputStream&gt;();</span><br><span class="line">        </span><br><span class="line">        v.add(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\1.txt&quot;</span>));</span><br><span class="line">        v.add(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\2.txt&quot;</span>));</span><br><span class="line">        v.add(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\3.txt&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        Enumeration&lt;FileInputStream&gt; en = v.elements();</span><br><span class="line">        </span><br><span class="line">        SequenceInputStream  sis = <span class="keyword">new</span> SequenceInputStream(en);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;E:\\4.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> ((size = sis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(b, <span class="number">0</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fos.close();</span><br><span class="line">        sis.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将一个文件切割成多个文件"><a href="#将一个文件切割成多个文件" class="headerlink" title="将一个文件切割成多个文件"></a>将一个文件切割成多个文件</h3><p>这里演示的是将一个 MP3 文件切割成 n 个 1M 的碎片文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">splitFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\music.mp3&quot;</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((size = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;E:\\split\\music&quot;</span> + count++ + <span class="string">&quot;.part&quot;</span>);</span><br><span class="line">        fos.write(b, <span class="number">0</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fis.close();</span><br><span class="line">    fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="将切割的文件合并回源文件"><a href="#将切割的文件合并回源文件" class="headerlink" title="将切割的文件合并回源文件"></a>将切割的文件合并回源文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Vector&lt;FileInputStream&gt; v = <span class="keyword">new</span> Vector&lt;FileInputStream&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里 i &lt; 12 是因为刚才我把一个文件切割成了 12 份</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">        v.add(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\split\\music&quot;</span> + i + <span class="string">&quot;part&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Enumeration&lt;FileInputStream&gt; en = v.elements();</span><br><span class="line">    </span><br><span class="line">    SequenceInputStream sis = <span class="keyword">new</span> SequenceInputStream(en);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;E:\\split\\music.mp3&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((size = sis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(b, <span class="number">0</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fos.close();</span><br><span class="line">    sis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>注意：切割文件那里定义临时的字节数组，不要过大，如你要将文件分割成 10M 的等份，可以创建一个 1M 的数组： <code>byte[] b = new byte[1024 * 1024];</code> ，然后循环 10 次即可，因为创建过大的输入容易造成内存溢出。</p>
</div>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：IO流之字符流</title>
    <url>/Java%E5%9F%BA%E7%A1%80-IO%E6%B5%81%E4%B9%8B%E5%AD%97%E7%AC%A6%E6%B5%81/</url>
    <content><![CDATA[<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>Java 中的 IO 流按操作数据可以分为字节流与字符流，字节流主要用于对图片，视频等数据进行操作。而字符流是可以直接读写字符的 IO 流，对文本文件可以进行较为方便的操作。</p>
<h2 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h2><p>字符流中的输出流的基类是 Writer，但是该方法是抽象的，只能使用创建其子类对象。</p>
<p>由于最常用的操作是文件，所以这里我们选择 FileWrite 来演示。</p>
<span id="more"></span>

<h3 id="写入字符到指定文本文件中"><a href="#写入字符到指定文本文件中" class="headerlink" title="写入字符到指定文本文件中"></a>写入字符到指定文本文件中</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriteDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//这里会抛出异常，因为创建文件输出流对象时，可能指定了一个不存在的路径，那么就无法继续操作了，这里我们直接将异常抛出。</span></span><br><span class="line">        <span class="comment">//如若该文件不存在，则会创建，已存在则会将其覆盖。</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\demo.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用 write 方法，会将数据存入到流中，而不是直接写入到文件。</span></span><br><span class="line">        fw.write(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//刷新流对象中的缓冲中的数据，将数据存入到文件中。</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//再次写入数据到流中</span></span><br><span class="line">        fw.write(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭输出流，关闭前会将缓冲中的数据写入到文件中，也就是再 flush 一次</span></span><br><span class="line">        fw.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注意：当调用 close 方法关闭流之后，将无法再向流中写入数据。</span></span><br><span class="line">        fw.write(<span class="string">&quot;qwer&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><p><strong>要点：</strong></p>
<ul>
<li><code>new FileWrite(&quot;F:\\demo.txt&quot;);</code> 会将文件覆盖，如想对文件进行追加操作，则使用另一个构造方法 <code>new FileWrite(&quot;F:\\demo.txt&quot;, true)</code> 即可将数据写入文件末尾处，而不是写入文件开始处。 </li>
<li><code>write</code> 方法是将数据写入到流中，而不是文件中。</li>
<li><code>flush</code> 方法会将流中的数据写入到文件</li>
<li><code>close</code> 方法会将流中的数据写入到文件中，然后会关闭流，不可在对流进行操作。</li>
<li>Windows 环境下写入回车符的方法：<code>fw.write(&quot;\r\n&quot;);</code>  </li>
</ul>
</div>

<h3 id="字符流异常的处理方式"><a href="#字符流异常的处理方式" class="headerlink" title="字符流异常的处理方式"></a>字符流异常的处理方式</h3><p>在上述的例子中，我们直接将 IO 异常抛出了，这里我们演示下如何正确处理 IO 异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriteDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果文件已存在，则在文件最后进行追加，不存在，则创建文件</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\demo.txt&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            fw.write(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">            fw.flush();</span><br><span class="line"></span><br><span class="line">            fw.write(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;读写失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><p>这里要注意的是：在 finally 中对流资源进行关闭时，要注意关闭动作本身也会抛出异常，要记得处理。</p>
</div>

<h2 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h2><p>字符流中的输出流的基类是 Reader，但是该方法是抽象的，只能使用创建其子类对象。</p>
<p>由于最常用的操作是文件，所以这里我们选择 FileReader 来演示。</p>
<h3 id="从一个文件中读取文本内容"><a href="#从一个文件中读取文本内容" class="headerlink" title="从一个文件中读取文本内容"></a>从一个文件中读取文本内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReadDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个文件输入流，同样这里也会抛出异常，为了代码简洁这里就直接抛出了</span></span><br><span class="line">        <span class="comment">//有关异常的处理请参照上方的输出流中的异常处理方式。</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\demo.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//读取一个字符，返回值是字符对于的 ASCII 编码中的数值。所以查看时要将其转为 char 类型。</span></span><br><span class="line">        <span class="keyword">int</span> ch1 = fr.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>)ch1);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将读取到的内容存储到字符数组中，返回值是读取的有效字符的个数。</span></span><br><span class="line">        <span class="comment">//当读取到文件末尾，会返回 -1 </span></span><br><span class="line">        <span class="keyword">while</span> ((num = fr.read(ch)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//为了避免资源的浪费，所以只取有效数据，num 即为有效数据的个数。</span></span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(ch, <span class="number">0</span>, num));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><p><strong>要点：</strong></p>
<ul>
<li><code>fr.read()</code> 返回的是一个字符在 ASCII 编码中的数值</li>
<li><code>fr.read(char[] ch)</code> 返回的是存入指定数组中有效数据的个数</li>
</ul>
</div>


<h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><h3 id="拷贝文本文件"><a href="#拷贝文本文件" class="headerlink" title="拷贝文本文件"></a>拷贝文本文件</h3><p>拷贝文本文件其实就是将一个文件读取后，在将其内容写入到另一个文件中。所以将上方我们的示例综合起来即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTextFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\demo.txt&quot;</span>);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\demoCopy.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((num = fr.read(ch)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(ch, <span class="number">0</span>, num);</span><br><span class="line">                fw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;  <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;拷贝失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：IO流之字符流缓冲区</title>
    <url>/Java%E5%9F%BA%E7%A1%80-IO%E6%B5%81%E4%B9%8B%E5%AD%97%E7%AC%A6%E6%B5%81%E7%BC%93%E5%86%B2%E5%8C%BA/</url>
    <content><![CDATA[<h2 id="字符流缓冲区"><a href="#字符流缓冲区" class="headerlink" title="字符流缓冲区"></a>字符流缓冲区</h2><p>字符流的缓冲区：BufferedWriter 和 BufferedReader</p>
<ul>
<li>缓冲区的出现时为了提高流的操作效率而出现的.</li>
<li>需要被提高效率的流作为参数传递给缓冲区的构造函数</li>
<li>缓冲区的原理就是在缓冲区中封装了一个数组，存入数据后一次取出</li>
</ul>
<span id="more"></span>

<h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><h3 id="构造方法摘要"><a href="#构造方法摘要" class="headerlink" title="构造方法摘要"></a>构造方法摘要</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedWriter(Writer out)  <span class="comment">//创建一个使用默认大小输出缓冲区的缓冲字符输出流。 </span></span><br><span class="line">BufferedWriter(Writer out, <span class="keyword">int</span> sz)  <span class="comment">// 创建一个使用给定大小输出缓冲区的新缓冲字符输出流。 </span></span><br></pre></td></tr></table></figure>

<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>                                <span class="comment">//关闭此流，但要先刷新它。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span>                                <span class="comment">//刷新该流的缓冲。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newLine</span><span class="params">()</span>                              <span class="comment">//写入一个行分隔符。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>   <span class="comment">//写入字符数组的某一部分。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span>                           <span class="comment">//写入单个字符。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String s, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>      <span class="comment">//写入字符串的某一部分。 </span></span></span><br></pre></td></tr></table></figure>

<h3 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\demo.txt&quot;</span>);</span><br><span class="line">        BufferedWriter buffWriter = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            buffWriter.write(<span class="string">&quot;java&quot;</span> + i);</span><br><span class="line">            buffWriter.newLine();</span><br><span class="line">            buffWriter.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><ul>
<li><code>BufferedWriter</code> 中的 <code>newLine</code> 方法可以实现<strong>跨平台的换行符</strong></li>
<li><code>BufferedWriter</code> 中的 <code>close</code> 方法也会<strong>将缓冲区中的流对象</strong>关闭</li>
</ul>
</div>

<h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><h3 id="构造方法摘要-1"><a href="#构造方法摘要-1" class="headerlink" title="构造方法摘要"></a>构造方法摘要</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader(Reader in)   <span class="comment">//创建一个使用默认大小输入缓冲区的缓冲字符输入流。 </span></span><br><span class="line">BufferedReader(Reader in, <span class="keyword">int</span> sz)   <span class="comment">//创建一个使用指定大小输入缓冲区的缓冲字符输入流。 </span></span><br></pre></td></tr></table></figure>

<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>                                <span class="comment">//关闭该流并释放与之关联的所有资源。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>                                  <span class="comment">//读取单个字符。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>     <span class="comment">//将字符读入数组的某一部分。 </span></span></span><br><span class="line"><span class="function">String <span class="title">readLine</span><span class="params">()</span>                           <span class="comment">//读取一个文本行。 </span></span></span><br></pre></td></tr></table></figure>


<h3 id="使用演示-1"><a href="#使用演示-1" class="headerlink" title="使用演示"></a>使用演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\demo.txt&quot;</span>);</span><br><span class="line">        BufferedReader buffReader = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">        </span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = buffReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        buffReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><ul>
<li><code>BufferedReader</code> 的 <code>readLine</code> 方法会读取一整行文本，如果已到达流末尾，则返回 <code>null</code> </li>
<li><code>BufferedReader</code> 的 <code>close</code> 方法也会<strong>将缓冲区中的流对象</strong>关闭</li>
</ul>
</div>

<h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><h3 id="通过缓冲区拷贝文本文件"><a href="#通过缓冲区拷贝文本文件" class="headerlink" title="通过缓冲区拷贝文本文件"></a>通过缓冲区拷贝文本文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedCopyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        BufferedReader buffReader = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter buffWriter = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buffReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\demo.txt&quot;</span>));</span><br><span class="line">            buffWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\demoCopy.txt&quot;</span>));</span><br><span class="line">            </span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = buffReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buffWriter.write(line);</span><br><span class="line">                buffWriter.newLine();</span><br><span class="line">                buffWriter.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件拷贝失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (buffReader != <span class="keyword">null</span>)</span><br><span class="line">                    buffReader.close();</span><br><span class="line">                <span class="keyword">if</span> (buffWriter != <span class="keyword">null</span>)</span><br><span class="line">                    buffWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件拷贝失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：IO流之字节流</title>
    <url>/Java%E5%9F%BA%E7%A1%80-IO%E6%B5%81%E4%B9%8B%E5%AD%97%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>Java 中的 IO 流按操作数据可以分为字节流与字符流，字节流主要用于对图片，视频等数据进行操作。而字符流是可以直接读写字符的 IO 流，对文本文件可以进行较为方便的操作。</p>
<span id="more"></span>

<h2 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h2><h3 id="OutputStream-常用方法"><a href="#OutputStream-常用方法" class="headerlink" title="OutputStream 常用方法"></a>OutputStream 常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>    <span class="comment">//关闭此输出流并释放与此流有关的所有系统资源。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span>    <span class="comment">//刷新此输出流并强制写出所有缓冲的输出字节, OutputStream 的 flush 方法不执行任何操作。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span>    <span class="comment">//将 b.length 个字节从指定的 byte 数组写入此输出流。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>  <span class="comment">//将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。 </span></span></span><br></pre></td></tr></table></figure>




<h3 id="使用字节流来写入数据到文本文件中"><a href="#使用字节流来写入数据到文本文件中" class="headerlink" title="使用字节流来写入数据到文本文件中"></a>使用字节流来写入数据到文本文件中</h3><p>字节流中的输出流的基类是 OutputStream，但是该方法是抽象的，只能使用创建其子类对象。</p>
<p>由于最常用的操作是文件，所以这里我们选择 FileOutputStream 来演示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\demo.txt&quot;</span>);</span><br><span class="line">            fos.write(<span class="string">&quot;ABCDEF&quot;</span>.getBytes());</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;写入数据失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>)</span><br><span class="line">                    fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;关闭流失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><ul>
<li>这里与字符流操作文本数据的方式差不多，只不过这里是字节数组。</li>
<li>字节流没有用到缓冲区时不需要 flush 操作，因为它会直接写入到文件中。</li>
</ul>
</div>

<h2 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h2><h3 id="InputStream-常用方法"><a href="#InputStream-常用方法" class="headerlink" title="InputStream 常用方法"></a>InputStream 常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">available</span><span class="params">()</span>     <span class="comment">//返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>                <span class="comment">//关闭此文件输入流并释放与此流有关的所有系统资源。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span>  <span class="comment">//确保在不再引用文件输入流时调用其 close 方法。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>                  <span class="comment">//从此输入流中读取一个数据字节。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span>          <span class="comment">//从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>    <span class="comment">// 从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。 </span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>



<h3 id="使用字节流来读取文本内容"><a href="#使用字节流来读取文本内容" class="headerlink" title="使用字节流来读取文本内容"></a>使用字节流来读取文本内容</h3><p>字节流中的输出流的基类是 InputStream，但是该方法是抽象的，只能使用创建其子类对象。</p>
<p>由于最常用的操作是文件，所以这里我们选择 FileInputStream 来演示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\demo.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">            fis.read(b);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>)</span><br><span class="line">                    fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info"><ul>
<li>上述代码中使用了 available ，这个方法其实就是返回要操作的文件中剩余的可被操作的字节数，这里虽然定义了一个 byte 类型的数组，使用了这个方法，创建了一个与文件字节大小一致的数组，但是当文件过大时，数组也会很大，会造成<strong>内存溢出</strong>，所以还是谨慎使用这种方法，推荐使用固定大小的数组，循环进行读取。</li>
</ul>
</div>


<h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><h3 id="拷贝图片"><a href="#拷贝图片" class="headerlink" title="拷贝图片"></a>拷贝图片</h3><p>字节流不仅限于操作文本文件，也是可以操作媒体文件的，用字节流读取文件字节后，写入到一个新的文件中即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyPictureFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\demo.jpg&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\demoCopy.jpg&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(b, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件拷贝出错&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件拷贝出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：IO流之字节流缓冲区</title>
    <url>/Java%E5%9F%BA%E7%A1%80-IO%E6%B5%81%E4%B9%8B%E5%AD%97%E8%8A%82%E6%B5%81%E7%BC%93%E5%86%B2%E5%8C%BA/</url>
    <content><![CDATA[<h2 id="字节流缓冲区"><a href="#字节流缓冲区" class="headerlink" title="字节流缓冲区"></a>字节流缓冲区</h2><p>字节流的缓冲区与字符流的缓冲区也是大同小异的，本文不做重复叙述，如需了解，请查看 <a href="/Java%E5%9F%BA%E7%A1%80-IO%E6%B5%81%E4%B9%8B%E5%AD%97%E7%AC%A6%E6%B5%81%E7%BC%93%E5%86%B2%E5%8C%BA/" title="Java基础：IO流之字符流缓冲区">Java基础：IO流之字符流缓冲区</a>。</p>
<span id="more"></span>

<h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><h3 id="使用字节流缓冲区拷贝图片"><a href="#使用字节流缓冲区拷贝图片" class="headerlink" title="使用字节流缓冲区拷贝图片"></a>使用字节流缓冲区拷贝图片</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedCopyPictureFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedInputStream bufis;</span><br><span class="line">        BufferedOutputStream bufos;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\demo.jpg&quot;</span>));</span><br><span class="line">            bufos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\demoCopy.jpg&quot;</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = bufis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bufos.write(b, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件拷贝出错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufos != <span class="keyword">null</span>)</span><br><span class="line">                bufos.close();</span><br><span class="line">            <span class="keyword">if</span> (bufis != <span class="keyword">null</span>)</span><br><span class="line">                bufis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件拷贝出错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试基本字节流与缓冲区的效率"><a href="#测试基本字节流与缓冲区的效率" class="headerlink" title="测试基本字节流与缓冲区的效率"></a>测试基本字节流与缓冲区的效率</h3><p>既然使用了字节流缓冲区，那么测试一下加缓冲区与不加缓冲区的区别，演示中复制的是同一个文件。</p>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//此处调用复制方法。</span></span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时： &quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用基本字节流一次读写一个字节</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\demo.jpg&quot;</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\demoCopy.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((len = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fos.close();</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用基本字节流一次读取一个字节数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\demo.jpg&quot;</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\demoCopy.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((len = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(b, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fos.close();</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>加上缓冲区一次读取一个字节</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy3</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    BufferedInputStream bufis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\demo.jpg&quot;</span>));</span><br><span class="line">    BufferedOutputStream bufos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\demoCopy.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((len = bufis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bufos.write(len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bufos.close();</span><br><span class="line">    bufis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>加上缓冲区一次读取一个字节数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedInputStream bufis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\demo.jpg&quot;</span>));</span><br><span class="line">    BufferedOutputStream bufos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\demoCopy.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((len = bufis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bufos.write(b, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bufos.close();</span><br><span class="line">    bufis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>测试文件大小为 11,720,762 字节。</p>
<p>使用四种复制方法，耗时分别为：38944 毫秒、57毫秒、370毫秒、23毫秒。</p>
<p>虽然测试会受测试环境等很多的因素，但是大致上的时间差距比还是很大的，所以还是可以反应问题的。</p>
</div>









]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：StringBuffer 与 StringBuilder</title>
    <url>/Java%E5%9F%BA%E7%A1%80-StringBuffer%20%E4%B8%8E%20StringBuilder/</url>
    <content><![CDATA[<h2 id="两者的特点和区别"><a href="#两者的特点和区别" class="headerlink" title="两者的特点和区别"></a>两者的特点和区别</h2><p>StringBuffer 和 StringBuilder 都是字符串缓冲区。</p>
<p><strong>共同点：</strong></p>
<ul>
<li>都是是一个容器。</li>
<li>长度是可变化的。</li>
<li>可以操作多个数据类型。</li>
<li>最终会通过 toString() 方法变成字符串。</li>
</ul>
<p><strong>不同点：</strong></p>
<ul>
<li>JDK1.5 版本之后出现了 StringBuilder.</li>
<li>StringBuffer 是线程同步。</li>
<li>StringBuilder 是线程不同步。</li>
</ul>
<span id="more"></span>

<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(基本数据类型)</span></span>;  <span class="comment">//将指定数据作为参数添加到已有数据结尾处.。</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,基本数据类型)</span></span>; <span class="comment">//可以将数据插入到指定index位置。</span></span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">StringBuffer <span class="title">delete</span><span class="params">(start,end)</span>:删除缓冲区中的数据，包含start，不包含end。</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">deleteCharAt</span><span class="params">(index)</span>:删除指定位置的字符。</span></span><br></pre></td></tr></table></figure>

<h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>; </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### 修改</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="function">StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end,String str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">StringBuffer <span class="title">reverse</span><span class="params">()</span></span>;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### 其他</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">//将缓冲区中指定数据存储到指定字符数组中。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getChars</span><span class="params">(<span class="keyword">int</span> srcBegin, <span class="keyword">int</span> srcEnd, <span class="keyword">char</span>[] dst, <span class="keyword">int</span> dstBegin)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">StringBuffer sb </span>= <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abcedf&quot;</span>);</span><br><span class="line"><span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">sb.getChars(<span class="number">1</span>,<span class="number">4</span>,chs,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后chs的内容就为: [][b][c][d];</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：位运算</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>位运算是直接对二进制进行运算。</p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">范例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移</td>
<td align="center">4&lt;&lt;3 = 4*2^3 = 32</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移</td>
<td align="center">16&gt;&gt;3=16/2^3=2</td>
</tr>
<tr>
<td align="center">&gt;&gt;&gt;</td>
<td align="center">无符号右移</td>
<td align="center">16&gt;&gt;&gt;3=16/2^3=2</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">与运算</td>
<td align="center">6 &amp; 3 = 2</td>
</tr>
<tr>
<td align="center">丨</td>
<td align="center">或运算</td>
<td align="center">6丨3=7</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">异或运算</td>
<td align="center">6^3=5</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">反码</td>
<td align="center">~6 = -7</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>在 Java 中，一个 int 类型 占用 4 个字节，每个字节 8 位，所以一个 int 占用 32 位存储空间。</p>
<h3 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h3><p>左移是指将16的32位二进制表示，向左移 2 位，即舍弃前面 2 位，后面空缺的 2  位，补0</p>
<p><img src="https://cdn.jun6.net/image_1bkgkhfuf1u1q1ovu1ter2q11nsi9.png" alt="image_1bkgkhfuf1u1q1ovu1ter2q11nsi9.png-11.5kB"></p>
<h3 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h3><p>右移是指将16的32位二进制表示，向右移 2 位，即舍弃最后 2 位，最高位空缺的 2  位，根据原有数据最高位的值而定。一般整数为0，负数为1</p>
<p>图略.</p>
<h3 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h3><p>基础运算跟右移一样，不过最高位空缺的两位，无条件全部补0.</p>
<p>图略.</p>
<h3 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h3><p>是指将其运算数的二进制每一位都进行与运算，二进制中 <code>0&amp;0=0</code>,<code>0&amp;1=0</code>,<code>1&amp;1=1</code>。<br><img src="https://cdn.jun6.net/image_1bkgl1d0j1ip07u118mf1ngrh6hm.png" alt="image_1bkgl1d0j1ip07u118mf1ngrh6hm.png-9.4kB"></p>
<h3 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h3><p>是指将其运算数的二进制每一位都进行或运算，二进制中 <code>0|0=0</code>,<code>0|1=1</code>,<code>1|1=1</code>。<br><img src="https://cdn.jun6.net/image_1bkglccl71h021kpp1l6n1fnc1ivl13.png" alt="image_1bkglccl71h021kpp1l6n1fnc1ivl13.png-7.2kB"></p>
<h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><p>是指将其运算数的二进制每一位都进行异或运算，如果a、b两个值不相同，则异或结果为1。如果a、b两个值相同，异或结果为0。二进制中 <code>0^0=0</code>,<code>0^1=1</code>,<code>1^1=0</code>。</p>
<blockquote>
<p>异或可以用作加密用途，一个数异或同一个数2次，结果还是那个数，如：7 ^ 4 ^ 4 = 7</p>
</blockquote>
<h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>正数的补码就是该数取反后+1，如 <code>~6=-7</code>   <code>~5=-6</code></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：内部类</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="内部类的定义"><a href="#内部类的定义" class="headerlink" title="内部类的定义"></a>内部类的定义</h2><p>内部类是指将一个类定义在另一个类的里面，对里面那个类就称为内部类 </p>
<h2 id="内部类的访问特点"><a href="#内部类的访问特点" class="headerlink" title="内部类的访问特点"></a>内部类的访问特点</h2><ul>
<li>内部类可以直接访问外部类中的成员，包括私有成员。</li>
<li>而外部类要访问内部类中的成员必须要建立内部类的对象</li>
</ul>
<span id="more"></span>

<h2 id="普通内部类"><a href="#普通内部类" class="headerlink" title="普通内部类"></a>普通内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">            System.out.println(x);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当内部类定义在外部类的成员位置上，并且为非私有，在其他外部类中想创建 <code>Outer</code> 的内部类 <code>Inner</code> 的对象时，则需 外部类名.内部类： <code>Outer.Inner inner = new Outer().new Inner();</code> 不能直接 <del><code>Inner inner = new Inner();</code></del>  因为可能其他的类中也有名为 <code>Inner</code> 的内部类，所以需要标明是哪个类的内部类才行。</p>
</blockquote>
<blockquote>
<p><code>Inner</code> 的 <code>method()</code> 的打印语句，默认输出的是方法体内的局部变量，也就是3，访问 <code>Inner</code> 类中的成员变量可以写 <code>this.x</code>，访问 <code>Outer</code> 类中的成员变量可以写 <code>Outer.this.x</code></p>
</blockquote>
<p>内部类定义在局部时：</p>
<ul>
<li>不可以被成员修饰符修饰</li>
<li>可以直接访问外部类中的成员，因为还持有外部类中的引用。<br>  但是不可以访问它所在的局部中的变量。只能访问被final修饰的局部变量。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                System.out.println(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">new</span> Inner().function();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2>当内部类在成员位置上，就可以被成员修饰符所修饰。</li>
</ul>
<p>比如：</p>
<ul>
<li><code>private</code>：将内部类在外部类中进行封装，禁止其他类访问。</li>
<li><code>static</code>：内部类就具备了静态的特性。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">            System.out.println(x);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>当内部类被 <code>static</code> 修饰后，只能直接访问外部类中的 &gt; <code>static</code> ，出现了访问局限。</li>
<li>在外部其他类中，如何直接访问 <code>static</code> 内部类的非静态成员呢？<br><code>new Outer.Inner().method();</code></li>
<li>在外部其他类中，如何直接访问 <code>static</code> 内部类的静态成员呢？<br><code>Outer.Inner.method();</code></li>
<li>当内部类中定义了静态成员，该内部类必须也是静态的。</li>
<li>当外部类中的静态方法访问内部类时，内部类也必须是静态的。</li>
</ul>
</blockquote>
<h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>匿名内部类其实就是内部类的简写格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> AbsDemo()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;show..&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>定义匿名内部类的前提：内部类必须继承一个类或实现一个接口</li>
<li>匿名内部类中定义的方法最好不要超过3个，不然会影响阅读。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>内部类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：单例设计模式</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>特点：Single 类一进内存，就已经创建好了对象。</p>
</blockquote>
<blockquote>
<p>存在的问题：</p>
</blockquote>
<blockquote>
<ul>
<li>如果构造方法中存在过多的处理，会导致加载这个类时比较慢，可能引起性能问题。</li>
<li>如果使用饿汉式的话，只进行了类的装载，并没有实质的调用，会造成资源的浪费</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            s == <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>特点：Single 类进内存，对象还没有存在，只有调用了 getInstance() 方法时，才建立对象。</p>
</blockquote>
<blockquote>
<p>存在的问题： 在多线程的情况下可能会出现安全问题：上述代码在多个线程并发调用 getInstance() 时，可能会创建出多个实例。比如 A 线程进行判断 <code>s == null</code> 这段代码后，还未创建实例之前，B线程也进入了 <code>s == null</code> 此代码块，那么就会造成创建了两个不同的实例的结果，违背了单例设计模式。</p>
</blockquote>
<h3 id="解决方案-一"><a href="#解决方案-一" class="headerlink" title="解决方案 一"></a>解决方案 一</h3><p>只需要在 getInstance() 方法上加上 synchronized 修饰符，即可加锁，当一个线程进入此代码块后，其他线程无法进入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Single <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            s == <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是这种解决办法，每个线程调用这个方法时，都要判断一下锁，效率会很低。</p>
</blockquote>
<h3 id="解决方案-二"><a href="#解决方案-二" class="headerlink" title="解决方案 二"></a>解决方案 二</h3><p>为了解决方案一的效率低下的问题，可以用双重判断的形式来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Single <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    s == <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用双重判断加锁，首先进入该方法时进行null == sInstance检查，如果第一次检查通过，即没有实例创建，则进入synchronized控制的同步块,并再次检查实例是否创建，如果仍未创建，则创建该实例。</p>
<p>双重检查加锁保证了多线程下只创建一个实例，并且加锁代码块只在实例创建的之前进行同步。如果实例已经创建后，进入该方法，则不会执行到同步块的代码。</p>
<h2 id="单例设计模式真的只有一个对象么"><a href="#单例设计模式真的只有一个对象么" class="headerlink" title="单例设计模式真的只有一个对象么"></a>单例设计模式真的只有一个对象么</h2><p>其实，单例模式并不能保证实例的唯一性，只要我们想办法的话，还是可以打破这种唯一性的。以下几种方法都能实现。</p>
<ul>
<li>使用反射，虽然构造器为非公开，但是在反射面前就不起作用了。</li>
<li>如果单例的类实现了 cloneable，那么还是可以拷贝出多个实例的。</li>
<li>Java 中的对象序列化也有可能导致创建多个实例。避免使用 readObject 方法。</li>
<li>使用多个类加载器加载单例类，也会导致创建多个实例并存的问题。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：可变参数</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>JDK 1.5 版本出现一个新特性：可变参数。</p>
<p>该特性可以解决某个方法<strong>参数数量不确定，但参数类型确定的情况</strong></p>
<p>例如：当需要定义一个方法，该方法的功能是计算传入 int 类型的 n 个参数的和，由于计算的数量不确定，所以不便使用方法重载的方式，因为过于麻烦。</p>
<span id="more"></span>

<p><strong>传统做法，利用数组：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">69</span>,<span class="number">81</span>,<span class="number">8165</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum  = sum(arr);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : num) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note primary"><p>这种方式虽然可以完成需求，但是还要预先将数据存储到数组中。</p>
</div>


<p><strong>新做法，可变参数：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum  = sum(<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">69</span>,<span class="number">81</span>,<span class="number">8165</span>,<span class="number">7</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : num) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>使用这种方式呢，其实就是 Java 内部帮我们将 n 个参数封装成数组了。</p>
</div>


<div class="note danger"><p><strong>但是可变参数有一个注意事项就是，只能放到参数的最后一个，不然无法确认参数的对应性。</strong></p>
<p>例如 <code>public static int sum(int... num, int x)</code>，这样的话就无法确认哪一个是 x 了。</p>
</div>









]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>可变参数</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：字符串</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>字符串是一个特殊的对象</li>
<li>字符串一旦初始化就不可以被改变</li>
</ul>
<h2 id="字符串的创建方式"><a href="#字符串的创建方式" class="headerlink" title="字符串的创建方式"></a>字符串的创建方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>str1 和 str2 有什么区别？</strong></p>
<ul>
<li>s1 在内存中有一个对象</li>
<li>s2 在内存中有两个对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(str1 == str2);     <span class="comment">//false 比较地址是否相同</span></span><br><span class="line">System.out.println(str1.equals(str2));  <span class="comment">//true  比较字符串的内容是否相同。</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><ul>
<li><strong>获取长度</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;  <span class="comment">//返回字符串的长度。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>根据位置获取某个字符</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">//根据数组元素的角标值来获取某个元素。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>根据字符获取位置</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的 int ch 指的是字符在 ASCII 码中的对应数字。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回的是 ch 在字符串中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//返回的是 ch 在字符串中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//返回的是字符串 str 在字符串中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span>：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//从 fromIndex 这个位置开始，获取字符串 str 在字符串中出现的位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//这里跟上面的 indexOf() 类似，只不过是倒序查找，也有四种重载的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(<span class="keyword">int</span> ch)</span></span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul>
<li><strong>判断字符串中是否包含某一个子串</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其实与获取中的 indexOf(String str) 方法效果也是相同的，返回值为 -1 时即包含不存在。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String str)</span></span>;  </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>判断字符串是否为空</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其实就是判断字符串长度是否等于 0</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;  </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>判断字符串是否以指定内容开头</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>判断字符串是否以指定内容结尾</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><ul>
<li><strong>将字符数组转成字符串</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造函数：String(<span class="keyword">char</span>[])</span><br><span class="line">          String(<span class="keyword">char</span>[],offset,count); <span class="comment">//从 offset开始，一共 count 个</span></span><br><span class="line"></span><br><span class="line">静态方法：</span><br><span class="line">        <span class="function"><span class="keyword">static</span> String <span class="title">copyValueOf</span><span class="params">(<span class="keyword">char</span>[] data)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> String <span class="title">copyValueOf</span><span class="params">(<span class="keyword">char</span>[] data, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span>; </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span>[] data)</span></span>;   </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>将字符串转成字符数组</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>[] toCharArray();</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>将字节数组转成字符串</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String(<span class="keyword">byte</span>[]);</span><br><span class="line">String(<span class="keyword">byte</span>[],offset,count); <span class="comment">//将字节数组中的一部分转成字符串。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>将字符串转成字节数组</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[]  getBytes();</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>将基本数据类型转成字符串</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> ```      </span><br><span class="line"></span><br><span class="line">### 替换</span><br><span class="line"></span><br><span class="line">```java  </span><br><span class="line"><span class="comment">//将字符串中所有的 oldchar 替换为 newchar，如果要替换的字符不存在，那么返回的还是原字符串</span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldchar,<span class="keyword">char</span> newchar)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//可以根据正则表达式进行替换</span></span><br><span class="line"><span class="function">String <span class="title">replaceAll</span><span class="params">(String regex, String replacement)</span></span>;  </span><br></pre></td></tr></table></figure>

<h3 id="切割"><a href="#切割" class="headerlink" title="切割"></a>切割</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] split(String regex);  <span class="comment">//将字符串根据某种规则进行切割。</span></span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;zhangsan,lisi,wangwu&quot;</span>;</span><br><span class="line">String[] arr = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">然后字符串数组 arr 中的结果就是三个字符串  zhagnsan   lisi   wangwu</span><br></pre></td></tr></table></figure>

<h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> begin)</span></span>;    <span class="comment">//从指定位置开始到结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包含头，不包含尾 对字符串 &quot;abcdefg&quot; substring(2,4) 的结果是 &quot;cd&quot;</span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>;   </span><br></pre></td></tr></table></figure>

<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span></span>; <span class="comment">//转换为大写</span></span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span></span>;  <span class="comment">//转换为小写</span></span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span></span>;  <span class="comment">//去除两端空格。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照自然顺序进行比较，到第一个不相同的字符上，进行 ASCII 比较，返回相差数。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String str)</span></span>; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：接口的特性</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>接口其实就是一个完全抽象类，不提供任何具体实现，使用 <code>Interface</code> 关键字修饰。</p>
<span id="more"></span>

<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>接口中的方法可以有参数列表和返回类型，但不能有任何方法体。</li>
<li>接口中的成员修饰符是固定的，即使不写也会自动加上。<ul>
<li>成员常量：<code>public static final</code></li>
<li>成员方法：<code>public abstract</code></li>
</ul>
</li>
<li>接口的实现类必须实现接口中的所有方法。</li>
<li>一个类可以<strong>实现多个接口</strong>，同理，该类也要实现多个接口中的所有方法，如果多个接口中有重名方法，那么实现一个即可 ( 但是同名方法的返回值必须相同 )。</li>
<li>接口与接口之间可以有继承关系，且一个接口可以<strong>继承多个其他接口</strong> ( Java 从这种方面看来是可以多继承的 )。<br>例如有一个 A 接口，一个 B 接口。那么 C 接口可以同时继承 A 和 B 接口，但是 C 接口的实现类，就必须将 A、B、C 三个接口的所有方法都实现。 </li>
</ol>
<blockquote>
<p>Java 中接口的特性有些复杂，要特别注意。例如 Java 中的接口可以<strong>多继承</strong>其他接口这一特性，容易被考到。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：构造代码块</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    <content><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>给所有的对象进行统一的初始化。</p>
<span id="more"></span>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;空构造函数&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;有参构造函数，name:&quot;</span> + name + <span class="string">&quot;,age:&quot;</span> + age );</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Person();</span><br><span class="line">		</span><br><span class="line">		Person person1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<pre><code>构造代码块
空构造函数
构造代码块
有参构造函数，name:张三,age:18
</code></pre>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>对象一创建构造代码块就会运行，是先于构造函数运行的。<br>构造代码块的主要作用是对所有构造方法中的公共的内容进行抽取。</p>
<h2 id="构造函数与构造代码块的区别"><a href="#构造函数与构造代码块的区别" class="headerlink" title="构造函数与构造代码块的区别"></a>构造函数与构造代码块的区别</h2><p>构造代码块是给所有对象进行统一初始化<br>而构造函数则是给对应的对象进行初始化的，例如带一个参数的构造方法，无参构造方法等。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>构造代码块</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：泛型</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="泛型简介"><a href="#泛型简介" class="headerlink" title="泛型简介"></a>泛型简介</h2><p>泛型规范在 JDK 1.5 版本中被添加，使用泛型机制编写的代码比起随意使用 Object 变量然后再进行强制类型转换的代码具有更高的安全性和可读性，同时也更为简洁。</p>
<h3 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h3><ul>
<li>泛型将将运行时期的问题ClassCastException转到了编译时期。</li>
<li>避免了强制转换的麻烦。</li>
<li>泛型技术是给编译器使用的技术,用于编译时期。确保了类型的安全。</li>
</ul>
<span id="more"></span>

<h3 id="什么时候使用泛型"><a href="#什么时候使用泛型" class="headerlink" title="什么时候使用泛型"></a>什么时候使用泛型</h3><p>当操作的引用数据类型不确定的时候，就使用泛型，将要操作的引用数据类型传入即可。其实&lt;&gt;就是一个用于接收具体引用数据类型的参数范围。</p>
<h3 id="泛型演示"><a href="#泛型演示" class="headerlink" title="泛型演示"></a>泛型演示</h3><p>泛型在 <code>ArrayList</code> 与 <code>Iterator</code> 中的使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenrticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//明确传入的具体引用数据类型</span></span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        arrayList.add(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;xixi&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">////明确传入的具体引用数据类型</span></span><br><span class="line">        Iterator&lt;String&gt; it = arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            String str = it.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如此即可定义一个泛型类，这样 Utils 的所有方法就可以操作创建 Utils 类时指定的数据类型了。</p>
</blockquote>
<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>&lt;T&gt; <span class="keyword">void</span> <span class="title">print</span> <span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>&lt;T&gt; <span class="keyword">void</span> <span class="title">show</span> <span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>泛型类有一个弊端，就是当该类中有不同的方法，来接收不同的参数时，就不行了，因为它之接收创建类时指定的数据类型</p>
</blockquote>
<blockquote>
<p>所以就有了泛型方法，这样方法 print 与 show 方法就可以分别接收不同类型的数据类型了，而不必受类的泛型的限制</p>
</blockquote>
<h3 id="泛型类与泛型方法混合使用"><a href="#泛型类与泛型方法混合使用" class="headerlink" title="泛型类与泛型方法混合使用"></a>泛型类与泛型方法混合使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>&lt;E&gt; <span class="keyword">void</span> <span class="title">show</span> <span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样就是混合使用了， print 会使用类的泛型 T ，而 show 方法则会使用自身的泛型 E，两者互不冲突。</p>
</blockquote>
<h3 id="泛型静态方法"><a href="#泛型静态方法" class="headerlink" title="泛型静态方法"></a>泛型静态方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;E&gt; <span class="keyword">void</span> <span class="title">show</span> <span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于静态的特性，所以静态方法不可以访问类上定义的泛型，如果静态方法操作的数据类型不确定，那么就将泛型定义上方法上。</p>
</blockquote>
<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span> <span class="keyword">implements</span> <span class="title">Inter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InterImpl inter = <span class="keyword">new</span> InterImpl();</span><br><span class="line">        inter.show(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当接口的实现类也不确定要使用的数据类型时，也可以让接口用泛型：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InterImpl&lt;String&gt; inter = <span class="keyword">new</span> InterImpl&lt;String&gt;();</span><br><span class="line">        inter.show(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        InterImpl&lt;Integer&gt; inter2 = <span class="keyword">new</span> InterImpl&lt;Integer&gt;();</span><br><span class="line">        inter2.show(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="泛型限定"><a href="#泛型限定" class="headerlink" title="泛型限定"></a>泛型限定</h3><h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printColl</span><span class="params">(ArrayList&lt;?&gt; al)</span> </span>&#123;</span><br><span class="line">    Iterator&lt;?&gt; it = al.iterator();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (it.hashNext()) &#123;</span><br><span class="line">        Systen.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上方代码展示了一个占位符的应用场景，占位符有一个缺陷就是无法操作这个元素，例如使用 <T> 时还可以 <code>T t = it.next()</code> ，而使用了占位符 ? 的话就不能 <del><code>? t = it.next()</code></del> 了</p>
</blockquote>
<h4 id="上下限"><a href="#上下限" class="headerlink" title="上下限"></a>上下限</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printColl</span><span class="params">(ArrayList&lt;? extends Person&gt; al)</span> </span>&#123;</span><br><span class="line">    Iterator&lt;?&gt; it = al.iterator();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (it.hashNext()) &#123;</span><br><span class="line">        Systen.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一个上限的例子，表示 <code>？</code> 只能接收 Person 与 Person 的子类</p>
<p>下限则是指其父类，格式是：<code>&lt;? super Person&gt;</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：静态导入</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E9%9D%99%E6%80%81%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<p>JDK 1.5 版本有一个新特性：静态导入。</p>
<p>该特性的作用是将某个类中的所有静态成员导入进来。</p>
<p>例如我们经常用的工具类 Collections、Arrays 等包含很多静态方法的类，调用时有些麻烦，这时就可以用新特性：静态导入。</p>
<span id="more"></span>

<p><strong>使用演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Arrays.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>排序前：[1, 2, 3, 5, 8, 54, 6, 8, 5]
排序后：[1, 2, 3, 5, 5, 6, 8, 8, 54]
</code></pre>
<div class="note primary"><p>在该演示中，可以看到 <strong>sort</strong> 方法直接写就可以了，不用再写成 <strong>Arrays.sort()</strong> 了。</p>
<p>但是看到 <strong>Arrays.toString()</strong> 方法却加上了类名，因为 <strong>demo</strong> 类本身也有一个继承自 <strong>Object</strong> 的 <strong>toString</strong> 的同名方法，<strong>Arrays</strong> 中也有 <strong>toString</strong> 方法，这时就要用 类名.方法 来区分了。</p>
</div>

<div class="note danger"><p>静态导入的优缺点：</p>
<ul>
<li>优点：减少了代码的输入，提高效率</li>
<li>缺点：过度的使用静态导入，在一定程度上会影响代码的可读性。</li>
</ul>
</div>








]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>静态导入</tag>
      </tags>
  </entry>
  <entry>
    <title>从源码上分析 LinkedList（附图）</title>
    <url>/LinkedList/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇我们介绍了 <code>ArrayList</code>，这次，我们再看看一下它的兄弟：<code>LinkedList</code> 。</p>
<p><code>LinkedList</code> 同样也实现了 <code>List</code> 接口，底层原理是<strong>双向链表</strong>，那么它又是如何实现的呢？继续来看吧。</p>
<span id="more"></span>

<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p><code>LinkedList</code> 只有三个成员变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure>

<p>size 属性不用说，肯定是表示链表的逻辑长度，first 应该是链表的第一个元素，last 表示最后一个元素。</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>先来看无参构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>无参构造没有任何逻辑，那么再来看看其他的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里牵扯到要给 <code>addAll</code> 方法，一会在常用方法里我们会讲到，这里先放一放。</p>
<p>这次我们带上内存图来分析，会更直观一些，首先用无参构造来创建一个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jun6.net/201802021628_930.png?imageView2/0/interlace/1/q/75%7Cwatermark/2/text/anVuNi5uZXQ=/font/Y29uc29sYXM=/fontsize/600/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim"></p>
<blockquote>
<p>注：为了节省篇幅，本图省略了一些细节上东西，如常量池，方法区等内容。</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>首先是 <code>add</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;  <span class="comment">// last 节点表示添加前最后一个节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);  <span class="comment">// 要添加的节点的上一个节点应该是 last 节点。</span></span><br><span class="line">    last = newNode;          <span class="comment">// 添加了节点后，添加的新节点应该为 last 节点。</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)           <span class="comment">// 如果当前元素没有上一个元素，则表示为第一次添加，</span></span><br><span class="line">        first = newNode;     <span class="comment">// 那么当前节点应该也算是 first 节点。</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;                  <span class="comment">// 逻辑长度 + 1</span></span><br><span class="line">    modCount++;              <span class="comment">// 修改次数 + 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里提到了 Node 类，来看看它的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;   <span class="comment">// 当前节点的元素</span></span><br><span class="line">    Node&lt;E&gt; next;   <span class="comment">// 下一个结点</span></span><br><span class="line">    Node&lt;E&gt; prev;   <span class="comment">// 上一个节点</span></span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;    </span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来 <code>Node</code> 类是 <code>LinkedList</code> 的静态内部类，表示链表的一个节点。</p>
<p>那么当我们执行这段代码后，会发送什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.add(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jun6.net/201802021633_312.png?imageView2/0/interlace/1/q/75%7Cwatermark/2/text/anVuNi5uZXQ=/font/Y29uc29sYXM=/fontsize/600/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim"></p>
<p>那我们再添加一个元素呢?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.add(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">21</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jun6.net/201802021702_31.png?imageView2/0/interlace/1/q/75%7Cwatermark/2/text/anVuNi5uZXQ=/font/Y29uc29sYXM=/fontsize/600/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim"></p>
<p>可能看起来有写复杂，其实也不难理解，耐下心对照源码好好看一下，应该就能理解这张图的意思了。</p>
<p>我们再添加两个元素看看效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.add(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">22</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Student(<span class="string">&quot;赵六&quot;</span>, <span class="number">23</span>));</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jun6.net/201802021700_589.png?imageView2/0/interlace/1/q/75%7Cwatermark/2/text/anVuNi5uZXQ=/font/Y29uc29sYXM=/fontsize/600/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim"></p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><p>添加了这么多，我们删除一个试试，先来看看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据索引删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);   <span class="comment">// 检查要删除的元素索引是否有效，即 0 &lt;= index &lt; size</span></span><br><span class="line">    <span class="keyword">return</span> unlink(node(index)); <span class="comment">// node(index) 方法找到第 index 个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;     <span class="comment">// 要删除节点的值</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;  <span class="comment">// 当删除节点的后继节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;  <span class="comment">// 要删除元素的前驱结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;           <span class="comment">// 如果没有前驱节点，表示为头节点</span></span><br><span class="line">        first = next;             <span class="comment">// 删除头节点后，更换 first 指向</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                      <span class="comment">// 如果不是头节点</span></span><br><span class="line">        prev.next = next;         <span class="comment">// 将前驱节点的 next 指向要删除节点的后继节点</span></span><br><span class="line">        x.prev = <span class="keyword">null</span>;            <span class="comment">// 将要删除的节点不再指向任何节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;           <span class="comment">// 如果当前节点为最后一个节点</span></span><br><span class="line">        last = prev;              <span class="comment">// 将 last 指向倒数第二个</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                      <span class="comment">// 如果不是最后一个节点</span></span><br><span class="line">        next.prev = prev;         <span class="comment">// 将后继节点的 prev 指向要删除元素的前驱节点</span></span><br><span class="line">        x.next = <span class="keyword">null</span>;            <span class="comment">// 将要删除的节点不再指向任何节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;                <span class="comment">// 将要删除的元素的数据清空</span></span><br><span class="line">    size--;                       <span class="comment">// 逻辑长度 - 1</span></span><br><span class="line">    modCount++;                   <span class="comment">// 修改次数 + 1</span></span><br><span class="line">    <span class="keyword">return</span> element;               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能这里的这 10 和 17 行不太容易理解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">prev.next = next;         <span class="comment">// 将前驱节点的 next 指向要删除节点的后继节点</span></span><br><span class="line">next.prev = prev;         <span class="comment">// 将后继节点的 prev 指向要删除元素的前驱节点</span></span><br></pre></td></tr></table></figure>

<p>举个简单的例子:<br><strong>张三 &lt;==&gt; 李四 &lt;==&gt; 王五</strong></p>
<p>那么要删除李四的话，应该要将张三的 “下一个” 指向王五吧，也就是 <code>prev.next = next; </code>。同样，应为是双向链表，所以也应该让王五的 “上一个” 指向张三，即 <code>next.prev = prev;</code>。</p>
<p>这里讲解的是根据索引删除，还有根据元素删除，其实原理是一样的，主要是 <code>unlink</code> 这个方法，先根据传入的参数，<strong>找到要删除的元素</strong>，然后进行 <code>unlink</code> 方法的逻辑即可，这里就不再展开，如果你看懂了根据索引删除，相信你也能理解根据元素删除。</p>
<div class="note warning"><p>但是需要注意的是：<strong>如果删除的是引用数据类型的话，需要重写 equals 方法，不然可能会无法进行删除操作哦。</strong></p>
<p>其实仔细想想也能理解，既然需要 <strong>找到要删除的元素</strong>，那么如何判断传入的参数和要删除的是同一个呢？只有 <code>equals</code> 方法了，而默认从 <code>Object</code> 继承的 <code>equals</code> 方法可不一定能满足我们的需求，因为它只比较地址值，所以我们需要重写 <code>equals</code> 方法。
 </p>
</div>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);    <span class="comment">// 检查要获取的元素索引是否有效，即 0 &lt;= index &lt; size</span></span><br><span class="line">    <span class="keyword">return</span> node(index).item;     <span class="comment">// 根据索引来找到这个元素，返回它的 item 值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;   <span class="comment">// 如果要删除的元素在前半段, 则从 first 开始查找</span></span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                     <span class="comment">// 如果要删除的元素在后半段, 则从 last 开始查找</span></span><br><span class="line">        Node&lt;E&gt; x = last;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里用了一个很巧妙的小算法，既然我们知道链表的长度，那么当要删除的元素 <code>索引 &lt; 长度 / 2</code>，就从第一个开始找，反之从最后一个开始找，<code>长度 / 2</code> 可以改写为位运算即：<code>size &gt;&gt; 1</code>，效率更高一些。</p>
<p>先讲这么多，如果你看懂了这些，相信 <code>LinkedList</code> 的其他方法，你也能够轻松的理解。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据上方的源码分析，我们可以总结出 <code>LinkedList</code> 的一些特性：</p>
<ul>
<li><code>LinkedList</code> 底层数据结构是双向链表。</li>
<li>不能对元素进行随机访问，虽然提供了 get 方法，但这个方法是通过遍历来实现的。</li>
<li>删除、添加元素的效率很高，但查找元素的的效率较差。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵覆盖</title>
    <url>/RectCover/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>我们可以用 <code>2 * 1</code> 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 <code>2 * 1</code> 的小矩形无重叠地覆盖一个 <code>2 * n</code> 的大矩形，总共有多少种方法？</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>对于一个 <code>2 * 3</code> 的矩阵，返回 <code>3</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li><p>当 n 为 1 时，也就是 <code>2 * 1</code> 的大矩阵，只有一种方法：<br><img src="https://cdn.jun6.net/image_1boc1vv7u143q1t1i1t91gudchhp.png" alt="image_1boc1vv7u143q1t1i1t91gudchhp.png-1.2kB"></p>
</li>
<li><p>当 n 为 2 时，也就是 <code>2 * 2</code> 的大矩阵，有两种方法：<br><img src="https://cdn.jun6.net/image_1boc2455nekmi0o1o6r1misvuh16.png" alt="image_1boc2455nekmi0o1o6r1misvuh16.png-1.5kB"><br><img src="https://cdn.jun6.net/image_1boc25s6qmirakj15g69ia1m8h20.png" alt="image_1boc25s6qmirakj15g69ia1m8h20.png-1.5kB"></p>
</li>
<li><p>当 n 为 3 时，也就是 <code>2 * 3</code> 的大矩阵，有三种方法：<br><img src="https://cdn.jun6.net/image_1boc28qrh1sjc6m518anqpd11to3d.png" alt="image_1boc28qrh1sjc6m518anqpd11to3d.png-1.8kB"><br><img src="https://cdn.jun6.net/image_1boc2a9km11561m1a1i7npg8flq3q.png" alt="image_1boc2a9km11561m1a1i7npg8flq3q.png-1.7kB"><br><img src="https://cdn.jun6.net/image_1boc2dekcgv18c6kkn1sqh3vk4k.png" alt="image_1boc2dekcgv18c6kkn1sqh3vk4k.png-2kB"></p>
</li>
<li><p>当 n 为 4 时，也就是 <code>2 * 4</code> 的大矩阵，应该有几种方法呢？</p>
</li>
<li><p>1 根据原来 n = 3 时的内容，向右扩展一个 <code>2 * 1</code> 的矩阵，即：<code>||||</code>、<code>=||</code>、<code>|=|</code>。</p>
</li>
<li><p>2 根据原来 n = 2 是的内容，向右扩展一个 <code>=</code> 形状的矩阵，即：<code>==</code>、<code>||=</code>。</p>
</li>
</ol>
<p>你可以自己推导下 n = 5 时的情况，也是同样的规律。</p>
<p>规律为： <code>f(n) = f(n-1) + f(n-2)   (n &gt; 3)</code></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">RectCover</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RectCover(target - <span class="number">1</span>) + RectCover(target - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">牛客网：矩阵覆盖</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>矩阵</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>链表求和 Ⅱ</title>
    <url>/add-two-numbers-ii/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>假定用一个链表表示两个数，其中每个节点仅包含一个数字。假设这两个数的数字顺序排列，请设计一种方法将两个数相加，并将其结果表现为链表的形式。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <code>6-&gt;1-&gt;7 + 2-&gt;9-&gt;5</code>。即，<code>617 + 295</code>。</p>
<p>返回 <code>9-&gt;1-&gt;2</code>。即，<code>912</code> 。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题类似于: <a href="/add-two-numbers/" title="链表求和">链表求和</a></p>
<p>只需要将链表以压栈的形式存入栈中，然后依次同栈顶取出每一个元素，进行上述 <a href="/add-two-numbers/" title="链表求和">链表求和</a> 的操作即可。</p>
<p>也可以进行 <a href="/reverse-linked-list/" title="翻转链表">翻转链表</a> 后在进行  <a href="/add-two-numbers/" title="链表求和">链表求和</a> 的操作即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;      </span></span><br><span class="line"><span class="comment"> *     &#125;          </span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l1: the first list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l2: the second list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: the sum list of l1 and l2 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addLists2</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Integer&gt; stack1 = reverseNode(l1);  </span><br><span class="line">        Stack&lt;Integer&gt; stack2 = reverseNode(l2);  </span><br><span class="line"></span><br><span class="line">        ListNode point = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!stack1.isEmpty() &amp;&amp; !stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = stack1.pop() + stack2.pop() + carry;</span><br><span class="line">            carry = val / <span class="number">10</span>;</span><br><span class="line">            val = val % <span class="number">10</span>;</span><br><span class="line">            ListNode temp = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">            temp.next = point.next;</span><br><span class="line">            point.next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = stack1.pop() + carry;</span><br><span class="line">            carry = val / <span class="number">10</span>;</span><br><span class="line">            val = val % <span class="number">10</span>;</span><br><span class="line">            ListNode temp = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">            temp.next = point.next;</span><br><span class="line">            point.next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = stack2.pop() + carry;</span><br><span class="line">            carry = val / <span class="number">10</span>;</span><br><span class="line">            val = val % <span class="number">10</span>;</span><br><span class="line">            ListNode temp = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">            temp.next = point.next;</span><br><span class="line">            point.next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (carry == <span class="number">1</span>) &#123;</span><br><span class="line">            ListNode temp = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">            temp.next = point.next;</span><br><span class="line">            point.next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> point.next;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stack&lt;Integer&gt; <span class="title">reverseNode</span><span class="params">(ListNode temp)</span></span>&#123;  </span><br><span class="line">        Stack&lt;Integer&gt; record = <span class="keyword">new</span> Stack&lt;Integer&gt;();  </span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;  </span><br><span class="line">            record.push(temp.val);  </span><br><span class="line">            temp = temp.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> record;  </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/add-two-numbers-ii/">LintCode：链表求和 Ⅱ</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>高精度</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>链表求和</title>
    <url>/add-two-numbers/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>你有两个用链表代表的整数，其中每个节点包含一个数字。数字存储按照在原来整数中<code>相反</code>的顺序，使得第一个数字位于链表的开头。写出一个函数将两个整数相加，用链表形式返回和。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出两个链表 <code>3-&gt;1-&gt;4-&gt;null</code> 和 <code>5-&gt;9-&gt;2-&gt;null</code>，返回 <code>8-&gt;0-&gt;7-&gt;null</code>。</p>
<blockquote>
<p>其实就是 <code>413 + 295 = 708</code> 数字全部以相反的顺序存储。</p>
</blockquote>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先依次取链表的元素，第一次取的就是最低位，个位，第二次就是十位，以此类推。<br>正好此顺序是正常加法运算的顺序，所以将每一位计算完后的数对10取余，就是 <code>保留数</code> ，对10整除就是 <code>进位数</code> 。<br>如：<code>5 + 9 = 14</code> 那么，  <code>14 % 10 = 4</code>  <code>14 / 10 = 1</code>。<br>所以每次将 <code>保留数</code> 存储下来，然后下一位的运算加上 <code>进位数</code> 即可，依次类推。最终计算出结果。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;      </span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l1: the first list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l2: the second list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: the sum list of l1 and l2 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode point = head;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = carry + l1.val + l2.val;</span><br><span class="line">            point.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">            point = point.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum =  carry + l1.val;</span><br><span class="line">            point.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            carry = sum /<span class="number">10</span>;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            point = point.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum =  carry + l2.val;</span><br><span class="line">            point.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            carry = sum /<span class="number">10</span>;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">            point = point.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">            point.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="https://cdn.jun6.net/qeasdadwq.png" alt="链表求和.png-59.8kB"></p>
<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/add-two-numbers/">LintCode：链表求和</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>黄蓉填充九宫格</title>
    <url>/algorithm/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p><img src="https://cdn.jun6.net/201807081706_525.jpg"></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题是面试某公司时遇到的一道题，当然思维有些混乱，没有解出来。</p>
<p>经过分析此题要点是边界处理，即向右上移动时，超出九宫格时的处理过程，右上冲突时向下移动不需要考虑边界问题，均未超出边界。</p>
<p>当时面试官的要求是不论语言，30 分钟输出九宫格，不需要边框样式。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (count &lt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] index = getIndex(arr, x, y);</span><br><span class="line">        x = index[<span class="number">0</span>];</span><br><span class="line">        y = index[<span class="number">1</span>];</span><br><span class="line">        arr[x][y] = ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">0</span>]));</span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">1</span>]));</span><br><span class="line">    System.out.println(Arrays.toString(arr[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIndex(<span class="keyword">int</span>[][] arr, <span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">   <span class="keyword">int</span> tempX = x - <span class="number">1</span> &lt; <span class="number">0</span> ? <span class="number">2</span> : x - <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">int</span> tempY = y + <span class="number">1</span> &gt; <span class="number">2</span> ? <span class="number">0</span> : y + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (arr[tempX][tempY] != <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x + <span class="number">1</span>, y&#125;;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;tempX, tempY&#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>从源码上分析 ArrayList</title>
    <url>/arraylist/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ArrayList</code> 是 <code>List</code> 接口的一个实现类，那么 <code>ArrayList</code> 的底层是如何实现的呢？让我们来一探究竟。</p>
<span id="more"></span>

<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>先来看看 <code>ArrayList</code> 中比较重要的两个属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>elementData</code> 用来存储 <code>ArrayList</code> 中的元素，其实 <code>ArrayList</code> 的底层是用 <code>Object[]</code> 数组来实现的。</li>
<li><code>size</code> 指的是的<strong>逻辑长度</strong>，就好像一个水杯，容量是 600 毫升，但杯中只有 200 毫升的水，<code>ArrayList</code> 容器就是水杯， 这个 <code>size</code> 属性表示的就是水杯中水的容积。</li>
</ul>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>无参构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很简单，就一行语句，<code>elementData</code> 在上面我们已经知道是什么了，那 <code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code> 又是什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>原来只是一个空的 <code>Object[]</code>。</p>
<p>指定容量的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也很简单，就是为 <code>ArrayList</code> 指定初始容量。这里主要对传入的容量做了有效性验证，当传入的参数小于 0 时，抛出异常。当参数等于 0 时，则用一个空的数组常量 <code>EMPTY_ELEMENTDATA</code> 来初始化。</p>
<p>用一个 Collection 对象进行构造的的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先将传入的参数转为对象数组赋值给 <code>elementData</code> ，如果传入的 <code>Collection</code> 参数的长度为 0，则就将空的常量数组对象 <code>EMPTY_ELEMENTDATA</code> 赋给了 <code>elementData</code>。</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用了 <code>ensureCapacityInternal</code> 函数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里判断 <code>elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code> 表示如果如果为没有初始化容量时，用默认容量 <code>DEFAULT_CAPACITY</code> 也就是 10，来开启空间，也就是上面我们说的水杯的容量。</p>
<p>接下来看 <code>ensureExplicitCapacity</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续看 <code>grow</code> 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对 ArrayList 容量进行 1.5 倍扩容。</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果扩容后的容量还不够实际占用的容量，那么需要扩容到实际占用容量的大小。</span></span><br><span class="line">    <span class="comment">// 如当前 newCapacity 为 10，扩容后为 15，</span></span><br><span class="line">    <span class="comment">// 但现在实际的元素数量为 16 个，那么至少应该先装下这 16 个。</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 防止阔中的过大，过大时，则使用 Integer.MAX_VALUE 代替。</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实这段代码也很简单，就是动态扩容 ArrayList 的大小，每次扩容都为当前容量的 1.5 倍，当然也进行了扩容过大或过小的限制。<br>其扩容原理就是创建一个容量为当前容量 1.5 倍的新数组，将旧数组的内容拷贝给新数组。</p>
<p><strong>add(int index, E element)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断要插入的位置不小于 0 且不大于当前最大位置</span></span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 容量扩容检测，具体参见 add(E e) 方法</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看过了 <code>add(E e)</code> 的源码，这里也就很好理解了，先进行插入位置有效性判断，然后判断容量是否需要扩容，然后先将插入位置开始的所有元素向后移动一位，最后将需要插入的元素插入指定位置。</p>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayList 的底层是用数组实现的，那么获取元素也就很方便了，判断获取位置合法后，直接用下标获取即可。</p>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法其实就是修改指定位置的元素，先拿到要覆盖的元素，然后将新元素赋值上去，最后返回覆盖的元素即可。</p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先进行有效性判断，然后从要删除的元素开始的所有元素都向前拷贝一位，并将最后一位设值为 <code>null</code>。</p>
<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要找的内容 <code>null</code>，则依次用 == 判断是否为要找的元素，如果不为 <code>null</code>，则用 equals 来依次判断。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据上方的源码分析，我们可以得出 <code>ArrayList</code> 的一些特性：</p>
<ul>
<li><code>ArrayList</code> 底层数据结构是对象数组，如不指定长度，则初始容量为 10。</li>
<li>底层的对象数组是在第一次添加元素的时候才进行初始化的。</li>
<li>每次扩容为原来容量的 1.5 倍，扩容原理是将原来的数据拷贝到新数组中。</li>
</ul>
<p>所以我们在使用时要注意：</p>
<ul>
<li>如知道大概要存多少个数据，最好指定初始化容量，这样可以提高程序性能。</li>
<li><code>ArrayList</code> 查找元素很快，但删除元素和添加元素的效率相对较差。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>平衡二叉树</title>
    <url>/balanced-binary-tree/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个二叉树,确定它是高度平衡的。对于这个问题,一棵高度平衡的二叉树的定义是：一棵二叉树中每个节点的两个子树的深度相差不会超过 1。 </p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><pre><code>A)  3            B)    3 
   / \                  \
  9  20                 20
    /  \                / \
   15   7              15  7
</code></pre>
<p>二叉树 A 是高度平衡的二叉树，但是 B 不是。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题利用了 <a href="/maximum-depth-of-binary-tree/" title="二叉树的最大深度">二叉树的最大深度</a> 这个问题，就是求每一个左右节点的深度，如果两个深度之间的差大于 1，则说明该树不是一个平衡二叉树，该算法只会将所有元素遍历一次。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsBalanced_Solution</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Height(root) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Height</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = Height(node.left);</span><br><span class="line">    <span class="keyword">if</span> (leftDepth == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> rightDepth = Height(node.right);</span><br><span class="line">    <span class="keyword">if</span> (rightDepth == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (Math.abs(leftDepth - rightDepth) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Math.max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/balanced-binary-tree/">牛客网：平衡二叉树</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>递归</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>镜像二叉树</title>
    <url>/binary-tree-mirror/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>二叉树的镜像定义：源二叉树 </p>
<pre><code>        8
       /  \
      6   10
     / \  / \
    5  7 9 11
    镜像二叉树
        8
       /  \
      10   6
     / \  / \
    11 9 7  5
</code></pre>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><ul>
<li><p>递归的终止条件就是当前树为 <code>null</code> 或该树的左子树与右子树都为 <code>null</code>。</p>
</li>
<li><p>递归操作是交换当前数的左右子树。</p>
</li>
<li><p>递归条件：</p>
</li>
</ul>
<ol>
<li>当前数的左子树不为空时对左字树进行递归操作。</li>
<li>当前数的右子树不为空时对右子树进行递归操作。</li>
</ol>
<h3 id="模拟压栈法"><a href="#模拟压栈法" class="headerlink" title="模拟压栈法"></a>模拟压栈法</h3><p>既然递归的原理是通过压栈实现的，那么我们也可以自己来创建一个栈来模拟实现。</p>
<p>先将根节点放入栈中，然后开始循环，循环条件是栈不为空，将栈顶元素出栈，当该节点的左子树或右子树不为空，就将左右子树进行交换，然后当左子树不为空时，将左子树压栈，当右子树不为空时，将右子树压栈。如此循环，直到栈为空。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归法-1"><a href="#递归法-1" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        TreeNode temp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>)</span><br><span class="line">            Mirror(root.left);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>)</span><br><span class="line">            Mirror(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模拟压栈法-1"><a href="#模拟压栈法-1" class="headerlink" title="模拟压栈法"></a>模拟压栈法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟递归的压栈法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            TreeNode node =  stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span> || node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                TreeNode temp = node.left;</span><br><span class="line">                node.left = node.right;</span><br><span class="line">                node.right = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) stack.push(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) stack.push(node.right); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">牛客网：二叉树的镜像</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>递归</tag>
        <tag>栈</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的所有路径</title>
    <url>/binary-tree-paths/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一棵二叉树，找出从根节点到叶子节点的所有路径。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出下面这棵二叉树：</p>
<pre><code>   1
 /   \
2     3
 \
  5
</code></pre>
<p>所有根到叶子的路径为：</p>
<pre><code>[
  &quot;1-&gt;2-&gt;5&quot;,
  &quot;1-&gt;3&quot;
]
</code></pre>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如某一个节点，没有子节点则将本身的值加入到集合中，如果有子节点，则将在子节点的路径之前加上当前节点。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition of TreeNode:</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public TreeNode left, right;</span></span><br><span class="line"><span class="comment"> *     public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root the root of the binary tree</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> all root-to-leaf paths</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; paths = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> paths;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        List&lt;String&gt; leftPaths = binaryTreePaths(root.left);</span><br><span class="line">        List&lt;String&gt; rightPaths = binaryTreePaths(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String path : leftPaths) &#123;</span><br><span class="line">            paths.add(root.val + <span class="string">&quot;-&gt;&quot;</span> + path);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String path : rightPaths) &#123;</span><br><span class="line">            paths.add(root.val + <span class="string">&quot;-&gt;&quot;</span> + path);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (paths.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            paths.add(String.valueOf(root.val));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/binary-tree-paths/">LintCode：二叉树的所有路径</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>对称的二叉树</title>
    <url>/binary-tree-symmetric/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><pre><code>    A). 3               
       / \
      1   1
     / \ / \
    6  4 4  6         

    B). 3
       / \
      1   2
     / \ / \
    7  4 5  6 
</code></pre>
<p>A 与 B 在结构上都是对称的，但是本题的题意是指也对应，所以 A 树是一颗对称二叉树，B 树不是一颗对称的二叉树。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>观察上方的样例可得结论：</p>
<ul>
<li>根节点的左右节点的值是相同的</li>
<li>除根节点外，某节点的右子树与兄弟节点的左子树的值相同</li>
<li>除根节点外，某节点的左子树与兄弟节点的右子树的值相同</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode pRoot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> fun(pRoot.left, pRoot.right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">fun</span><span class="params">(TreeNode n1, TreeNode n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n1 == <span class="keyword">null</span> &amp;&amp; n2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (n1 != <span class="keyword">null</span> &amp;&amp; n2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n1.val == n2.val &amp;&amp; fun(n1.left, n2.right) &amp;&amp; fun(n1.right, n2.left);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&tqId=11211&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">牛客网：对称的二叉树</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>递归</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树层序遍历为二维数组</title>
    <url>/binary-tree-toarray/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有一棵二叉树，请设计一个算法，按照层次打印这棵二叉树。<br>给定二叉树的根结点 root，请返回打印结果，结果按照每一层一个数组进行储存，所有数组的顺序按照层数从上往下，且每一层的数组内元素按照从左往右排列。保证结点数小于等于 500。</p>
<span id="more"></span>

<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><pre><code>        3               
       / \
      5   2
     / \ / \
    8  3 4  1         
</code></pre>
<p>输出结果应为 <code>[[3], [5, 2], [8, 3, 4, 1]]</code></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实这就是一个二叉树层序遍历的一道题，只不过需要判断什么时候换层了。</p>
<p>可是使用队列来实现，首先声明两个变量 <code>last</code> 和 <code>nlast</code>，<code>last</code> 代表当前层的最右节点，<code>nlast</code> 表示下一行当前已知的最右节点。</p>
<p>先让根节点 <code>3</code> 入队列，然后由于已经是最右节点了，就把 <code>3</code> 赋值给 <code>last</code>，然后分别将队列中的首节点出队列，出队列的元素记作 <code>pollNode</code>，并将该节点的孩子依次入队列（即 <code>5</code>, <code>2</code>），当放入每一个节点时，都将 <code>nlast</code> 指向这个节点，因为它始终是当前已知的该层的最右节点。<br>当 <code>last == pollNode</code> 表示当前层已遍历完成， 然后将 <code>last = nlast</code> ，下一行的开始，直到队列为空。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreePrinter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] printTree(TreeNode root) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;TreeNode&gt;&gt; levelList = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;TreeNode&gt;&gt;();</span><br><span class="line">        ArrayList&lt;TreeNode&gt; level = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line"></span><br><span class="line">        TreeNode last = root;</span><br><span class="line">        TreeNode nlast = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode pollNode = queue.poll();</span><br><span class="line">            level.add(pollNode);</span><br><span class="line">            <span class="keyword">if</span> (pollNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(pollNode.left);</span><br><span class="line">                nlast = pollNode.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pollNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(pollNode.right);</span><br><span class="line">                nlast = pollNode.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (last == pollNode) &#123;</span><br><span class="line">                last = nlast;</span><br><span class="line">                levelList.add(level);</span><br><span class="line">                level = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] rs = <span class="keyword">new</span> <span class="keyword">int</span>[levelList.size()][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelList.size(); i++) &#123;</span><br><span class="line">            rs[i] = <span class="keyword">new</span> <span class="keyword">int</span>[levelList.get(i).size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; rs[i].length; j++) &#123;</span><br><span class="line">                rs[i][j] = levelList.get(i).get(j).val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>计算最大值</title>
    <url>/calculate-maximum-value/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个字符串类型的数字, 写一个方法去找到最大值, 你可以在任意两个数字间加 <code>+</code> 或 <code>*</code></p>
<span id="more"></span>

<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 str = <code>01231</code>, 返回 <code>10 ((((0 + 1) + 2) * 3) + 1) = 10</code> 我们得到了最大值 <code>10</code></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote>
<p>本题的题意千万不要误解，这道题的题意是指只考虑顺序运算的情况下，即你只知道下一位是什么，如：<code>891</code>，有的同学可能会认为 <code>8 * (9 + 1)</code> 这样运算，得出结果为 80，但其实这道题只能从左向右，一个一个运算，不能加括号什么的。所以 <code>891</code> 的结果应该为 <code>8 * 9 + 1</code> 为 <code>73</code>.</p>
<p>理解题意后，可得知：<br>两个数之间运算，两者均不为 0 或 1，那么进行乘法运算显然可以得到最大的结果。<br>反之，当其中一个数为 0 或 1时，进行相加运算会比乘法运算得到的值好一些。</p>
</blockquote>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param : the given string</span></span><br><span class="line"><span class="comment">     * @return: the maximum value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calcMaxValue</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rs = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (rs &gt; <span class="number">1</span> &amp;&amp; c != <span class="string">&#x27;0&#x27;</span> &amp;&amp; c != <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                rs *= Integer.valueOf(c + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rs += Integer.valueOf(c + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/calculate-maximum-value/">LintCode：计算最大值</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>中文文案排版指北「转载」</title>
    <url>/chinese-copywriting-guidelines/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个博主，我认为文章的排版还是很重要的，一份好的排版的文章也是对读者的一份尊重，就好像在博客中代码要用代码块高亮起来一样。</p>
<p>我也经常遇到问题时去看别人的博客，但是好多博主的排版甚是难看，有些甚至连最基本的代码块都没有，看起来很是不舒服，所以今天发布一篇关于排版的文章，希望其他的博主看到以后，可以重视起来，养成一个良好的排版习惯，方便自己也方便他人。</p>
<p>本文摘自 GitHub 上的 <a href="https://github.com/mzlogin/chinese-copywriting-guidelines">中文文案排版指北</a>。</p>
<span id="more"></span>

<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p>
<p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js">vinta/paranoid-auto-spacing</a></p>
<h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p>
<div class="note success"><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p>
</div>


<p>错误：</p>
<div class="note danger"><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p>
<p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p>
</div>


<p>完整的正确用法：</p>
<div class="note success"><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p>
</div>

<p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p>
<h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p>
<div class="note success"><p>今天出去买菜花了 5000 元。</p>
</div>

<p>错误：</p>
<div class="note danger"><p>今天出去买菜花了 5000元。</p>
<p>今天出去买菜花了5000元。</p>
</div>

<h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p>
<div class="note success"><p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p>
</div>

<p>错误：</p>
<div class="note danger"><p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p>
</div>


<p>例外：度／百分比与数字之间不需要增加空格：</p>
<p>正确：</p>
<div class="note success"><p>今天是 233° 的高温。</p>
<p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p>
</div>

<p>错误：</p>
<div class="note danger"><p>今天是 233 ° 的高温。</p>
<p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p>
</div>

<h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p>
<div class="note success"><p>刚刚买了一部 iPhone，好开心！</p>
</div>

<p>错误：</p>
<div class="note danger"><p>刚刚买了一部 iPhone ，好开心！</p>
</div>

<h3 id="ms-text-autospace-to-the-rescue"><a href="#ms-text-autospace-to-the-rescue" class="headerlink" title="-ms-text-autospace to the rescue?"></a><code>-ms-text-autospace</code> to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85).aspx"><code>-ms-text-autospace</code></a> 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p>
<h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p>
<div class="note success"><p>德国队竟然战胜了巴西队！</p>
<p>她竟然对你说「喵」？！</p>
</div>

<p>错误：</p>
<div class="note danger"><p>德国队竟然战胜了巴西队！！</p>
<p>德国队竟然战胜了巴西队！！！！！！！！</p>
<p>她竟然对你说「喵」？？！！</p>
<p>她竟然对你说「喵」？！？！？？！！</p>
</div>

<h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全角和半角</a>』。</p>
<h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p>
<div class="note success"><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p>
<p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p>
</div>


<p>错误：</p>
<div class="note danger"><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p>
<p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎!</p>
<p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p>
<p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p>
</div>


<h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p>
<div class="note success"><p>这件蛋糕只卖 1000 元。</p>
</div>


<p>错误：</p>
<div class="note danger"><p>这件蛋糕只卖 １０００ 元。</p>
</div>

<p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p>
<h3 id="遇到完整的英文整句、特殊名词，其內容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其內容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其內容使用半角标点"></a>遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p>
<div class="note success"><p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p>
<p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p>
</div>


<p>错误：</p>
<div class="note danger"><p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p>
<p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p>
</div>


<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p>
<p>正确：</p>
<div class="note success"><p>使用 GitHub 登录</p>
<p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p>
</div>


<p>错误：</p>
<div class="note danger"><p>使用 github 登录</p>
<p>使用 GITHUB 登录</p>
<p>使用 Github 登录</p>
<p>使用 gitHub 登录</p>
<p>使用 gｲんĤЦ8 登录</p>
<p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p>
<p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p>
<p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p>
<p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p>
<p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p>
</div>


<p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p>
<h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p>
<div class="note success"><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p>
</div>

<p>错误：</p>
<div class="note danger"><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p>
</div>


<h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p>
<h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p>
<div class="note primary"><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p>
<p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p>
</div>


<p>对比用法：</p>
<div class="note warning"><p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p>
<p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p>
</div>

<h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p>
<div class="note primary"><p>「老师，『有条不紊』的『紊』是什么意思？」</p>
</div>

<p>对比用法：</p>
<div class="note warning"><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p>
</div>

<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table>
<thead>
<tr>
<th>仓库</th>
<th>语言</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/vinta/paranoid-auto-spacing">vinta/paranoid-auto-spacing</a></td>
<td>JavaScript</td>
</tr>
<tr>
<td><a href="https://github.com/huei90/pangu.node">huei90/pangu.node</a></td>
<td>Node.js</td>
</tr>
<tr>
<td><a href="https://github.com/huacnlee/auto-correct">huacnlee/auto-correct</a></td>
<td>Ruby</td>
</tr>
<tr>
<td><a href="https://github.com/sparanoid/space-lover">sparanoid/space-lover</a></td>
<td>PHP (WordPress)</td>
</tr>
<tr>
<td><a href="https://github.com/NauxLiu/auto-correct">nauxliu/auto-correct</a></td>
<td>PHP</td>
</tr>
<tr>
<td><a href="https://github.com/ricoa/copywriting-correct">ricoa/copywriting-correct</a></td>
<td>PHP</td>
</tr>
<tr>
<td><a href="https://github.com/hotoo/pangu.vim">hotoo/pangu.vim</a></td>
<td>Vim</td>
</tr>
<tr>
<td><a href="https://github.com/sparanoid/grunt-auto-spacing">sparanoid/grunt-auto-spacing</a></td>
<td>Node.js (Grunt)</td>
</tr>
<tr>
<td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk">hjiang/scripts/add-space-between-latin-and-cjk</a></td>
<td>Python</td>
</tr>
</tbody></table>
<h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table>
<thead>
<tr>
<th>网站</th>
<th>文案</th>
<th>UGC</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.apple.com/cn/">Apple 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.apple.com/hk/">Apple 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.apple.com/tw/">Apple 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-cn/">Microsoft 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-hk/">Microsoft 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-tw/">Microsoft 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://leancloud.cn/">LeanCloud</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://www.zhihu.com/">知乎</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr>
<td><a href="https://www.v2ex.com/">V2EX</a></td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td><a href="https://segmentfault.com/">SegmentFault</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr>
<td><a href="http://apple4us.com/">Apple4us</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://www.wandoujia.com/">豌豆荚</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://ruby-china.org/">Ruby China</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
<tr>
<td><a href="https://phphub.org/">PHPHub</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
<tr>
<td><a href="http://sspai.com/">少数派</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
</tbody></table>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm">Guidelines for Using Capital Letters</a></li>
<li><a href="http://en.wikipedia.org/wiki/Letter_case">Letter case - Wikipedia</a></li>
<li><a href="http://www.oxforddictionaries.com/words/punctuation">Punctuation - Oxford Dictionaries</a></li>
<li><a href="https://owl.english.purdue.edu/owl/section/1/6/">Punctuation - The Purdue OWL</a></li>
<li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly">How to Use English Punctuation Corrently - wikiHow</a></li>
<li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F">格式 - openSUSE</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全角和半角 - 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F">引号 - 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F">疑问惊叹号 - 维基百科</a></li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>排版</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>爬楼梯</title>
    <url>/climbing-stairs/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>假设你正在爬楼梯，需要n步你才能到达顶部。但每次你只能爬<strong>一步</strong>或者<strong>两步</strong>，你能有<strong>多少种</strong>不同的方法爬到楼顶部？</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><ul>
<li>n=1 方法只有一种就是1</li>
<li>n=2 1+1 或者 2  两种方法</li>
<li>n=3 1+1+1 或者 1+2 或者 2+1 三种方法</li>
<li>…..</li>
</ul>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>逆向思维，例如 <code>n = 4</code> ，那么他走的最后一步就只能是 <code>1步</code> 或者 <code>2步</code>，<br>如果最后走的是1级台阶，那么之前走的就是3级台阶，  如果之前走的是2级台阶，那么之前走的就是2级台阶，<br>于是得到4阶台阶的走法就是3阶台阶的走法加上2阶台阶的走法。也就是3 + 2 = 5种。<br>如果还不明白的话 我这样看：</p>
<ul>
<li><code>n=1:</code> </li>
<li><code>n=2:</code> <code>1+1</code> <code>2</code></li>
<li><code>n=3:</code> <code>1+1+1</code> <code>1+2</code> <code>2+1</code></li>
<li><code>n=4:</code> <code>1+1+1+1</code> <code>1+2+1</code> <code>2+1+1</code> <code>1+1+2</code> <code>2+2</code></li>
</ul>
<blockquote>
<p>在原来的 <code>n=3</code> 的基础上，所有方法都加1步，变成了 <code>1+1+1+1</code> <code>1+2+1</code>  <code>2+1+1</code> 。<br>然后再在 <code>n=2</code> 的基础上，所有方法都加2步，变成了 <code>1+1+2</code> <code>2+2</code><br>然后在看看 <code>n=2</code> 和 <code>n=3</code> 的时候，分别加上2步和1步  就变成了 <code>n=4</code> 的所有方法</p>
</blockquote>
<h2 id="代码实现：递归"><a href="#代码实现：递归" class="headerlink" title="代码实现：递归"></a>代码实现：递归</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n: An integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">    	</span><br><span class="line">        <span class="keyword">int</span> now = climbStairs(n-<span class="number">2</span>) + climbStairs(n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>递归方式虽然能实现这种，但是当n越大，程序运行时间就越长，最后还会导致<code>栈溢出</code>的情况，所以对算法进行了改进。</p>
</blockquote>
<h2 id="代码实现：-循环"><a href="#代码实现：-循环" class="headerlink" title="代码实现： 循环"></a>代码实现： 循环</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param n: An integer</span><br><span class="line">     * @return: An integer</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int climbStairs(int n) &#123;</span><br><span class="line">        if (n &#x3D;&#x3D; 0) &#123;   &#x2F;&#x2F;这里判断n &#x3D;&#x3D; 0 是因为题目测试程序给的测试数据中有n &#x3D; 0 时期望答案为1的设定。</span><br><span class="line">	    	return 1;</span><br><span class="line">		&#125;</span><br><span class="line">		if (n &#x3D;&#x3D; 1 || n &#x3D;&#x3D; 2)</span><br><span class="line">			return n;</span><br><span class="line">		int[] array &#x3D; new int[n + 1];</span><br><span class="line">		array[1] &#x3D; 1;</span><br><span class="line">		array[2] &#x3D; 2;</span><br><span class="line">		for (int i &#x3D; 3; i &lt;&#x3D; n; i++)</span><br><span class="line">			array[i] &#x3D; array[i - 1] + array[i - 2];</span><br><span class="line">		return array[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样就不会出现<code>栈溢出</code>的情况了，但是可以看到使用数组还是占用了一定的空间，不够简洁，于是再次改进。</p>
</blockquote>
<h2 id="代码实现：-循环优化版"><a href="#代码实现：-循环优化版" class="headerlink" title="代码实现： 循环优化版"></a>代码实现： 循环优化版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param n: An integer</span><br><span class="line">     * @return: An integer</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int climbStairs(int n) &#123;</span><br><span class="line">        if (n &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F;这里判断n &#x3D;&#x3D; 0 是因为题目测试程序给的测试数据中有n &#x3D; 0 时期望答案为1的设定。</span><br><span class="line">	    	return 1;</span><br><span class="line">		&#125;</span><br><span class="line">		if (n &#x3D;&#x3D; 1 || n &#x3D;&#x3D; 2)</span><br><span class="line">			return n;</span><br><span class="line">		int f1 &#x3D; 1;</span><br><span class="line">		int f2 &#x3D; 2;</span><br><span class="line">		int fn &#x3D; 0;</span><br><span class="line">		for (int i &#x3D; 3; i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">			fn &#x3D; f1 + f2;</span><br><span class="line">			f1 &#x3D; f2;</span><br><span class="line">			f2 &#x3D; fn;</span><br><span class="line">		&#125;</span><br><span class="line">		return fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此方法就是每次将 <code>f1</code> 和 <code>f2</code> 向后移动一次，以记录数据。避免浪费资源. 如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，  2， 3， 5， 8， 13 ......</span><br><span class="line">f1, f2, fn,</span><br><span class="line"></span><br><span class="line">1，  2， 3， 5， 8， 13 ......</span><br><span class="line">    f1, f2, fn</span><br><span class="line"></span><br><span class="line">1，  2， 3， 5， 8， 13 ......</span><br><span class="line">        f1, f2, fn</span><br></pre></td></tr></table></figure>


<h2 id="原题地址："><a href="#原题地址：" class="headerlink" title="原题地址："></a>原题地址：</h2><p><a href="http://www.lintcode.com/zh-cn/problem/climbing-stairs/">LintCode：爬楼梯</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>连接两个字符串中的不同字符</title>
    <url>/concatenated-string-with-uncommon-characters-of-two-strings/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出两个字符串, 你需要修改第一个字符串，将所有与第二个字符串中相同的字符删除, 并且第二个字符串中不同的字符与第一个字符串的不同字符连接</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 s1 = <code>aacdb</code>, s2 = <code>gafd</code><br>返回 <code>cbgf</code><br>给出 s1 = <code>abcs</code>, s2 = <code>cxzca</code><br>返回 <code>bsxz</code></p>
<span id="more"></span>


<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题我采用了牺牲空间换时间的方式，空间、时间复杂度为 O(m + n)。</p>
<p>以 s1 = <code>aacdb</code>, s2 = <code>gafd</code> 为例</p>
<p>先将 s2 的每一个字符都放进 Map 集合中，将字符当作键，将值赋为 1，此时 Map 集合中应为： <code>&#123;&quot;g&#39;:1, &quot;a&quot;:1, &quot;f&quot;:1, &quot;d&quot;: 1&#125;</code>.</p>
<p>然后将 s1 的每一个字符依次判断是否存在与 Map 集合的 Key 中，如果相等则将 集合中该 Key 的值变为 2，如果不相等，则将结果加入到字符串缓冲区中。</p>
<p>进行完这一步操作后，Map 集合中应为：<code>&#123;&quot;g&#39;:1, &quot;a&quot;:2, &quot;f&quot;:1, &quot;d&quot;: 2&#125;</code>，字符串缓冲区中应为 ：<code>cb</code>。</p>
<p>最后将 s2 再遍历一次，将在 Map 集合中 Value 为 1 的 Key 依次添加到字符串缓冲区中即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param : the 1st string</span></span><br><span class="line"><span class="comment">     * @param : the 2nd string</span></span><br><span class="line"><span class="comment">     * @return: uncommon characters of given strings</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">concatenetedString</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s2.toCharArray()) &#123;</span><br><span class="line">            map.put(c, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s1.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(c)) &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(c, <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s2.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(c) != <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/concatenated-string-with-uncommon-characters-of-two-strings/#">Lintcode：连接两个字符串中的不同字符</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>前序遍历和中序遍历树构造二叉树</title>
    <url>/construct-binary-tree-from-preorder-and-inorder-traversal/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>根据前序遍历和中序遍历树构造二叉树.<br> <strong>注意事项</strong>： <code>你可以假设树中不存在相同数值的节点</code></p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出中序遍历：[1,2,3]和前序遍历：[2,1,3]. 返回如下的树:</p>
<pre><code>    2
  /  \
 1    3
</code></pre>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据前序遍历和中序遍历的规律可得：</p>
<ol>
<li>前序遍历的第一个就是整个树的<strong>根节点</strong></li>
<li>这个根节点在中序遍历的左侧是其<strong>左子树</strong>，右侧是<strong>右子树</strong>。</li>
<li>将每一个节点都看作是一个<strong>单独的树</strong>，根据此 <code>规律1</code> 和 <code>规律2</code> 依次递归获取其左右子树的前序与中序遍历，直到前序遍历或中序遍历的<strong>长度仅剩1</strong>，则说明该节点为<strong>叶子节点</strong>，从而构造整棵树。</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition of TreeNode:</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public TreeNode left, right;</span></span><br><span class="line"><span class="comment"> *     public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> preorder : A list of integers that preorder traversal of a tree</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> inorder : A list of integers that inorder traversal of a tree</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@return</span> : Root of a tree</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (preorder.length == <span class="number">0</span> || inorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> root = preorder[<span class="number">0</span>]; <span class="comment">// 根据前序遍历的规律取第一个最为根节点</span></span><br><span class="line">		TreeNode treeRoot = <span class="keyword">new</span> TreeNode(root);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> flag = -<span class="number">1</span>;			<span class="comment">// flag用于存放根节点root在中序遍历中的位置</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (inorder[i] == root) &#123;</span><br><span class="line">				flag = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//前序或中序遍历等于1，则说明已经是叶子节点，直接return即可，避免多余运算</span></span><br><span class="line">		<span class="keyword">if</span> (preorder.length == <span class="number">1</span> || inorder.length == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> treeRoot;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span>[] child_InorderLeft = <span class="keyword">new</span> <span class="keyword">int</span>[flag];    					  <span class="comment">//左侧子节点的中序遍历</span></span><br><span class="line">		<span class="keyword">int</span>[] child_InorderRight = <span class="keyword">new</span> <span class="keyword">int</span>[(inorder.length - <span class="number">1</span>) - flag];  <span class="comment">//右侧子节点的中序遍历</span></span><br><span class="line">		<span class="keyword">int</span>[] child_PreorderLeft = <span class="keyword">new</span> <span class="keyword">int</span>[flag];						  <span class="comment">//左侧子节点的前序遍历</span></span><br><span class="line">		<span class="keyword">int</span>[] child_PreorderRight = <span class="keyword">new</span> <span class="keyword">int</span>[child_InorderRight.length];	  <span class="comment">//右侧子节点的前序遍历</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//从现有的中序遍历中拿到 左右子节点的中序遍历</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i &lt; flag) &#123;</span><br><span class="line">				child_InorderLeft[i] = inorder[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> ((i &gt; flag) )&#123;</span><br><span class="line">				child_InorderRight[i - flag - <span class="number">1</span>] = inorder[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//从现有的前序遍历中拿到 左右子节点的前序遍历</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; preorder.length ; i++) &#123;  <span class="comment">//这里i从1开始，是因为i的preorder[0]为根节点</span></span><br><span class="line">			<span class="keyword">if</span>(i &lt;= flag)</span><br><span class="line">				child_PreorderLeft[i-<span class="number">1</span>] = preorder[i];   <span class="comment">//preorderSeed[i-1] 是因为要新左子树要从0存放，不然preorderSeed[0]就是空的，而且长度会不够</span></span><br><span class="line">			<span class="keyword">else</span> &#123; </span><br><span class="line">				child_PreorderRight[i - flag - <span class="number">1</span>] = preorder[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//递归调用获取左右子树</span></span><br><span class="line">		treeRoot.left = buildTree(child_PreorderLeft,child_InorderLeft);</span><br><span class="line">		treeRoot.right = buildTree(child_PreorderRight,child_InorderRight);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> treeRoot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/construct-binary-tree-from-preorder-and-inorder-traversal/#">LintCode：前序遍历和中序遍历树构造二叉树</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>排序链表转换为二分查找树</title>
    <url>/convert-sorted-list-to-balanced-bst/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个所有元素以升序排序的单链表，将它转换成一棵高度平衡的二分查找树</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><pre><code>               2
1-&gt;2-&gt;3  =&gt;   / \
             1   3
             
             
                        3
1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6  =&gt;   / \
                      1   5
                     / \ / \
                    #  2 4  6
</code></pre>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题要求是高度平衡的二叉树，那就看作是标准的平衡二叉树。<br>首先平衡二叉树要求左右子树的高度差不超过 1，我们把有序列表的中间节点作为根，即可保证左右子树的元素个数相差不超过1，只需要把每一个节点都看作是一棵树，递归取中间节点即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * Definition of TreeNode:</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public TreeNode left, right;</span></span><br><span class="line"><span class="comment"> *     public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head: The first node of linked list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: a tree node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先将链表转化为List，方便获取长度，并随机读取。</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> toTreeNode(list, <span class="number">0</span>, list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">toTreeNode</span> <span class="params">(List&lt;Integer&gt; list, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回条件</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt; e)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (s + e) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//把中间节点作为根</span></span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(list.get(mid));</span><br><span class="line">        <span class="comment">//分别递归左右子树</span></span><br><span class="line">        root.left = toTreeNode(list, s, mid - <span class="number">1</span>);</span><br><span class="line">        root.right = toTreeNode(list, mid + <span class="number">1</span>, e);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/convert-sorted-list-to-balanced-bst/">LintCode：排序列表转换为二分查找树</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>二叉树</tag>
        <tag>平衡二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>报数</title>
    <url>/count-and-say/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>报数指的是，按照其中的整数的顺序进行报数，然后得到下一个数。如下所示：</p>
<p><code>1, 11, 21, 1211, 111221, ...</code></p>
<p><code>1</code> 读作 <code>&quot;one 1&quot;</code> -&gt; <code>11</code>.</p>
<p><code>11</code> 读作 <code>&quot;two 1s&quot;</code> -&gt; <code>21</code>.</p>
<p><code>21</code> 读作 <code>&quot;one 2, then one 1&quot;</code> -&gt; <code>1211</code>.</p>
<p>给定一个整数 <code>n</code>, 返回 第 <code>n</code> 个顺序。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给定 <code>n = 5</code>, 返回 <code>&quot;111221&quot;.</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题的题意不太容易理解，提示是： <code>n = 1</code>  时输出字符串 1，<code>n = 2</code> 时由于上次字符串为 1，所以记作一个 1，也就是输出 11，<code>n = 3</code> 时，由于上一个输出是 11，记作两个 1，输出 21。以此类推……，有点类似于 <a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145">斐波那契数列</a>。</p>
<p>题意理解后就容易做了，可以用递归法或循环即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param n: the nth</span></span><br><span class="line"><span class="comment">     * @return: the nth sequence</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//递归法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (--n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">char</span>[] c = str.toCharArray();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((i + <span class="number">1</span>) &lt; c.length &amp;&amp; c[i] == c[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(String.valueOf(count) + String.valueOf(c[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            str = sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/count-and-say/#">LintCode：报数</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>在O(1)时间复杂度删除链表节点</title>
    <url>/delete-node-in-the-middle-of-singly-linked-list/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个单链表中的一个等待被删除的节点(非表头或表尾)。请在在 <code>O(1)</code> 时间复杂度删除该链表节点。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Linked list is <code>1-&gt;2-&gt;3-&gt;4</code>, and given node <code>3</code>, delete the node in place <code>1-&gt;2-&gt;4</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>删除一个节点，只需要将该节点的下一个节点的值赋值给该该节点，并且让该节点的下一个指向它下一个的下一个即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node: the node in the list should be deleted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: nothing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;<span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span> || node.next == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        ListNode next = node.next;</span><br><span class="line">        node.val = next.val;</span><br><span class="line">        node.next = next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/delete-node-in-the-middle-of-singly-linked-list/">LintCode：在O(1)时间复杂度删除链表节点 </a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>DigitalOcean 挂载 volume 硬盘</title>
    <url>/digitalocean-mount-volume/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>DigitalOcean 的默认硬盘容量只有 25G，但 DigitalOcean 已经在部分服务器区域增加了 <code>volume</code> 的特性，大大方便了用户的存储需求，以下是我的试用记录，系统为 CentOS7。 </p>
<span id="more"></span>

<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><ul>
<li><p>首先需要在 DigitalOcean 控制台为机器添加一个 <code>volume</code>。</p>
</li>
<li><p>连接机器并切换到 root 用户</p>
</li>
<li><p>查看当前机器所添加的 <code>volume</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /dev/disk/by-id &amp;&amp; ll</span><br><span class="line"></span><br><span class="line"><span class="comment">## 输出:</span></span><br><span class="line"><span class="comment">## lrwxrwxrwx 1 root root 9 Aug 15 10:30 scsi-0DO_Volume_test -&gt; ../../sda</span></span><br><span class="line"><span class="comment">## 可得知 volume 名称为 : scsi-0DO_Volume_test</span></span><br></pre></td></tr></table></figure></li>
<li><p>格式化 <code>volume</code> 为 <code>ext4</code> 格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 -F /dev/disk/by-id/scsi-0DO_Volume_test</span><br><span class="line"></span><br><span class="line"><span class="comment">## 这里的路径要改为你的 volume 路径</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建挂载点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /mnt/volume1</span><br></pre></td></tr></table></figure></li>
<li><p>进行挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount -o discard,defaults /dev/disk/by-id/scsi-0DO_Volume_test /mnt/volume1</span><br></pre></td></tr></table></figure></li>
<li><p>查看挂载后的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line"></span><br><span class="line"><span class="comment">## 输出:</span></span><br><span class="line"><span class="comment"># Filesystem      Size  Used Avail Use% Mounted on</span></span><br><span class="line"><span class="comment"># devtmpfs        473M     0  473M   0% /dev</span></span><br><span class="line"><span class="comment"># tmpfs           496M   16K  496M   1% /dev/shm</span></span><br><span class="line"><span class="comment"># tmpfs           496M   13M  484M   3% /run</span></span><br><span class="line"><span class="comment"># tmpfs           496M     0  496M   0% /sys/fs/cgroup</span></span><br><span class="line"><span class="comment"># /dev/vda1        25G  3.5G   22G  14% /</span></span><br><span class="line"><span class="comment"># /dev/sda         99G    0G   99G   0% /mnt/volume1</span></span><br><span class="line"><span class="comment"># tmpfs           100M     0  100M   0% /run/user/0</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置开启自动挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> /dev/disk/by-id/scsi-0DO_Volume_test /mnt/volume1 ext4 defaults,nofail,discard 0 0 | sudo tee -a /etc/fstab</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h2><ul>
<li><p>卸载 <code>volume</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /mnt/volume1</span><br></pre></td></tr></table></figure></li>
<li><p>移除自动挂载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑这个文件，将刚才开机自动挂载的代码删除</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 DigitalOcean 管理界面中从关联的机器上删除这个 <code>volume</code>。 </p>
</li>
</ul>
<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><ul>
<li><p>在 DigitalOcean 管理界面中找到这台机器对应的 <code>volume</code>，<code>resize</code> 至需要的大小，如 <code>500G</code>。</p>
</li>
<li><p> 以 root 身份执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/disk/by-id/scsi-0DO_Volume_test</span><br></pre></td></tr></table></figure></li>
<li><p> 使用 <code>df -h</code> 命令重新查看磁盘状态。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Docker 快速安装 HTML5-Based Speedtest，可以准确的测试本地到 VPS 的网络速度</title>
    <url>/docker-speedtest/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常会搞一些小鸡玩，但想测试速度，总是比较麻烦，而在 <code>VPS</code> 服务器上跑 <code>speedtest-cli</code> 却感觉测试结果不靠谱，因为它只跑了距离服务器最近的节点的速度。</p>
<p>现在，有了<code>HTML5-Based Speedtest</code>，这一切都迎刃而解！</p>
<p>应用已经<code>Docker</code>化了，很简单即可部署测速环境！</p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://cdn.jun6.net/201805281850_479.png"></p>
<span id="more"></span>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于<code>Speedtest</code>会尽可能使用最大的带宽，来反馈最真实的网络性能，所以，在部署完成项目后，请不要将你的测速地址公开！</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>1、安装Docker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure>

<p><strong>2、配置镜像</strong><br>使用命令：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> [-t/-d] -p [6688]:80 ilemonrain/html5-speedtest:alpine</span></span><br></pre></td></tr></table></figure>

<p>参数详解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-t：启动后显示日志，可用Ctrl+C转入后台运行</span><br><span class="line">-d：后台模式启动</span><br><span class="line">-p 6688:80：镜像映射端口，修改6688为任意端口即可</span><br></pre></td></tr></table></figure>

<p>示例命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6688:80 ilemonrain&#x2F;html5-speedtest:alpine</span><br></pre></td></tr></table></figure>

<p>然后打开 <code>http://ip:6688</code> 即可。</p>
<p>如果是 <code>CentOS 7</code> 可能会打不开页面，放行防火墙端口，或者关掉即可！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开6688端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6688/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>

<p>docker 作者博客 : <a href="https://blog.ilemonrain.com/">https://blog.ilemonrain.com</a></p>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>docker</tag>
        <tag>speedtest</tag>
      </tags>
  </entry>
  <entry>
    <title>寻找旋转排序数组中的最小值</title>
    <url>/find-minimum-in-rotated-sorted-array/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>假设一个旋转排序的数组其起始位置是未知的（比如 <strong><code>0 1 2 4 5 6 7</code></strong> 可能变成是 **<code>4 5 6 7 0 1 2</code>**）。</p>
<p>你需要找到其中<strong>最小的</strong>元素。</p>
<p>你可以假设数组中<strong>不存在重复</strong>的元素。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <strong><code>[4,5,6,7,0,1,2]</code></strong>  返回 <code>0</code>。</p>
<span id="more"></span>

<h2 id="代码实现：-顺序查找"><a href="#代码实现：-顺序查找" class="headerlink" title="代码实现： 顺序查找"></a>代码实现： 顺序查找</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: a rotated sorted array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: the minimum number in the array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; nums.length; j++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; i)</span><br><span class="line">                i = nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这种方式非常简单，就是依次顺序查找，但是题目推荐的是用二分法进行查找，故下方又用二分法实现了功能。</p>
</blockquote>
<h2 id="代码实现：-二分法"><a href="#代码实现：-二分法" class="headerlink" title="代码实现： 二分法"></a>代码实现： 二分法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: a rotated sorted array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: the minimum number in the array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[l] &lt; nums[r])  </span><br><span class="line">            <span class="keyword">return</span> nums[l];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[r])</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nums[r];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该题的主要思路就是 <code>中位数</code> 与 <code>右侧数</code> 的比较。<br>根据该类型数据的规律可得结论： <code>中位数</code> &gt; <code>右侧数</code> 则说明 <code>最小数</code> 在右侧，反之在左侧。</p>
</blockquote>
<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/find-minimum-in-rotated-sorted-array/">LintCode：寻找旋转排序数组中的最小值</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/first-position-of-target/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个排序的整数数组（升序）和一个要查找的整数 <code>target</code>，用 <code>O(logn)</code> 的时间查找到 <code>target</code> 第一次出现的下标（从 0 开始），如果 <code>target</code> 不存在于数组中，返回 <code>-1</code>。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>在数组 <code>[1, 2, 3, 3, 4, 5, 10]</code> 中二分查找 <code>3</code>，返回 <code>2</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题的要点是查找第一次出现的位置，所以当 <code>nums[mid] == target</code> 时，应该将这个 mid 值赋值给 end，这样才能保证查找到的是第一个。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: The integer array.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target: Target to find.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The first position of target. Position starts from 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">                start = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                end = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (nums[end] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/first-position-of-target/">LintCode：二分查找</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/git-help/</url>
    <content><![CDATA[<h2 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>安装这里就不再多讲了，网上有许多教程，可以参考：</p>
<ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000">廖雪峰-安装Git</a></li>
<li><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git 官方教程</a></li>
</ul>
<span id="more"></span>

<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意 git config 命令的 –global 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址。</p>
</blockquote>
<h2 id="获取-amp-创建项目"><a href="#获取-amp-创建项目" class="headerlink" title="获取&amp;创建项目"></a>获取&amp;创建项目</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化一个仓库，可以在任意目录中执行，表示对该目录使用 git 进行版本控制</p>
</blockquote>
<h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>

<h2 id="基本的快照"><a href="#基本的快照" class="headerlink" title="基本的快照"></a>基本的快照</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;path&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以添加一个文件如 <code>git add README.md</code> 或一个目录 <code>git add config</code> 或使用通配符添加所有文件 <code>git add *</code>   — 添加到暂存区。</p>
</blockquote>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看你的文件在暂存区和工作目录的状态，默认是较为详细的显示，并提示你可以用何种命令完成你接下来可能要做的事情。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status -s</span><br></pre></td></tr></table></figure>
<p>较为简单的输出当前的状态，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">M  README.md</span><br><span class="line"> D hello.rb</span><br><span class="line">?? world.java</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你可以看到，在简短输出中，有两栏。第一栏是暂存区的，第二栏则是工作目录的。这里表示： </p>
<ul>
<li><code>README.md</code> 在暂存区中的状态是 <code>modify</code></li>
<li><code>hello.rd</code> 在工作目录中的状态是 <code>delete</code></li>
<li><code>world.java</code> 还未添加到版本控制。</li>
</ul>
</blockquote>
<h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff            <span class="comment"># 工作目录和暂存区</span></span><br><span class="line">git diff --cached   <span class="comment"># 暂存区和本地仓库</span></span><br><span class="line">git diff HEAD 	    <span class="comment"># 工作目录和本地仓库</span></span><br><span class="line">git diff --<span class="built_in">stat</span>     <span class="comment"># 显示信息摘要</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行 git diff 来查看执行 git status 的结果的详细信息 —— 一行一行地显示这些文件是如何被修改或写入缓存的。</p>
</blockquote>
<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span>    <span class="comment">## 将暂存区中的内容提交到本地仓库</span></span><br><span class="line">git commit -am <span class="string">&quot;commit message&quot;</span>   <span class="comment">## 免去了 git add 进行 commit，需要 tracked 状态</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行 git commit 记录缓存区的快照到本地仓库。</p>
</blockquote>
<h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD -- file    <span class="comment"># 将本地仓库的当前版本恢复到暂存区</span></span><br><span class="line">git reset HEAD~1 -- file  <span class="comment"># 将本地仓库的上个版本恢复到暂存区</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>git reset HEAD -- file</code> 也可以理解为放弃暂存区中的修改</p>
</blockquote>
<h3 id="rm-mv"><a href="#rm-mv" class="headerlink" title="rm, mv"></a>rm, mv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm           <span class="comment"># 将文件从暂存区和工作目录删除，-f 为强制删除</span></span><br><span class="line">git rm --cached &lt;path&gt; <span class="comment"># 将文件从暂存区中删除</span></span><br><span class="line">git mv &lt;old_path&gt; &lt;new_path&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>git rm 用来删除文件、目录。git mv 命令用于移动或重命名一个文件、目录。</p>
</blockquote>
<h2 id="分支和合并"><a href="#分支和合并" class="headerlink" title="分支和合并"></a>分支和合并</h2><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch                 <span class="comment"># 列出所有分支</span></span><br><span class="line">git branch (branchname)    <span class="comment"># 创建新分支。</span></span><br><span class="line">git branch -d (branchname) <span class="comment"># 删除分支</span></span><br></pre></td></tr></table></figure>

<h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout (branch) <span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b (branchname) <span class="comment"># 创建新分支，并立即切换到它</span></span><br></pre></td></tr></table></figure>


<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;branchname&gt;  <span class="comment">## 将分支合并到当前分支  </span></span><br><span class="line">git merge --no-ff &lt;branchname&gt; <span class="comment">## 不适用 Fast-Forword 方式合并</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p> 使用 git merge 将另一个分支并入当前的分支中去。 关于 <code>--no-ff</code> 可参考 <a href="http://www.ruanyifeng.com/blog/2012/07/git.html">Git 分支管理策略</a></p>
</blockquote>
<h3 id="log-amp-reflog"><a href="#log-amp-reflog" class="headerlink" title="log &amp; reflog"></a>log &amp; reflog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span>		   <span class="comment"># 当前分支的 log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline  <span class="comment"># 简要 log</span></span><br><span class="line">git <span class="built_in">log</span> --graph    <span class="comment"># 查看各种分支之间的日志</span></span><br><span class="line"></span><br><span class="line">git reflog 	   <span class="comment"># 查看所有分支的所有操作记录(包括 reset)</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>显示一个分支中提交的更改记录</p>
</blockquote>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag 		       <span class="comment"># 查看所有标签</span></span><br><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">&quot;blablabla...&quot;</span>  <span class="comment"># 创建一个标签，并附上信息</span></span><br><span class="line">git tag -d &lt;tagname&gt;    		       <span class="comment"># 删除本地标签</span></span><br></pre></td></tr></table></figure>


<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v 			<span class="comment"># 查看已关联的所有的远程仓库</span></span><br><span class="line">git remote add  [<span class="built_in">alias</span>] [url]   <span class="comment"># 添加一个新的远程仓库</span></span><br><span class="line">git remote rm [<span class="built_in">alias</span>] 		<span class="comment"># 删除远程仓库的管理</span></span><br></pre></td></tr></table></figure>

<h3 id="fetch-pull"><a href="#fetch-pull" class="headerlink" title="fetch, pull"></a>fetch, pull</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 origin 仓库的 master 分支与本地的 next 分支进行合并</span></span><br><span class="line">git pull origin master:next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 origin 仓库的 next 分支与本地的 master 分支进行合并</span></span><br><span class="line">git pull origin next:master</span><br></pre></td></tr></table></figure>

<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推到 origin 仓库的 master 分支</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment"># 将本地仓库的 master 与远程仓库进行关联，以后 push 就不用指定分支了。</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>



<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="git-分支合并策略"><a href="#git-分支合并策略" class="headerlink" title="git 分支合并策略"></a>git 分支合并策略</h3><p>在 Git 中有三种分支合并方式：</p>
<ul>
<li><code>git merge fast-forword</code>： 当条件允许时，git 直接把 HEAD 指针指向合并分支的头（默认）</li>
<li><code>git merge --no-ff</code>：不适用 <code>fast-forward</code> 方式合并，保留分支的 commit 历史</li>
<li><code>git merge --squash</code>：使用 <code>squash</code> 方式合并，将多次分支的 commit 历史记录压缩为一次</li>
</ul>
<p><img src="https://cdn.jun6.net/201801201231_759.png"></p>
]]></content>
      <categories>
        <category>速查手册</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>快乐数</title>
    <url>/happy-number/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>写一个算法来判断一个数是不是”快乐数”。</p>
<p>一个数是不是快乐是这么定义的：对于一个正整数，每一次将该数替换为他每个位置上的数字的平方和，然后重复这个过程直到这个数变为1，或是无限循环但始终变不到1。如果可以变为1，那么这个数就是快乐数。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>19 就是一个快乐数。</p>
<pre><code>1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1
</code></pre>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>依次取每一位的平方来计算当前数的快乐数，并将计算出的快乐数存到一个不重复集合中，一旦快乐数与集合中的元素存在重复，则说明会无限循环，该数就不是一个快乐数、</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param n: An integer</span></span><br><span class="line"><span class="comment">     * @return: true if this is a happy number or false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; hash = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash.contains(n)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hash.add(n);</span><br><span class="line">            n = getNextHappy(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/happy-number/">LintCode：快乐数</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 扩展 --- 优雅的备份 Hexo 博客</title>
    <url>/hexo-backup/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于 Hexo 是静态博客，需要在本地配置，写文章，然后生成静态页面后上传到服务器。</p>
<p>这也就带来了备份的问题，我辛辛苦苦的配置了那么多主题相关的个性化配置，换电脑了怎么办？<br>重写？ 怎么可能。！</p>
<span id="more"></span>

<p>那么备份本地的 Hexo 文件吧，这就涉及到一个问题，先看下我的博客在本地占用的空间和文件数量：<br><img src="https://cdn.jun6.net/201711201901_178.png"><br>文件大小还可以接受，但…文件数量这么多，小文件复制起来那叫一个慢啊。</p>
<p>这里我们要考虑几个问题了：</p>
<ul>
<li>哪些文件需要备份，哪些不需要。</li>
<li>如何备份，用什么工具备份。</li>
<li>备份到 U 盘？云盘？还是其他。</li>
<li>备份后如何恢复（<strong>重点</strong>）。</li>
</ul>
<p>按照这几点，我们慢慢谈。</p>
<h2 id="备份哪些文件？"><a href="#备份哪些文件？" class="headerlink" title="备份哪些文件？"></a>备份哪些文件？</h2><p>备份我们只需呀备份一些重要的文件即可，一些安装后就没该变化，或会自动生成的文件就没必要备份了，以下几个是我测试后的较为精简的备份方案。</p>
<ul>
<li>根目录下的几个配置文件，主要是 <code>_config.yml</code>、<code>package.json</code> 。<strong>（必备份）</strong></li>
</ul>
<ul>
<li><p><code>source</code> 文件夹，这个就不用说了，这里面包含了你写的文章的 <code>markdown</code> 源码，这个才是最重要的。<strong>（必备份）</strong></p>
</li>
<li><p><code>hexo/themes/themes_name</code> 这里的 <code>themes_name</code> 指的是你的主题名称，可能你会对主题进行一些个性化的配置，所以这个主题全部备份了。（一般都只用一个主题，而且默认的主题也不用，所以默认主题不用备份。）。<strong>（必备份）</strong></p>
</li>
<li><p><code>scaffolds</code> 文件夹，这个文件夹里是创建文章时的模板，如果你没修改过这个文件夹中的东西，可以不用备份。<strong>（根据情况备份）</strong></p>
</li>
<li><p><code>.ssh</code> ，如果你使用了免密部署，那么备份下你的公钥和私钥还是有必要的，你也可以选择，当然重新生成。<strong>（根据情况备份）</strong></p>
</li>
</ul>
<h2 id="备份到哪里？"><a href="#备份到哪里？" class="headerlink" title="备份到哪里？"></a>备份到哪里？</h2><p>备份到哪里也是一个问题，备份到 U 盘的话就太麻烦了，而且也不能保证文件的实时性，万一电脑文件突然全部丢失了，还没来得及备份，那就完蛋了~。</p>
<p>所以直接排除掉本地备份这一项，而使用云服务备份，可以使用百度云，或 OneDriver 等服务，但还要考虑一个问题，就是能不能进行增量备份、选择性备份，方便不方便。</p>
<p>说先说说百度云，是大厂的，可靠性很高，但是呢，你可能备份上去简单，下载下来就难了。。。<br>然后就是 OneDriver 等国外的服务提供商，同样也是大厂，但是毕竟由于网速的问题，选择国外的服务商不太适合。</p>
<p>于是就轮到今天的主角了：<a href="https://www.jianguoyun.com/"><code>坚果云</code></a>，不是广告，是确实挺好用。<br>记得用 <code>选择性备份</code>：<br><img src="https://cdn.jun6.net/201711201952_281.png"></p>
<h2 id="备份后如何恢复"><a href="#备份后如何恢复" class="headerlink" title="备份后如何恢复?"></a>备份后如何恢复?</h2><ol>
<li><p>安装 NodeJS 和 Git 这个就不多说了，并把备份的公钥私钥放到用户目录下的 <code>.ssh</code> 文件夹下，同时还要记得配置 Git 的邮箱和用户名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>再将备份到坚果云的文件都先同步(下载)到本地的一个文件夹。</p>
</li>
<li><p>然后创建一个目录，用来存放 hexo，一系列命令 ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.cnpmjs.org</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-util --save</span><br></pre></td></tr></table></figure></li>
<li><p>现在再把第二步的拿到的之前备份的文件，依次覆盖当前目录下的文件即可（<code>package.json</code> 除外）。</p>
</li>
<li><p>对比备份的 <code>package.json</code> 和新生成的 <code>package.json</code> 文件的区别，可以得知自己有哪些插件没安装，安装即可。（如果不小心覆盖掉了 <code>package</code> 文件，也不要紧，打开 <code>node_modules</code> 文件夹，查看跟备份的 <code>package.json</code> 中的差别）</p>
</li>
</ol>
<div class="note danger"><p><strong>还原后，别忘了，在把现在的博客再设置下备份~~~</strong> </p>
</div>











]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo优化 --- 添加复制功能</title>
    <url>/hexo-copy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo Next 主题自带的代码块功能，没有复制功能，很不方便。</p>
<p>经过一番查找后，在主题的 <code>Issues</code> 中找到了解决方案，这里记录下。</p>
<span id="more"></span>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>需要下载  <a href="https://clipboardjs.com/">clipboard.js</a> </p>
<ul>
<li><a href="https://clipboardjs.com/">主页</a></li>
<li><a href="https://github.com/zenorocha/clipboard.js">Github</a></li>
</ul>
<p>提供下载</p>
<ul>
<li><i class="fa fa-download" aria-hidden="true"></i> <a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.js">clipboard.min.js</a></li>
</ul>
<p>将下载的文件存到如下目录：（相对目录为工程目录，没有目录则创建）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\themes\next\source\lib\zclip\clipboard.min.js </span><br></pre></td></tr></table></figure>

<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p><strong>新建文件</strong> <code>custom.js</code> ，目录如下：（相对目录为工程目录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\source\js\src\custom.js</span><br></pre></td></tr></table></figure>

<p>修改 <code>custom.js</code> 为如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此函数用于创建复制按钮</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCopyBtns</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $codeArea = $(<span class="string">&quot;figure table&quot;</span>);</span><br><span class="line">    <span class="comment">//查看页面是否具有代码区域，没有代码块则不创建 复制按钮</span></span><br><span class="line">    <span class="keyword">if</span> ($codeArea.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//复制成功后将要干的事情</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">changeToSuccess</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">             $imgOK = $(<span class="string">&quot;#copyBtn&quot;</span>).find(<span class="string">&quot;#imgSuccess&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> ($imgOK.css(<span class="string">&quot;display&quot;</span>) == <span class="string">&quot;none&quot;</span>) &#123;</span><br><span class="line">                    $imgOK.css(&#123;</span><br><span class="line">                        opacity: <span class="number">0</span>,</span><br><span class="line">                        display: <span class="string">&quot;block&quot;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    $imgOK.animate(&#123;</span><br><span class="line">                        opacity: <span class="number">1</span></span><br><span class="line">                    &#125;, <span class="number">1000</span>);</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        $imgOK.animate(&#123;</span><br><span class="line">                            opacity: <span class="number">0</span></span><br><span class="line">                        &#125;, <span class="number">2000</span>);</span><br><span class="line">                    &#125;, <span class="number">2000</span>);</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        $imgOK.css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">                    &#125;, <span class="number">4000</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮</span></span><br><span class="line">        <span class="comment">//值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码)</span></span><br><span class="line">        $(<span class="string">&quot;.post-body&quot;</span>).before(<span class="string">&#x27;&lt;div id=&quot;copyBtn&quot; style=&quot;opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em&quot;&gt;&lt;span id=&quot;imgCopy&quot; &gt;&lt;i class=&quot;fa fa-paste fa-fw&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id=&quot;imgSuccess&quot; style=&quot;display: none;&quot;&gt;&lt;i class=&quot;fa fa-check-circle fa-fw&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&#x27;</span>);</span><br><span class="line">        <span class="comment">//创建 复制 插件，绑定单机时间到 指定元素，支持JQuery</span></span><br><span class="line">        <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&#x27;#copyBtn&#x27;</span>, &#123;</span><br><span class="line">            target: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//返回需要复制的元素内容</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">&quot;[copyFlag]&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            isSupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//支持复制内容</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">&quot;[copyFlag]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//复制成功事件绑定</span></span><br><span class="line">        clipboard.on(<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//清除内容被选择状态</span></span><br><span class="line">                e.clearSelection();</span><br><span class="line">                changeToSuccess(e);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//复制失败绑定事件</span></span><br><span class="line">        clipboard.on(<span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">&#x27;Action:&#x27;</span>, e.action);</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">&#x27;Trigger:&#x27;</span>, e.trigger);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果</span></span><br><span class="line">        $(<span class="string">&quot;#copyBtn&quot;</span>).hover(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).stop();</span><br><span class="line">                $(<span class="built_in">this</span>).css(<span class="string">&quot;opacity&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).animate(&#123;</span><br><span class="line">                    opacity: <span class="number">0</span></span><br><span class="line">                &#125;, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//感应鼠标是否在代码区</span></span><br><span class="line">$(<span class="string">&quot;figure&quot;</span>).hover(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//-------鼠标活动在代码块内</span></span><br><span class="line">        <span class="comment">//移除之前含有复制标志代码块的 copyFlag</span></span><br><span class="line">        $(<span class="string">&quot;[copyFlag]&quot;</span>).removeAttr(<span class="string">&quot;copyFlag&quot;</span>);</span><br><span class="line">        <span class="comment">//在新的（当前鼠标所在代码区）代码块插入标志：copyFlag</span></span><br><span class="line">        $(<span class="built_in">this</span>).find(<span class="string">&quot;.code&quot;</span>).attr(<span class="string">&quot;copyFlag&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取复制按钮</span></span><br><span class="line">        $copyBtn = $(<span class="string">&quot;#copyBtn&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ($copyBtn.lenght != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//获取到按钮的前提下进行一下操作</span></span><br><span class="line">            <span class="comment">//停止按钮动画效果</span></span><br><span class="line">            <span class="comment">//设置为 显示状态</span></span><br><span class="line">            <span class="comment">//修改 复制按钮 位置到 当前代码块开始部位</span></span><br><span class="line">            <span class="comment">//设置代码块 左侧位置</span></span><br><span class="line">            $copyBtn.stop();</span><br><span class="line">            $copyBtn.css(<span class="string">&quot;opacity&quot;</span>, <span class="number">0.8</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;block&quot;</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">&quot;top&quot;</span>, <span class="built_in">parseInt</span>($copyBtn.css(<span class="string">&quot;top&quot;</span>)) + $(<span class="built_in">this</span>).offset().top - $copyBtn.offset().top + <span class="number">3</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">&quot;left&quot;</span>, -$copyBtn.width() - <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//-------鼠标离开代码块</span></span><br><span class="line">        <span class="comment">//设置复制按钮可见度 2秒内到 0</span></span><br><span class="line">        $(<span class="string">&quot;#copyBtn&quot;</span>).animate(&#123;</span><br><span class="line">            opacity: <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//页面载入完成后，创建复制按钮</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createCopyBtns();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>新建文件</strong> <code>custom.swig</code> ，目录：<code>.\themes\next\layout\_custom\custom.swig</code>（相对目录为工程目录）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/lib/zclip/clipboard.min.js&quot;</span>&gt;&lt;/script&gt;	</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/src/custom.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>修改文件</strong> <code>_layout.swig</code> ，目录：<code>\themes\next\layout\_layout.swig</code>（相对目录为工程目录）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123; html_class | lower &#125;&#125;&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;&#123;&#123; config.language &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/WebPage&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;&#123;&#123; page.lang || page.language || config.language &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    &#123;% include &#x27;_third-party/mathjax.swig&#x27; %&#125;</span><br><span class="line">    &#123;% include &#x27;_third-party/scroll-cookie.swig&#x27; %&#125;</span><br><span class="line">    &#123;% include &#x27;_third-party/exturl.swig&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% include &#x27;_custom/custom.swig&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>向文件中 <code>&lt;/body&gt;</code> 前一行插入文件引用，如第 15 行效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &#39;_custom&#x2F;custom.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>



<hr>
<p>本文参考 <a href="https://github.com/iissnan/hexo-theme-next/issues/1684">Issues #1684 代码块增加复制功能</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo优化 --- 利用 Markdown 语法画流程图</title>
    <url>/hexo-flowchart/</url>
    <content><![CDATA[<h2 id="添加支持"><a href="#添加支持" class="headerlink" title="添加支持"></a>添加支持</h2><p>Hexo 默认是不支持流程图的 Markdown 语法的，需要添加支持：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="一个最简单的流程图"><a href="#一个最简单的流程图" class="headerlink" title="一个最简单的流程图"></a>一个最简单的流程图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">···flow    #由于渲染问题，请自行将 · 替换为 &#96;</span><br><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op&#x3D;&gt;operation: 我的操作</span><br><span class="line">cond&#x3D;&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op&#x3D;&gt;operation: 我的操作</span><br><span class="line">cond&#x3D;&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
<h3 id="一个复杂的流程图"><a href="#一个复杂的流程图" class="headerlink" title="一个复杂的流程图"></a>一个复杂的流程图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">···flow    #由于渲染问题，请自行将 · 替换为 &#96;</span><br><span class="line">st&#x3D;&gt;start: Start:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class="line">e&#x3D;&gt;end:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine</span><br><span class="line">cond&#x3D;&gt;condition: Yes</span><br><span class="line">or No?:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br><span class="line">···</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class="line">e&#x3D;&gt;end:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine</span><br><span class="line">cond&#x3D;&gt;condition: Yes</span><br><span class="line">or No?:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure>


<h2 id="语法详解"><a href="#语法详解" class="headerlink" title="语法详解"></a>语法详解</h2><p>Hexo 中的流程图是依赖于 <a href="http://flowchart.js.org/">flowchart.js</a> 实现的。</p>
<p>以上面那个复杂的流程图为例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">···flow    #由于渲染问题，请自行将 · 替换为 &#96;</span><br><span class="line">&#x2F;&#x2F;定义部分</span><br><span class="line">st&#x3D;&gt;start: Start:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class="line">e&#x3D;&gt;end:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断和位置控制</span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br><span class="line">···</span><br></pre></td></tr></table></figure>
<p>例如这一句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start|past:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中，st 是变量名， start 是指操作模块名，冒号后面就是内容了。需要注意的是，<strong>冒号后要加空格才能识别</strong> </p>
</blockquote>
<h3 id="操作模块语法"><a href="#操作模块语法" class="headerlink" title="操作模块语法"></a>操作模块语法</h3><table>
<thead>
<tr>
<th align="center">操作模块</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">start</td>
<td align="center">开始</td>
</tr>
<tr>
<td align="center">end</td>
<td align="center">结束</td>
</tr>
<tr>
<td align="center">opration</td>
<td align="center">普通操作块</td>
</tr>
<tr>
<td align="center">condition</td>
<td align="center">判断块</td>
</tr>
<tr>
<td align="center">subroutine</td>
<td align="center">子任务块</td>
</tr>
<tr>
<td align="center">inputoutput</td>
<td align="center">输入输出块</td>
</tr>
</tbody></table>
<h3 id="判断和位置控制"><a href="#判断和位置控制" class="headerlink" title="判断和位置控制"></a>判断和位置控制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">####流程控制</span><br><span class="line">st-&gt;op1-&gt;e</span><br><span class="line"></span><br><span class="line"># -&gt; 作为控制流程的操作符，就是指向下一步要操作的。</span><br><span class="line"># 每一条都算是一条流程</span><br><span class="line"></span><br><span class="line"># 你也可以断开写，怎么方便怎么来，如：下面两个是一样的。</span><br><span class="line"></span><br><span class="line">#分着写</span><br><span class="line">st-&gt;op1</span><br><span class="line">op1-&gt;e</span><br><span class="line"></span><br><span class="line">#合着写</span><br><span class="line">st-&gt;op1-&gt;e</span><br><span class="line"></span><br><span class="line">####判断</span><br><span class="line">cond(yes)-&gt;io-&gt;e    #yes的时候到io，再到e</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#位置指定</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1  #no的时候到到 sub1，再从sub1的右侧到op1   </span><br><span class="line">#还可以这样 cond1(no,right)</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>markdown</tag>
        <tag>流程图</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建 --- 1、搭建 Hexo 博客并部署到 Coding</title>
    <url>/hexo-install-01/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我一直想搭建一个个人博客，要求就是简洁，支持Markdown，可以显示文章的TOC目录。<br>寻找的过程中也遇到了很多坑，教程基本上都不完整，或者是直接copy别人的，而且很多教程中是将其部署到github pages上 ，但是介于网速问题，还是选择了国内的Coding。下面先将我的经历给大家分享下。</p>
<span id="more"></span>

<ul>
<li><a href="http://jpress.io/">JPress</a> ：国产，开源，基于JFinal开发的，主题生态系统正在快速完善中，但是markdown支持不好，所以就放弃了。</li>
<li><a href="https://ghost.org/">Ghost</a> : 也很简洁，基于Node.js开发，有后台管理页。与markdown支持不错，但是本人英语不好，<a href="http://www.ghostchina.com/">Ghost国内站</a>也不再继续更新，虽然基本可以满足我的需求，但是迫于强迫症还是放弃了。</li>
<li><a href="https://hexo.io/zh-cn/">Hexo</a> ： 很简洁，可以直接生成纯html界面，优点是支持它的环境十分好找，可以直接用<code>github</code>、<code>coding</code>、<code>七牛云存储</code>等静态页面托管，可以省下VPS服务器的费用。  </li>
</ul>
<h2 id="需求条件"><a href="#需求条件" class="headerlink" title="需求条件"></a>需求条件</h2><ul>
<li><strong>Windows电脑一台</strong> (没用过Mac，所以无法做Mac的教程)</li>
<li><strong>熟悉Markdown语法</strong> (现学也可以，<a href="http://www.jianshu.com/p/7bd23251da0a">入门教程</a> )</li>
<li><strong>耐心</strong> (有耐心按照教程一步一步执行下，不能嫌麻烦就半途而废)</li>
</ul>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载地址：<a href="https://git-scm.com/download/win">传送门</a><br>这一步最好选择第二项，其他的默认就好<br><img src="https://cdn.jun6.net/image_1b9a9037fkpivqr1cfs1itv1to81m.png"></p>
<p>安装完后打开 cmd  输入 <code>git --version</code> 来测试是否安装成功。<br><img src="https://cdn.jun6.net/image_1b9a94d9q74j1e75nlfju181g23.png"></p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>下载地址：<a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi">传送门</a><br>下载安装即可，没有特殊配置，无限下一步。<br>安装完后打开 cmd  输入 <code>node -v</code> 来测试是否安装成功。<br><img src="https://cdn.jun6.net/image_1b9a8is9f14le18bl8ljj9vk69.png"></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>首先在你电脑上找一个位置来安装Hexo。然后在那个文件夹中打开cmd (shift + 右键)</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.cnpmjs.org <span class="comment">#修改安装源为中国镜像。</span></span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-util --save</span><br></pre></td></tr></table></figure>

<h3 id="测试Hexo"><a href="#测试Hexo" class="headerlink" title="测试Hexo"></a>测试Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后在浏览器的地址栏上面输入localhost:4000就可看到自己博客的样子。Ctrl + C 可以终止预览<br><img src="https://cdn.jun6.net/image_1b954n1051sak1s7if6e1dmd1s9t9.png"></p>
</blockquote>
<h2 id="配置Coding"><a href="#配置Coding" class="headerlink" title="配置Coding"></a>配置Coding</h2><p>Cdoing官网：<a href="https://coding.net/">https://coding.net/</a><br>注册后创建一个新项目<br><img src="https://cdn.jun6.net/image_1b9a9c9vamdbphj1t4k1sh21o2j2g.png" alt="image_1b9a9c9vamdbphj1t4k1sh21o2j2g.png-9.2kB"><br><img src="https://cdn.jun6.net/image_1b9a9oeo41vco1koh1orv1uog1hf32t.png" alt="image_1b9a9oeo41vco1koh1orv1uog1hf32t.png-129.4kB"></p>
<blockquote>
<p>项目名称，项目描述随意填写，项目选择私有项目。然后点击创建。</p>
</blockquote>
<p>然后在电脑桌面右键，打开Git Bash Here<br><img src="https://cdn.jun6.net/image_1b9agfbrepeb1dlodbv1q6n1p8p3a.png" alt="image_1b9agfbrepeb1dlodbv1q6n1p8p3a.png-25.9kB"></p>
<p>然后配置SSH： 配置shh key是让本地git项目与远程的coding建立联系 </p>
<ul>
<li><p>检查是否已经有SSH Key，打开Git Bash Here，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></li>
<li><p>如果没有.ssh这个目录，则我们生成一个SSH，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>接下来几步中系统会要你输入密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;输入密码&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个密码是在你提交项目给服务器的时候使用的，可以为空，如果为空的话提交项目时则不用输入密码就能提交。</p>
</blockquote>
</li>
<li><p>最好看到类似这样的界面，就成功设置ssh key了<br><img src="https://cdn.jun6.net/image_1b9agsop5o4v567sgmlco1f903n.png" alt="image_1b9agsop5o4v567sgmlco1f903n.png-242.7kB"></p>
</li>
<li><p>然后查看公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jun6.net/image_1b9ah6bgr4n010am715mbr74o4u.png" alt="image_1b9ah6bgr4n010am715mbr74o4u.png-100.1kB"></p>
<blockquote>
<p>然后将这些内容全部复制下来。</p>
</blockquote>
</li>
<li><p>回到Coding 添加你的公钥<br><img src="http://static.zybuluo.com/qq0502497/i0ip35186oe4jlx3n6klq2i5/image_1b9ahaafo1slc1m60athptf1ed45b.png" alt="image_1b9ahaafo1slc1m60athptf1ed45b.png-115.1kB"></p>
<blockquote>
<p>然后直接把刚才复制的内容粘贴进去,点击添加即可。</p>
</blockquote>
</li>
<li><p>设置自己的身份，这里设置自己的名字和邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在Git Bash Here 中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果显示以下则说明coding中的ssh配置成功<br><code>Hello username You&#39;ve connected to Coding.net by SSH successfully!</code></p>
</blockquote>
</li>
<li><p>开启Coding Pages服务<br>进入你刚才创建的项目。<br><img src="http://static.zybuluo.com/qq0502497/ba6ljlflw0hdm746cqg6ybvl/image_1b9ahkrbfrqd1u01erqbl71hgu5o.png" alt="image_1b9ahkrbfrqd1u01erqbl71hgu5o.png-30.1kB"><br><img src="http://static.zybuluo.com/qq0502497/6bhnubaropgbz5bks9kkvoha/image_1b9ahnnvatf38nedliv46d4v6i.png" alt="image_1b9ahnnvatf38nedliv46d4v6i.png-170.8kB"></p>
</li>
<li><p>先在根目录下找到_config.yml文件，并进入编辑。我们找到deploy这一项，修改看下面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="comment">#我们是使用 git 来部署的。</span></span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># git 仓库的地址。</span></span><br><span class="line">  repo: https://git.coding.net/xxx/xxxx.git</span><br><span class="line">  <span class="comment"># 分支名称。</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>仓库的地址可以在coding网站上找到，复制过来即可<br><img src="http://static.zybuluo.com/qq0502497/lk7zesxjxztzwo6g2vknlg9l/image_1b9ai8kcuhkli5rte51357104l6v.png" alt="image_1b9ai8kcuhkli5rte51357104l6v.png-10.2kB"></p>
</blockquote>
</li>
</ul>
<h2 id="测试Coding配置"><a href="#测试Coding配置" class="headerlink" title="测试Coding配置"></a>测试Coding配置</h2><ul>
<li><p>新建一篇文章，并且部署到Coding上面。在Hexo安装路径下打开cmd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 第一篇文章</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/qq0502497/twfxfhdj5jb31jk2cts2r7b1/image_1b9aiu0ou175g1jfqjnl8vhra77c.png" alt="image_1b9aiu0ou175g1jfqjnl8vhra77c.png-7.6kB"></p>
<blockquote>
<p>然后在给出的路径里打开.md文件，用markdown语法写作即可</p>
</blockquote>
</li>
<li><p>在部署之前还有一步，就是要安装一个插件，不然无法部署上去。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p>发布部署文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/qq0502497/wz8sej7ty91858nbyumq3nrj/image_1b9aj31jbnprshi1lte19kruit7p.png" alt="image_1b9aj31jbnprshi1lte19kruit7p.png-4.9kB"><br>然后在去Coding上就可以看到部署的文件了<br><img src="http://static.zybuluo.com/qq0502497/923qcqqm2zwm0i9x52poeupy/image_1b9aj4q1n116u1rkp1hlpep21qq786.png" alt="image_1b9aj4q1n116u1rkp1hlpep21qq786.png-85.9kB"></p>
</li>
</ul>
<blockquote>
<p>至此，搭建完成。有关Hexo的详细配置，请参阅<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>。</p>
</blockquote>
<p>如本文中有错误，欢迎在评论中进行指正。转账请注明出处，谢谢支持。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建 --- 2、Hexo主题安装与配置</title>
    <url>/hexo-install-02/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本次演示，使用Hexo最受欢迎的主题，也是本站使用的主题<a href="https://github.com/iissnan/hexo-theme-next">Next</a>。</p>
<p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>， 后者称为 <code>主题配置文件</code>。</p>
<span id="more"></span>

<p>本文中<code>站点配置文件</code>的路径分别指的是：</p>
<ul>
<li><code>站点配置文件</code>：<code>/root/blog/_config.yml</code></li>
<li><code>主题配置文件</code>：<code>/root/blog/themes/next/_config.yml</code></li>
</ul>
<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>在Hexo根目录下打开cmd，输入以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>打开 <code>站点配置文件</code>  找到theme字段，将其值修改为<code>next</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>
<h2 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h2><p>首先启动 Hexo 本地站点，命令是 <code>hexo s </code> 当命令行输出中提示出：<br><code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>
<blockquote>
<p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p>
</blockquote>
<p><img src="https://cdn.jun6.net/image_1b959is6t1h57rth1o4l18pe1rscm.png" alt="image_1b959is6t1h57rth1o4l18pe1rscm.png-54.1kB"></p>
<p>现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p>
<h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>Scheme 的切换通过更改 <code>主题配置文件</code>，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。</p>
<h3 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h3><p>编辑 <code>站点配置文件</code>， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">语言</th>
<th align="center">代码</th>
<th align="center">设置示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">English</td>
<td align="center"><code>en  </code></td>
<td align="center"><code>language: en</code></td>
</tr>
<tr>
<td align="center">简体中文</td>
<td align="center"><code>zh-Hans</code></td>
<td align="center"><code>language: zh-Hans</code></td>
</tr>
<tr>
<td align="center">繁体中文</td>
<td align="center"><code>zh-hk</code></td>
<td align="center"><code>language: zh-hk</code></td>
</tr>
</tbody></table>
<h3 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h3><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， <a href="http://fontawesome.io/">Font Awesome</a> 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。</p>
<p>编辑 <code>主题配置文件</code> ，修改以下内容：</p>
<h4 id="设定菜单内容"><a href="#设定菜单内容" class="headerlink" title="设定菜单内容"></a>设定菜单内容</h4><p>对应的字段是 <code>menu</code>。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  #about: &#x2F;about</span><br><span class="line">  #categories: &#x2F;categories</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  #commonweal: &#x2F;404.html</span><br><span class="line">  </span><br><span class="line">  ##比如添加一个菜单项，跳转到百度。</span><br><span class="line">  baidu: http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure>

<h4 id="设置菜单项的显示文本"><a href="#设置菜单项的显示文本" class="headerlink" title="设置菜单项的显示文本"></a>设置菜单项的显示文本</h4><p>在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言）。</p>
<p>以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在 menu 字段下添加一项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br><span class="line">  <span class="comment">##为我们刚才设置的百度链接设置中文字体显示</span></span><br><span class="line">  baidu: 百度</span><br></pre></td></tr></table></figure>

<h4 id="设置菜单项的图标"><a href="#设置菜单项的图标" class="headerlink" title="设置菜单项的图标"></a>设置菜单项的图标</h4><p>可以看到默认的3个菜单前都有小图标<br><img src="https://cdn.jun6.net/image_1b95eae6judk1a5f1f8r1kg21v719.png" alt="image_1b95eae6judk1a5f1f8r1kg21v719.png-6.6kB"></p>
<p>下面我们为刚才设置的<code>百度</code>添加图标。找到 <code>menu_icons</code> 字段。<br>格式是 <code>item name : icon name</code>,其中<code>item name</code>就是刚才我们设置的名字<code>baidu</code>,而<code>icon name</code>是<a href="http://fontawesome.io/icons/">Font Awesome</a>图标的名称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>  <span class="comment">##控制是否显示图标，默认为true。</span></span><br><span class="line">  <span class="comment"># Icon Mapping.</span></span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br><span class="line">  </span><br><span class="line">  <span class="comment">##为 baidu 设置图标 ， 如未配置，则会使用 ？ 作为图标。</span></span><br><span class="line">  baidu: bookmark</span><br></pre></td></tr></table></figure>

<h3 id="设置作者昵称"><a href="#设置作者昵称" class="headerlink" title="设置作者昵称"></a>设置作者昵称</h3><p>编辑 <code>站点配置文件</code>， 设置 author 为你的昵称。</p>
<h3 id="设置站点描述"><a href="#设置站点描述" class="headerlink" title="设置站点描述"></a>设置站点描述</h3><p>编辑 <code>站点配置文件</code>， 设置 description 字段为你的站点描述。站点描述可以是你喜欢的一句签名</p>
<h3 id="创建”关于我”页面"><a href="#创建”关于我”页面" class="headerlink" title="创建”关于我”页面"></a>创建”关于我”页面</h3><p>新建一个 <code>about</code> 页面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>

<p>让菜单显示 “关于我” 链接，在<code>主题配置文件</code> 设置中将 menu 中 about 前面的注释去掉即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  about: &#x2F;about</span><br></pre></td></tr></table></figure>

<h3 id="创建”分类”页面"><a href="#创建”分类”页面" class="headerlink" title="创建”分类”页面"></a>创建”分类”页面</h3><p>新建一个页面，命名为 <code>categories</code> 。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>编辑刚新建的页面，将页面的类型设置为 <code>categories</code> ，主题将自动为这个页面显示所有分类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2017-2-20 22:23:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false #禁止评论，可自行选择</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>在菜单中添加链接。编辑<code>主题配置文件</code> ，将 <code>menu</code> 中的 <code>categories: /categories</code> 注释去掉，如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  categories: &#x2F;categories</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  tags: &#x2F;tags</span><br></pre></td></tr></table></figure>

<h3 id="创建”标签”页面"><a href="#创建”标签”页面" class="headerlink" title="创建”标签”页面"></a>创建”标签”页面</h3><p>新建一个页面，命名为 tags 。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2017-2-20 22:26:56</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false #禁止评论，可自行选择</span><br></pre></td></tr></table></figure>
<p>在菜单中添加链接。编辑<code>主题配置文件</code> ，添加 <code>tags</code> 到 <code>menu</code> 中，如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  tags: &#x2F;tags</span><br></pre></td></tr></table></figure>

<h3 id="设置侧边栏头像"><a href="#设置侧边栏头像" class="headerlink" title="设置侧边栏头像"></a>设置侧边栏头像</h3><p>编辑<code>站点配置文件</code>，新增字段 <code>avatar</code>， 值设置成头像的链接地址。<br>其中，头像的链接地址可以是：</p>
<p>完整的互联网 URL，例如：<code>https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</code><br>站点内的地址，例如：</p>
<ul>
<li><code>/uploads/avatar.jpg</code> 需要将你的头像图片放置在 站点的 <code>source/uploads/</code>（可能需要新建uploads目录）</li>
<li><code>/images/avatar.jpg</code> 需要将你的头像图片放置在 主题的 <code>source/images/</code> 目录下。</li>
</ul>
<h3 id="设置侧边栏社交链接"><a href="#设置侧边栏社交链接" class="headerlink" title="设置侧边栏社交链接"></a>设置侧边栏社交链接</h3><p>编辑<code>站点配置文件</code>，新增字段 <code>social</code>，然后添加社交站点名称与地址即可。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Social links</span><br><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;your-user-name</span><br><span class="line">  Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;your-user-name</span><br><span class="line">  Weibo: http:&#x2F;&#x2F;weibo.com&#x2F;your-user-name</span><br><span class="line">  douban: http:&#x2F;&#x2F;douban.com&#x2F;people&#x2F;your-user-name</span><br><span class="line">  zhihu: http:&#x2F;&#x2F;www.zhihu.com&#x2F;people&#x2F;your-user-name</span><br><span class="line">  # 等等</span><br></pre></td></tr></table></figure>

<p>编辑<code>主题配置文件</code>, 在<code>social_icons</code>字段下添加社交站点名称（注意大小写）与图标，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings.</span><br><span class="line">  # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  GitHub: github</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  Weibo: weibo</span><br><span class="line">  Linkedin: linkedin</span><br></pre></td></tr></table></figure>
<p>图标名称可以参考：<a href="http://fontawesome.io/cheatsheet/">http://fontawesome.io/cheatsheet/</a></p>
<h3 id="设置多说评论"><a href="#设置多说评论" class="headerlink" title="设置多说评论"></a>设置多说评论</h3><ol>
<li>使用多说前需要先在 <a href="http://www.duoshuo.com/">多说</a> 创建一个站点。具体步骤如下：</li>
</ol>
<ul>
<li>登录后在首页选择 “我要安装”。</li>
<li>创建站点，填写站点相关信息。注意，多说域名 这一栏填写的即是你的 <code>duoshuo_shortname</code>。<br><img src="https://cdn.jun6.net/image_1b9dvj10q8lg7hm1i5u113017n79.png" alt="image_1b9dvj10q8lg7hm1i5u113017n79.png-107.5kB"></li>
</ul>
<ol start="2">
<li>编辑<code>站点配置文件</code> 添加 <code>duoshuo_shortname</code> 字段（先搜索，如果有就不用），设置如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">duoshuo_shortname: your-duoshuo-shortname</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><ul>
<li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>编辑 站点配置文件，新增以下内容到任意位置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li>
<li>编辑 主题配置文件，启用本地搜索功能，这个字段 <code>local_search</code> 下的 <code>enable</code> 改为 <code>true</code>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>只需要 <code>主题配置文件</code> 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: &#x2F;path&#x2F;to&#x2F;wechat-reward-image</span><br><span class="line">alipay: &#x2F;path&#x2F;to&#x2F;alipay-reward-image</span><br></pre></td></tr></table></figure>

<h2 id="Next主题常见问题"><a href="#Next主题常见问题" class="headerlink" title="Next主题常见问题"></a>Next主题常见问题</h2><h3 id="如何设置阅读全文"><a href="#如何设置阅读全文" class="headerlink" title="如何设置阅读全文"></a>如何设置阅读全文</h3><p>大家发布文章后可能会发现，文章直接在主页显示完了，没有阅读全文按钮来的舒服。<br>官方也给提供了3中解决方案。</p>
<ol>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式。</li>
<li>在文章的 <a href="https://hexo.io/zh-cn/docs/front-matter.html">front-matter</a> 中添加 description，并提供文章摘录</li>
<li>自动形成摘要，在 ·主题配置文件· 中添加：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150 #默认截取的长度为 150 字符，可以根据需要自行设定</span><br></pre></td></tr></table></figure>
<blockquote>
<p>建议使用 <!-- more -->（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p>
</blockquote>
</li>
</ol>
<h3 id="如何更改内容区域的宽度？"><a href="#如何更改内容区域的宽度？" class="headerlink" title="如何更改内容区域的宽度？"></a>如何更改内容区域的宽度？</h3><p>NexT 对于内容的宽度的设定如下：</p>
<ul>
<li>700px，当屏幕宽度 &lt; 1600px</li>
<li>900px，当屏幕宽度 &gt;= 1600px</li>
<li>移动设备下，宽度自适应</li>
</ul>
<p>如果你需要修改内容的宽度，同样需要编辑样式文件。 编辑主题的 source/css/_variables/custom.styl 文件，新增变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 修改成你期望的宽度</span><br><span class="line">$content-desktop &#x3D; 700px</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当视窗超过 1600px 后的宽度</span><br><span class="line">$content-desktop-large &#x3D; 900px</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此方法不适用于 Pisces Scheme，关于如何修改 Pisces Scheme 的宽度请参看 这个 Issue</p>
</blockquote>
<h3 id="如何设置页面文章的篇数？"><a href="#如何设置页面文章的篇数？" class="headerlink" title="如何设置页面文章的篇数？"></a>如何设置页面文章的篇数？</h3><p>在 Hexo 里可以为首页和归档页面设置不同的文章篇数，但可能需要安装 Hexo 插件。详细步骤如下。</p>
<p>1.使用 npm install –save 命令来安装需要的 Hexo 插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-index</span><br><span class="line">npm install --save hexo-generator-archive</span><br><span class="line">npm install --save hexo-generator-tag</span><br></pre></td></tr></table></figure>

<p>2.等待扩展全部安装完成后，在 <code>站点配置文件</code> 中，设定如下选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  per_page: 5</span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 20</span><br><span class="line">  yearly: true</span><br><span class="line">  monthly: true</span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 10</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，Hexo 3.2 版本不允许配置文件中存在重复的选项设置。 因此，最好检查下 站点配置文件 中是否有存在上述同名的配置。 如果存在，请将两者配置在一起。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建 --- 3、Hexo发布文章详解</title>
    <url>/hexo-install-03/</url>
    <content><![CDATA[<h2 id="简单发布文章"><a href="#简单发布文章" class="headerlink" title="简单发布文章"></a>简单发布文章</h2><ul>
<li>在Hexo根目录下打开cmd终端命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;文件名&quot;  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>此命令会在/hexo/source/_posts下创建一个文件名.md文件，然后就可以使用markdown编辑器开始写自己的博客了。</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>打开生成的默认文章模板。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: new  #博客标题</span><br><span class="line">date: 2017-2-19 21:20:57 #创建时间</span><br><span class="line">tags:  #标签</span><br><span class="line">---</span><br><span class="line">    这里写正文（上面的---是必要的）</span><br></pre></td></tr></table></figure></li>
<li><p>本地查看预览效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<blockquote>
<p>浏览器打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可查看效果，默认端口为4000<br>自定义端口为80： <code>hexo s p 80</code></p>
</blockquote>
</li>
<li><p>部署到Coding上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>hexo clean</code> 清理本地缓存<br><code>hexo g</code> 全称： generate，生成静态html文件。<br><code>hexo d</code> 全称：deploy 部署到Coding上。<br>注：部署到Coding上需要先按照插件，在cmd中输入 <code>npm install hexo-deployer-git --save</code></p>
</blockquote>
</li>
</ul>
<h2 id="高级文章设置"><a href="#高级文章设置" class="headerlink" title="高级文章设置"></a>高级文章设置</h2><h3 id="Hexo-new-的分类"><a href="#Hexo-new-的分类" class="headerlink" title="Hexo new 的分类"></a>Hexo new 的分类</h3><p>Hexo对生成文章有三种分类：</p>
<ol>
<li><code>post</code>：也是默认的方式，一般指一篇博客。</li>
<li><code>page</code>：指生成一个页面，一般用来做标签和关于页</li>
<li><code>draft</code>：指草稿，我个人很少用。</li>
</ol>
<blockquote>
<p>生成方式是：<code>hexo new [layout] &lt;title&gt;</code><br>比如： <code>hexo new page tags</code> ，即为生成一个名为tags的页面。</p>
</blockquote>
<h3 id="文档模板修改"><a href="#文档模板修改" class="headerlink" title="文档模板修改"></a>文档模板修改</h3><p>当我们使用 <code>hexo new [layout] &lt;title&gt;</code> 生成文章的生成的文件都是有默认模板的。<br>比如<code>hexo new post 模板测试</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 模板测试</span><br><span class="line">date: 2017-2-19 21:53:03 </span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<blockquote>
<p>比如我的博客每次都要加 <code>markdown源码下载</code>。那么对每个文件都要加上相应的代码，那么不如修改一下模板文件，让new文章的时候就能加上相应的代码，岂不省事。</p>
</blockquote>
<ul>
<li>实现修改模板功能<br>其实每次我们执行 <code>hexo new [layout] &lt;title&gt;</code> 时，Hexo都会去<code>scaffolds </code>文件夹中寻找<code>[layout].md</code>，并根据其内容建立文章。<br>那么我们直接修改对应的 <code>.md</code> 模板文件即可，或者自己添加一个 <code>demo.md</code> 文件，创建文件的时候执行<code>hexo new demo &lt;title&gt;</code> 即可。</li>
</ul>
<h3 id="Front-matter详解"><a href="#Front-matter详解" class="headerlink" title="Front-matter详解"></a>Front-matter详解</h3><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 模板测试</span><br><span class="line">date: 2017-2-19 22:04:39</span><br><span class="line">tags: </span><br></pre></td></tr></table></figure>
<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td>comments</td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td>tags</td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>categories</td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网址</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>注意： 如一个文章有多个<code>tags</code>的话，语法为：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">date: 2017-2-19 22:12:29</span><br><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Hexo官方说明不支持一个文章与多个categories(分类) <a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE">Hexo官方文档对于分类的解释</a></p>
</blockquote>
<h3 id="如何关闭新建页面的评论功能？"><a href="#如何关闭新建页面的评论功能？" class="headerlink" title="如何关闭新建页面的评论功能？"></a>如何关闭新建页面的评论功能？</h3><p>当集成了评论系统，如 多说 或者 Disqus，所有新建的页面都将自动开启评论。若你不需要评论，请在页面的 Front-matter 里添加 <code>comments</code> 字段，并将值设置为 <code>false</code>。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: new title</span><br><span class="line">date: 2017-2-21 21:34:29</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="如何设置页面文章的篇数？"><a href="#如何设置页面文章的篇数？" class="headerlink" title="如何设置页面文章的篇数？"></a>如何设置页面文章的篇数？</h3><ol>
<li>使用 <code>npm install --save</code> 命令来安装需要的 Hexo 插件。</li>
<li>等待扩展全部安装完成后，在 <code>站点配置文章</code> 中，设定如下选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  per_page: 5  ##首页显示的文章篇数</span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 20    ##归档页显示的文章篇数</span><br><span class="line">  yearly: true   </span><br><span class="line">  monthly: true  </span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 10</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="内置标签"><a href="#内置标签" class="headerlink" title="内置标签"></a>内置标签</h3><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>
<h4 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h4><p><strong>使用方式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class&#x3D;&quot;blockquote-center&quot; 是必须的 --&gt;</span><br><span class="line">  &lt;blockquote class&#x3D;&quot;blockquote-center&quot;&gt;blah blah blah&lt;&#x2F;blockquote&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 标签别名 --&gt;</span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<p><strong>效果示例：</strong><br><img src="https://cdn.jun6.net/image_1b9gddh6jutf3091gv41jdl5ta9.png" alt="image_1b9gddh6jutf3091gv41jdl5ta9.png-24.8kB"></p>
<h4 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h4><p>在文章中插入引言，可包含作者、来源和标题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<p>简单点说两种用法：</p>
<ul>
<li><p>引用名人名言</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote 鲁迅, 《记念刘和珍君》%&#125;</span><br><span class="line">真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jun6.net/image_1b9bd4cq3pk7b3o1u5g721bpum.png" alt="image_1b9bd4cq3pk7b3o1u5g721bpum.png-12.9kB"></p>
</li>
<li><p>引用别人网站的文章或其他</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https:&#x2F;&#x2F;twitter.com&#x2F;devdocs&#x2F;status&#x2F;356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http:&#x2F;&#x2F;devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jun6.net/image_1b9bdj4edtvgt5k1h6512m116of13.png" alt="image_1b9bdj4edtvgt5k1h6512m116of13.png-22.5kB"></p>
</li>
</ul>
<h4 id="突破容器宽度限制的图片"><a href="#突破容器宽度限制的图片" class="headerlink" title="突破容器宽度限制的图片"></a>突破容器宽度限制的图片</h4><p>当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力。 此标签有两种调用方式（详细参看底下示例）：<br><strong>使用方式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class&#x3D;&quot;full-image&quot; 是必须的 --&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;image-url&quot; class&#x3D;&quot;full-image&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&#123;% fullimage &#x2F;image-url, alt, title %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 别名 --&gt;</span><br><span class="line">&#123;% fi &#x2F;image-url, alt, title %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>效果示例：</strong><br><img src="https://cdn.jun6.net/image_1b9gdr6eq1j7b1lvu1gfh1fb820b13.png" alt="image_1b9gdr6eq1j7b1lvu1gfh1fb820b13.png-1313.3kB"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 优化 --- lazyload 图片懒加载</title>
    <url>/hexo-lazyload/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 博客虽然功能很强大，但也越来越繁重了，访问速度上有了一些问题，这里我也考虑了许多，例如加 cdn，将国外的资源引用改为国内镜像等方式。今天又想到如果一个页面的图片很多，那么如何来提高博客的访问速度呢？。</p>
<p>经过一番寻找之后，找到一个方案，就是懒加载，通俗点讲就是当你翻到图片的时候再加载那张图片，而不是以下将本页面的所有图片都加载完。</p>
<span id="more"></span>


<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置过程也很简单，就是一个 <code>npm</code> 模块。<br>在你的 Hexo 目录下，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure>

<p>然后在你的 Hexo 目录的配置文件 <code>_config.yml</code> 中添加配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  onlypost: false</span><br><span class="line">  loadingImg: &#x2F;images&#x2F;loading.png </span><br></pre></td></tr></table></figure>

<p><strong>onlypost</strong><br>是否仅文章中的图片做懒加载, 如果为 false, 则主题中的其他图片, 也会做懒加载, 如头像, logo 等任何图片.</p>
<p><strong>loadingImg - 图片未加载时的代替图</strong></p>
<ul>
<li>不填写使用默认加载图片, 如果需要自定义，添填入 loading 图片地址，如果是本地图片，不要忘记把图片添加到你的主题目录下。 Next 主题需将图片放到 <code>\themes\next\source\images</code> 目录下, 然后引用时: <code>loadingImg: /images/图片文件名</code></li>
</ul>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://cdn.jun6.net/201801142325_757.gif"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 优化 --- Valine 扩展之邮件通知</title>
    <url>/hexo-valine-admin/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>此项目是一个对 <a href="https://valine.js.org/">Valine</a> 评论系统的拓展应用，可增强 <code>Valine</code> 的邮件通知功能。基于 Leancloud 的云引擎与云函数。可以提供邮件 <code>通知站长</code> 和 <code>@ 通知</code> 的功能，而且还支持自定义邮件通知模板。</p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5%E5%B1%95%E7%A4%BA">点击查看演示</a></p>
<blockquote>
<p><strong>注：本项目修改于 panjunwen 的项目 : <a href="https://github.com/panjunwen/Valine-Admin">Valine-Admin</a>，原作者博客: <a href="https://panjunwen.com/valine-admin-document/">Valine Admin 配置手册</a></strong>, (部分逻辑于功能不同，还请读者不要搞混配置项.)</p>
</blockquote>
<span id="more"></span>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>首先需要确保 Valine 的基础功能是正常的，参考 <a href="https://valine.js.org/">Valine Docs</a>。</p>
<p>然后进入 <a href="https://leancloud.cn/dashboard/applist.html#/apps">Leancloud</a> 对应的 Valine 应用中。</p>
<p>点击 <code>云引擎 -&gt; 设置</code> 填写代码库并保存：<code>https://github.com/zhaojun1998/Valine-Admin</code></p>
<img width="700" src="https://cdn.jun6.net/201804211508_545.png" />

<p>切换到部署标签页，分支使用 master，点击部署即可：<br><img width="700" src="https://cdn.jun6.net/201801112055_212.png" /><br><img width="700" src="https://cdn.jun6.net/201804211336_271.png" /></p>
<h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><p>此外，你需要设置云引擎的环境变量以提供必要的信息，点击云引擎的设置页，设置如下信息：</p>
<img width="700" src="https://cdn.jun6.net/201806062257_798.png" />

<p><strong>必选参数</strong></p>
<ul>
<li><code>SITE_NAME</code> : 网站名称。</li>
<li><code>SITE_URL</code> : 网站地址, <strong>最后不要加 <code>/</code> 。</strong></li>
<li><code>SMTP_USER</code> : SMTP 服务用户名，一般为邮箱地址。</li>
<li><code>SMTP_PASS</code> : SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</li>
<li><code>SMTP_SERVICE</code> : 邮件服务提供商，支持 <code>QQ</code>、<code>163</code>、<code>126</code>、<code>Gmail</code>、<code>&quot;Yahoo&quot;</code>、<code>......</code>  ，全部支持请参考 : <a href="https://nodemailer.com/smtp/well-known/#supported-services">Nodemailer Supported services</a>。</li>
<li><code>SENDER_NAME</code> : 寄件人名称。</li>
</ul>
<h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%A8%A1%E6%9D%BF">自定义邮件模板</a></p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%94%B6%E4%BB%B6%E9%82%AE%E7%AE%B1">自定义收件邮箱</a></p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8">自定义邮件服务器</a></p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#web-%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86">Web 评论管理</a></p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#leancloud-%E4%BC%91%E7%9C%A0%E7%AD%96%E7%95%A5">Leancloud 休眠策略(必看)</a></p>
<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul>
<li>12.01 新增自助添加定时器方式。详见: <a href="/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#leancloud-%E8%87%AA%E5%B8%A6%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A8%E8%8D%90">LeanCloud 自带定时器[推荐方式]</a></li>
<li>7.30 修复 @ 邮件通知出错 bug (需 <a href="https://valine.js.org/changelog.html#v1-3-0-2018-07-29">Valine 1.3.0</a> 支持)，优化发件逻辑，站长发的评论不再收到邮件通知。</li>
<li>7.7 兼容 <code>valine v1.2.0-beta </code> 版本对 at 的更改 <a href="https://valine.js.org/changelog.html#v1-2-0-beta-2018-06-30">点击查看</a>。</li>
<li>7.1 修复 <code>Web</code> 后台登录安全 <code>bug</code></li>
<li>6.14 添加自定义邮件服务器功能. <a href="/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8">点击查看</a></li>
</ul>
<h2 id="升级-FAQ"><a href="#升级-FAQ" class="headerlink" title="升级 FAQ"></a>升级 FAQ</h2><p><strong>部署最新代码 :</strong></p>
<img src="https://cdn.jun6.net/201806070911_388.png" width="600">



<p><strong>重启容器:</strong></p>
<img width="500" src="https://cdn.jun6.net/201807081507_968.png"/>

<blockquote>
<p><strong>注: 更新新版本与更改环境变量均需要重启容器后生效。</strong></p>
</blockquote>
<h2 id="LeanCloud-休眠策略"><a href="#LeanCloud-休眠策略" class="headerlink" title="LeanCloud 休眠策略"></a>LeanCloud 休眠策略</h2><p>免费版的 LeanCloud 容器，是有强制性休眠策略的，不能 24 小时运行：</p>
<ul>
<li>每天必须休眠 6 个小时</li>
<li>30 分钟内没有外部请求，则休眠。</li>
<li>休眠后如果有新的外部请求实例则马上启动（但激活时此次发送邮件会失败）。</li>
</ul>
<p>分析了一下上方的策略，如果不想付费的话，最佳使用方案就设置<strong>定时器</strong>，每天 7 - 23 点每 20 分钟访问一次，这样可以保持每天的绝大多数时间邮件服务是正常的。</p>
<h3 id="LeanCloud-自带定时器-推荐"><a href="#LeanCloud-自带定时器-推荐" class="headerlink" title="LeanCloud 自带定时器[推荐]"></a>LeanCloud 自带定时器[推荐]</h3><p>首先需要添加环境变量，<code>ADMIN_URL</code>：<code>Web 主机域名</code>，如图所示（添加后重启容器才会生效）：</p>
<img src="https://cdn.jun6.net/201812011409_167.png" width="400">

<p>然后点击云引擎 - 定时任务，新增定时器，按照图片上填写：</p>
<img src="https://cdn.jun6.net/201812011433_568.png" width="650">

<blockquote>
<p>注意, LeanCloud 最近更新了定时器校验规则, 需要将 Cron 表达式写为: <code>0 */20 7-23 * * ?</code> !!!</p>
</blockquote>
<p>添加后要记得<strong>点击启用</strong>：</p>
<p><img src="https://cdn.jun6.net/201812011434_118.png"></p>
<p>启用成功后，每 20 分钟在云引擎的 - 应用日志中可以看到提示：</p>
<img src="https://cdn.jun6.net/201812011444_783.png" width="500">

<h3 id="Linux-定时器-老版本方式"><a href="#Linux-定时器-老版本方式" class="headerlink" title="Linux 定时器[老版本方式]"></a>Linux 定时器[老版本方式]</h3><p>附 <code>Linux crontab</code> 定时器代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/20 7-23 * * * curl https://你配置的域名前缀.leanapp.cn</span><br></pre></td></tr></table></figure>


<blockquote>
<p>如对本项目有意见或建议，欢迎去 Github 提 <a href="https://github.com/zhaojun1998/Valine-Admin/issues">issues</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo优化</tag>
        <tag>Valine</tag>
        <tag>评论系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 优化 --- 支持邮件通知的评论 Valine 增强版</title>
    <url>/hexo-valine-modify/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>此项目是一个对 <a href="https://valine.js.org/">Valine</a> 评论系统的拓展应用，可增强 <code>Valine</code> 的邮件通知功能。基于 Leancloud 的云引擎与云函数。可以提供邮件 <code>通知站长</code> 和 <code>@ 通知</code> 的功能，而且还支持自定义邮件通知模板。</p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5%E5%B1%95%E7%A4%BA">点击查看演示</a></p>
<blockquote>
<p><strong>注：本项目修改于 panjunwen 的项目 : <a href="https://github.com/panjunwen/Valine-Admin">Valine-Admin</a>，原作者博客: <a href="https://panjunwen.com/valine-admin-document/">Valine Admin 配置手册</a></strong>, (部分逻辑于功能不同，还请读者不要搞混配置项.)</p>
</blockquote>
<span id="more"></span>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>首先需要确保 Valine 的基础功能是正常的，参考 <a href="https://valine.js.org/">Valine Docs</a>。</p>
<p>然后进入 <a href="https://leancloud.cn/dashboard/applist.html#/apps">Leancloud</a> 对应的 Valine 应用中。</p>
<p>点击 <code>云引擎 -&gt; 设置</code> 填写代码库并保存：<code>https://github.com/zhaojun1998/Valine-Admin</code></p>
<img width="700" src="https://cdn.jun6.net/201804211508_545.png" />

<p>切换到部署标签页，分支使用 master，点击部署即可：<br><img width="700" src="https://cdn.jun6.net/201801112055_212.png" /><br><img width="700" src="https://cdn.jun6.net/201804211336_271.png" /></p>
<h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><p>此外，你需要设置云引擎的环境变量以提供必要的信息，点击云引擎的设置页，设置如下信息：</p>
<img width="700" src="https://cdn.jun6.net/201806062257_798.png" />

<p><strong>必选参数</strong></p>
<ul>
<li><code>SITE_NAME</code> : 网站名称。</li>
<li><code>SITE_URL</code> : 网站地址, <strong>最后不要加 <code>/</code> 。</strong></li>
<li><code>SMTP_USER</code> : SMTP 服务用户名，一般为邮箱地址。</li>
<li><code>SMTP_PASS</code> : SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</li>
<li><code>SMTP_SERVICE</code> : 邮件服务提供商，支持 <code>QQ</code>、<code>163</code>、<code>126</code>、<code>Gmail</code>、<code>&quot;Yahoo&quot;</code>、<code>......</code>  ，全部支持请参考 : <a href="https://nodemailer.com/smtp/well-known/#supported-services">Nodemailer Supported services</a>。</li>
<li><code>SENDER_NAME</code> : 寄件人名称。</li>
</ul>
<h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%A8%A1%E6%9D%BF">自定义邮件模板</a></p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%94%B6%E4%BB%B6%E9%82%AE%E7%AE%B1">自定义收件邮箱</a></p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8">自定义邮件服务器</a></p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#web-%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86">Web 评论管理</a></p>
<p><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#leancloud-%E4%BC%91%E7%9C%A0%E7%AD%96%E7%95%A5">Leancloud 休眠策略(必看)</a></p>
<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul>
<li>7.7 兼容 <code>valine v1.2.0-beta </code> 版本对 at 的更改 <a href="https://valine.js.org/changelog.html#v1-2-0-beta-2018-06-30">点击查看</a>。</li>
<li>7.1 修复 <code>Web</code> 后台登录安全 <code>bug</code></li>
<li>6.14 添加自定义邮件服务器功能. <a href="/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8">点击查看</a></li>
</ul>
<h2 id="升级-FAQ"><a href="#升级-FAQ" class="headerlink" title="升级 FAQ"></a>升级 FAQ</h2><p><strong>部署最新代码 :</strong></p>
<img src="https://cdn.jun6.net/201806070911_388.png" width="600">



<p><strong>重启容器:</strong></p>
<img width="500" src="https://cdn.jun6.net/201807081507_968.png"/>

<blockquote>
<p><strong>注: 更新新版本与更改环境变量均需要重启容器后生效。</strong></p>
</blockquote>
<h2 id="LeanCloud-休眠策略"><a href="#LeanCloud-休眠策略" class="headerlink" title="LeanCloud 休眠策略"></a>LeanCloud 休眠策略</h2><p>免费版的 LeanCloud 容器，是有强制性休眠策略的，不能 24 小时运行：</p>
<ul>
<li>每天必须休眠 6 个小时</li>
<li>30 分钟内没有外部请求，则休眠。</li>
<li>休眠后如果有新的外部请求实例则马上启动（但激活时此次发送邮件会失败）。</li>
</ul>
<p>分析了一下上方的策略，如果不想付费的话，最佳使用方案就设置定时器，每天 7 - 23 点每 20 分钟访问一次，这样可以保持每天的绝大多数时间邮件服务是正常的。</p>
<p>附 <code>Linux crontab</code> 定时器代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/20 7-23 * * * curl https://你配置的域名前缀.leanapp.cn</span><br></pre></td></tr></table></figure>

<p>注 : 此 <code>crontab</code> 不是<code>LeanCloud</code> 后台的定时任务，如果你没有 <code>Linux</code> 机器来配置此定时器，那么可以在此 <a href="https://github.com/zhaojun1998/Valine-Admin/issues/1">issues</a> 中回复我，我帮你加上。</p>
<blockquote>
<p>如对本项目有意见或建议，欢迎去 Github 提 <a href="https://github.com/zhaojun1998/Valine-Admin/issues">issues</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo优化</tag>
        <tag>Valine</tag>
        <tag>评论系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo优化 ---  一款极简的评论系统</title>
    <url>/hexo-valine/</url>
    <content><![CDATA[<p><strong>已有更简单的方式来实现，请参考： <a href="/hexo-valine-admin/" title="Hexo 优化 --- Valine 扩展之邮件通知">Hexo 优化 --- Valine 扩展之邮件通知</a></strong> </p>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>之前也用多很多评论系统，包括多说，网易云跟帖，Coding Comments…，但是这些评论系统，要不就是稳定性差，要不就是需要繁琐的登录，还有的直接停止服务了。</p>
<p>好了，废话不多说，先看今天的主角长什么样：</p>
<span id="more"></span>

<p><img src="https://cdn.jun6.net/image_1bso0bvjd1eb111buici1bbl1o7g2g.png" alt="image_1bso0bvjd1eb111buici1bbl1o7g2g.png-35kB"></p>
<blockquote>
<p>Valine – 一款基于 Leancloud 的极简风评论系统</p>
</blockquote>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="获取-Leancloud-Key"><a href="#获取-Leancloud-Key" class="headerlink" title="获取 Leancloud Key"></a>获取 Leancloud Key</h3><p>因为是基于 Leancloud 的评论系统，所以需要先注册一个 Leancloud 账号。</p>
<ol>
<li><a href="https://leancloud.cn/dashboard/login.html#/signup">点击这里注册 Leancloud 账号。</a></li>
<li>创建一个应用，应用名随意。<br><img src="https://cdn.jun6.net/image_1bsnlr623ktcev31p4fnvb1duq9.png" alt="image_1bsnlr623ktcev31p4fnvb1duq9.png-16.5kB"></li>
<li>进入刚才创建的应用。<code>设置</code> -&gt; <code>应用 Key</code>，这里的 <code>App ID</code> 和 <code>App Key</code>，复制下来，下一步要用。<br><img src="https://cdn.jun6.net/image_1bsnluq5t1uon17u81orh4nhi111m.png" alt="image_1bsnluq5t1uon17u81orh4nhi111m.png-58.3kB"></li>
</ol>
<h2 id="配置到页面上"><a href="#配置到页面上" class="headerlink" title="配置到页面上"></a>配置到页面上</h2><p>由于 <code>Hexo</code> 主题现在没有内置 <code>Valine</code> 评论系统，所以我们要手动修改 <code>Hexo Next</code> 主题的配置。</p>
<div class="note danger"><p>为了保险起见，推荐你先备份下 <code>/themes/next/_config.yml</code> 和 <code>/themes/next/layout/_partials/comments.swig</code>。以防出现不备。</p>
</div>

<h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>修改主题目录下的 <code>/themes/next/_config.yml</code> 中添加（如果现在使用着其他评论系统，请先去掉其他评论系统的配置）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">Your_AppId</span>     <span class="comment">##你的 Leancloud App ID</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">Your_AppKey</span>   <span class="comment">##你的 Leancloud App Key</span></span><br></pre></td></tr></table></figure>


<h3 id="修改-comments-swig"><a href="#修改-comments-swig" class="headerlink" title="修改 comments.swig"></a>修改 comments.swig</h3><blockquote>
<p>注：因为我没有其他的评论系统需求，所以将其他评论系统的内容的删掉了。</p>
</blockquote>
<p>打开 <code>/themes/next/layout/_partials/comments.swig</code>，<strong>整个文件</strong>修改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">page.comments</span> <span class="string">%</span>&#125;</span><br><span class="line">  <span class="string">&lt;div</span> <span class="string">class=&quot;comments&quot;</span> <span class="string">id=&quot;comments&quot;&gt;&lt;/div&gt;</span></span><br><span class="line">    &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">(theme.valine</span> <span class="string">and</span> <span class="string">theme.valine.enable)%</span>&#125;</span><br><span class="line">    <span class="string">&lt;script</span> <span class="string">src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="string">&lt;script</span> <span class="string">src=&quot;//cdn.jsdelivr.net/npm/valine@1.1.6/dist/Valine.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="string">&lt;script&gt;</span></span><br><span class="line">        <span class="string">new</span> <span class="string">Valine(&#123;</span></span><br><span class="line">            <span class="attr">av:</span> <span class="string">AV,</span></span><br><span class="line">            <span class="attr">el:</span> <span class="string">&#x27;.comments&#x27;</span><span class="string">,</span></span><br><span class="line">            <span class="attr">notify:</span> <span class="literal">true</span><span class="string">,</span> <span class="string">//</span> <span class="string">邮件提醒</span> <span class="string">v1.1.4新增，下一步中有具体的邮箱设置</span></span><br><span class="line">            <span class="attr">verify:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">            <span class="attr">app_id:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123; theme.valine.appId &#125;&#125;</span>&#x27;</span><span class="string">,</span></span><br><span class="line">            <span class="attr">app_key:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123; theme.valine.appKey &#125;&#125;</span>&#x27;</span><span class="string">,</span></span><br><span class="line">            <span class="attr">placeholder:</span> <span class="string">&#x27;ヾﾉ≧∀≦)o来啊，快活啊!&#x27;</span></span><br><span class="line">        <span class="string">&#125;);</span></span><br><span class="line">    <span class="string">&lt;/script&gt;</span></span><br><span class="line">    &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置邮箱提醒"><a href="#设置邮箱提醒" class="headerlink" title="设置邮箱提醒"></a>设置邮箱提醒</h2><p>上一步的 <code>notify</code> 选项为 <code>true</code> 的情况下才需要这个设置，如果不需要邮件提醒，则直接跳过即可。</p>
<p>进入 <code>Leancloud</code> 选择你的评论所存放的 <code>应用</code> &gt; <code>设置</code> &gt; <code>邮件模板</code>，按下图设置好 <code>用于重置密码的邮件主题</code> &gt; 然后 <code>保存</code>。</p>
<p><img src="https://cdn.jun6.net/image_1bsnv5ksvmhi145t1u05nj5sd223.png" alt="image_1bsnv5ksvmhi145t1u05nj5sd223.png-92.5kB"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><div class="note success"><p>好了，到此为止，重新部署后就可以看到结果了，部署之前，最好先执行以下 <code>hexo clean</code> 命令，防止出现缓存问题。如果出现下图所示的评论框，那么就是成功了。</p>
</div>



<p>本文参考：<a href="https://ioliu.cn/2017/add-valine-comments-to-your-blog/">Valine – 一款极简的评论系统</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo优化</tag>
        <tag>Valine</tag>
        <tag>评论系统</tag>
      </tags>
  </entry>
  <entry>
    <title>用栈实现队列</title>
    <url>/implement-queue-by-two-stacks/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://uploadfiles.nowcoder.com/images/20170824/6081215_1503556637773_C96B25BE8C2500EF8727A45C6B5226BA" alt="实现原理"></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyQueue &#123;</span><br><span class="line">    </span><br><span class="line">    private Stack&lt;Integer&gt; stack1;</span><br><span class="line">    private Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    public MyQueue() &#123;</span><br><span class="line">           stack1 &#x3D; new Stack&lt;Integer&gt;();</span><br><span class="line">           stack2 &#x3D; new Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stack2ToStack1() &#123;</span><br><span class="line">        while (! stack2.empty()) &#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void push(int element) &#123;</span><br><span class="line">        stack2.push(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int pop() &#123;</span><br><span class="line">        if (stack1.empty() &#x3D;&#x3D; true) &#123;</span><br><span class="line">            this.stack2ToStack1();</span><br><span class="line">        &#125;</span><br><span class="line">        return stack1.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int top() &#123;</span><br><span class="line">        if (stack1.empty() &#x3D;&#x3D; true) &#123;</span><br><span class="line">            this.stack2ToStack1();</span><br><span class="line">        &#125;</span><br><span class="line">        return stack1.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">牛客网：用两个栈实现队列</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>栈</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>插入区间</title>
    <url>/insert-interval/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个<strong>无重叠</strong>的按照区间起始端点排序的区间列表。</p>
<p>在列表中插入一个新的区间，你要确保列表中的区间仍然有序且<strong>不重叠</strong>（如果有必要的话，可以合并区间）。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>插入区间 <code>[2, 5]</code> 到 <code>[[1,2], [5,9]]</code>，我们得到 <code>[[1,9]]</code>。</p>
<p>插入区间 <code>[3, 4]</code> 到 <code>[[1,2], [5,9]]</code>，我们得到 <code>[[1,2], [3,4], [5,9]]</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一个有序的区间列表，只要依次遍历，判断当前元素与插入元素的关系。</p>
<p>如当前元素的右端点小于插入元素的左端点，则说明当前元素与插入元素无交并。</p>
<p>如当前元素的左端点大于插入元素的右端点，也说明当前元素与插入元素无交并。</p>
<p>否者，则代表当前元素与插入元素有交并，将其合并区间。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition of Interval:</span></span><br><span class="line"><span class="comment"> * public classs Interval &#123;</span></span><br><span class="line"><span class="comment"> *     int start, end;</span></span><br><span class="line"><span class="comment"> *     Interval(int start, int end) &#123;</span></span><br><span class="line"><span class="comment"> *         this.start = start;</span></span><br><span class="line"><span class="comment"> *         this.end = end;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param intervals: Sorted interval list.</span></span><br><span class="line"><span class="comment">     * @param newInterval: new interval.</span></span><br><span class="line"><span class="comment">     * @return: A new interval list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Interval&gt; <span class="title">insert</span><span class="params">(ArrayList&lt;Interval&gt; intervals, Interval newInterval)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (newInterval == <span class="keyword">null</span> || intervals == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> intervals;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Interval&gt; results = <span class="keyword">new</span> ArrayList&lt;Interval&gt;();</span><br><span class="line">        <span class="keyword">int</span> insertPos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Interval interval : intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (interval.end &lt; newInterval.start) &#123;</span><br><span class="line">                results.add(interval);</span><br><span class="line">                insertPos++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (interval.start &gt; newInterval.end) &#123;</span><br><span class="line">                results.add(interval);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newInterval.start = Math.min(interval.start, newInterval.start);</span><br><span class="line">                newInterval.end = Math.max(interval.end, newInterval.end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        results.add(insertPos, newInterval);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/insert-interval/">LintCode：插入区间</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>链表插入排序</title>
    <url>/insertion-sort-list/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>用插入排序对链表排序</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给予 <code>1-&gt;3-&gt;2-&gt;0-&gt;null</code>, 返回 <code>0-&gt;1-&gt;2-&gt;3-&gt;null</code></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将接受到的链表当做未排序链表，再创建一个链表存放已排序链表，并创建一个已排序链表的指针。</p>
<p>依次将未排序链表的元素与已排序链表中的每一个元素进行比较(也就是先用未排序链表的第一个与已排序链表的每一个进行比较，然后用未排序链表的第二个，第三个….依次进行比较，直到最后一个元素)</p>
<p>由于题意是<strong>升序排序</strong>，所以只要未排序链表中的元素大于已排序链表中的元素，那么就将未排序链表的这个元素放到第一个比它大的已排序链表的后面。</p>
<p>要注意的是，将未排序链表的元素放到已排序链表时，不要覆盖掉原数据(先挪动其他数据再进行插入操作)。</p>
<span id="more"></span>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head: The first node of linked list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The head of linked list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode node = dummy;</span><br><span class="line">            <span class="keyword">while</span> (node.next != <span class="keyword">null</span> &amp;&amp; node.next.val &lt; head.val) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode temp = head.next;</span><br><span class="line">            head.next = node.next;</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/winsertion-sort-list">LintCode：链表插入排序</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>两个链表的交叉</title>
    <url>/intersection-of-two-linked-lists/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>请写一个程序，找到两个单链表最开始的交叉节点。</p>
<div class="note danger"><p>注意事项:</p>
<ul>
<li>如果两个链表没有交叉，返回 <code>null</code>。</li>
<li>在返回结果后，两个链表仍须保持原有的结构。</li>
<li>可假定整个链表结构中没有循环。</li>
</ul>
</div>


<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>下列两个链表：</p>
<pre><code>A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
</code></pre>
<p>在节点 c1 开始交叉。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题不用考虑 <a href="/linked-list-cycle/" title="有环链表">有环链表</a>的情况，所以较为简单。</p>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>利用哈希表，先将 A 链表所有元素加入到哈希表中，然后遍历 B 数组，判断每一个元素是否已在哈希表中存在，如果已存在，则已存在的节点就是交叉节点。</p>
<h3 id="取长度法"><a href="#取长度法" class="headerlink" title="取长度法"></a>取长度法</h3><p>首先将两个链表都遍历一次，取到两个的长度,记作 m 和 n，如果两个链表有交叉，那么两个链表的最后一个节点，一定是一样的。</p>
<p>这里用样例中的两个链表举例， A 链表的的长度：<code>n = 5</code>， B 链表的长度：<code>m = 6</code> ，如果两者有相交节点，那么最多也只能是从长度较少节点的头结点到未节点。所以从较长链表 B 的第 <code>m - n</code> 位开始，从较短节点的头节点开始，依次向后，如果两个元素相同，则说明为交叉点。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="哈希表-1"><a href="#哈希表-1" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;      </span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headA: the first list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headB: the second list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: a ListNode </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode p1 = headA;</span><br><span class="line">        ListNode p2 = headB;</span><br><span class="line">        </span><br><span class="line">        HashSet&lt;ListNode&gt; map = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.add(p1);</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.contains(p2)) &#123;</span><br><span class="line">                <span class="keyword">return</span> p2;</span><br><span class="line">            &#125;            </span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="取长度法-1"><a href="#取长度法-1" class="headerlink" title="取长度法"></a>取长度法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;      </span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headA: the first list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headB: the second list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: a ListNode </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lenA = getLength(headA);</span><br><span class="line">        <span class="keyword">int</span> lenB = getLength(headB);</span><br><span class="line">        </span><br><span class="line">        ListNode n1 = headA;</span><br><span class="line">        ListNode n2 = headB;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.abs(lenA - lenB); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lenA &gt; lenB)</span><br><span class="line">                n1 = n1.next;</span><br><span class="line">            <span class="keyword">else</span> n2 = n2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (n1 != <span class="keyword">null</span> &amp;&amp; n2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n1.val == n2.val &amp;&amp; n1.next == n2.next) &#123;</span><br><span class="line">                <span class="keyword">return</span> n1;</span><br><span class="line">            &#125;</span><br><span class="line">            n1 = n1.next;</span><br><span class="line">            n2 = n2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/intersection-of-two-linked-lists/">LintCode：两个链表的交叉</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>链表</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>面试有感</title>
    <url>/interview/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为公司项目的拓展，最近要招一些 <code>Java</code> 开发，我作为一面面试官来谈一下面试的感受。</p>
<p>我会从以下几个方面来聊聊面试这点事：</p>
<span id="more"></span>

<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>大家可能在准备面试时，会刷许多面试题，我这里分为基础题和算法题。</p>
<p>基础题：基础题的话，有许多是可以刷到原题的。这类题主要考的还是你平时的积累。这类题还可以反应出公司对这个职位的技术要求，一般都是出公司常用的技术点。你可以以此反向推测公司真实业务上使用的技术栈。</p>
<p>算法题：不一定所有公司都出算法题，不过公司如果要出算法题，那一般都是修改过的版本，不太可能在网上搜索到原题。准备算法面试，还是要多刷题，并尝试去理解算法题的<em>套路</em>，这样才能在遇到变种题时举一反三。</p>
<blockquote>
<p>面试题是可以做到突击准备的，提前一两个月刷题，在笔试时可以显著提高你的分数。</p>
</blockquote>
<h2 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h2><p>简历是整个面试的核心，面试的主要过程就是以你简历上写的内容来进行沟通。完全不按照简历内容，随便提问，甚至故意刁难面试者的公司，也不必考虑。</p>
<h3 id="简历亮点"><a href="#简历亮点" class="headerlink" title="简历亮点"></a>简历亮点</h3><h4 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h4><p>有自己的个人博客，说明你善于总结和记录，并分享给网络。而且写博客可以显著提高自己的表达能力和总结能力。在面试沟通时，也能用到。需要注意的时博客要关注内容，不能为了写而写，全是流水账就没有意义了。</p>
<h4 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h4><p>拥抱开源，可以在空闲时，做一些小项目，你自己就是项目经理 + 设计 + 前端 + 后端开发 + 运维，在这个过程可以学到很多不一样的东西。并把它放到 <code>Github</code> 开源，不断优化代码，慢慢积累。项目逐渐完善时，可以做一些推广，不论项目有没有收到 star，都对你来说是一笔财富。</p>
<h3 id="简历要避免的点"><a href="#简历要避免的点" class="headerlink" title="简历要避免的点"></a>简历要避免的点</h3><h4 id="错别字"><a href="#错别字" class="headerlink" title="错别字"></a>错别字</h4><p>这里从错别字是广义上的，不仅有中文上的错别字，还有技术名词上的拼写错误，当然还有技术名词的大小写也尤为重要。</p>
<p>前两者就不再多谈，简历上出现这种情况，说明太粗心大意了，一定要自己完全审查一遍自己的简历，来杜绝这种低级错误。</p>
<p>代码中有命名规范，技术名词也有命名规范，关于技术名词的写法，很多人都不在意，如 <code>java</code>, <code>spring</code>, <code>springmvc</code>, <code>mySql</code> 这种写法屡见不鲜，其实每种技术名词都有其专门的写法，前面的应该写为 <code>Java</code>, <code>Spring</code>, <code>Spring MVC</code>, <code>MySQL</code>。如果实在不知道怎么写，可以去对应的官网，看他们的一级标题或者 Logo 中是如何拼写的。</p>
<h4 id="篇幅过长"><a href="#篇幅过长" class="headerlink" title="篇幅过长"></a>篇幅过长</h4><p>简历要简洁明了，不宜过长，不熟的技术点或时间跨度较久的项目没必要往上写。作为一个程序员，应当有对内容做归纳总结的能力。如果整个简历结构混乱，毫无重点，那么对你的印象会大打折扣。</p>
<p>要注意的点：</p>
<ul>
<li>不会的技术不要写。</li>
<li>不熟的技术尽量不写，如果非要写，写了解即可。</li>
<li>项目经验中，不要写了很多的项目整体功能，但对自己负责的功能一概而过。</li>
<li>项目经验中，不要写 “废话”, 如 “与前端进行接口联调”, “负责库存模块的开发”, “将文件上传到服务器” 这种笼统，基础，毫无亮点的话完全没必要写。要写你完成了哪种功能，给公司/项目解决了哪些问题/痛点，带来了哪些优点（节省了 xxx 资源，降低了 xxx 负载， 提高了系统的 xxx）。</li>
<li>个人介绍/个人评价，这种还是别写了。都是套话，毫无用处。</li>
</ul>
<h2 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h2><p>面试是双向选择的过程，双方是平等的，要不卑不亢，做到最基本的礼貌即可。</p>
<p>沟通过程中遇到不会的点，可以思考下后，和面试官说这个不熟，或不会。以快速进入下个话题，而不是一直卡在这。更不要自我否定或做过多的解释，说 “因为平时不常用”, “只是做 CRUD，没有研究过更深” 这种话，会显得不自信，影响面试官对你的评价。</p>
<p>不说废话，不要牵扯太多无关的点，要简洁明了的回答问题。</p>
<p>面试过程中没听清，或没理解，直接说就好，不要含糊过去。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其实面试是一个很看运气的事情，可能不是你自己的问题，只是面试官心情不好，或叫你来面试只是为了完成他们的 KPI。所以不要气馁，保持自信。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 动态代理初探</title>
    <url>/java-dynamic-proxy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于使用过 Spring 的朋友, 应该都使用过 AOP, 那么今天我们来对 AOP 的原理: <strong>动态代理</strong> 来一探究竟.</p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>在动态代理之前, 我们先来看看静态代理, 看下其实现方式及其优缺点.</p>
<p>静态代理的原理是委托类和代理类都实现同一个接口, 代理类中会调用委托类的方法, 同时代理类中可以加一些自己的逻辑.</p>
<span id="more"></span>

<h3 id="公共接口"><a href="#公共接口" class="headerlink" title="公共接口"></a>公共接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="委托类"><a href="#委托类" class="headerlink" title="委托类"></a>委托类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IService iService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyService</span><span class="params">(IService iService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iService = iService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">        iService.sayHello();</span><br><span class="line">        System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IService realService = <span class="keyword">new</span> RealService();</span><br><span class="line">        IService proxyService = <span class="keyword">new</span> ProxyService(realService);</span><br><span class="line">        proxyService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<pre><code>before...
hello
after...
</code></pre>
<blockquote>
<p>可以看到委托类和代理类都实现了同一个接口, 然后代理类在初始化时, 传入委托类对象, 然后在代理类自己的 <code>sayHello()</code> 方法中, 即调用了委托类的 <code>sayHello()</code> 方法, 还加了自己的逻辑, 输出了 <code>before</code> 和 <code>after</code>.<br>但这种方式有着明显的缺点:</p>
<ul>
<li>必须要继承一个接口</li>
<li>必须要手工创建对应的代理类</li>
<li>硬编码, 当接口需要改动或代理类较多时不宜维护.</li>
</ul>
</blockquote>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h3><h4 id="公共接口-1"><a href="#公共接口-1" class="headerlink" title="公共接口"></a>公共接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="委托类-1"><a href="#委托类-1" class="headerlink" title="委托类"></a>委托类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代理类-1"><a href="#代理类-1" class="headerlink" title="代理类"></a>代理类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object realObject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleInvocationHandler</span><span class="params">(Object realObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realObject = realObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before &quot;</span> + method.getName());</span><br><span class="line">        Object result = method.invoke(realObject, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;leaving &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存生成的代理类的字节码文件</span></span><br><span class="line">        System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IService realService = <span class="keyword">new</span> RealService();</span><br><span class="line">        IService proxyService = (IService) Proxy.newProxyInstance(</span><br><span class="line">                IService.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123;IService.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> SimpleInvocationHandler(realService));</span><br><span class="line">        proxyService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码看起来好像更复杂了一些, 我们可以看到 <code>IService</code> 和 <code>RealService</code> 的定义不变, 但创建代理类的方式变化了, 它使用  <code>java.lang.reflect.Proxy</code> 的静态方法 <code>newProxyInstance</code> 来创建代理类.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure>

<p>它有三个参数:</p>
<ul>
<li> <code>loader</code> 表示类加载器.</li>
<li> <code>interfaces</code> 表示代理类要实现的接口列表, 元素的类型只能是接口.</li>
<li> <code>h</code> 就是上面我们定义的 <code>SimpleInvocationHandler</code> 它实现了 <code>InvocationHandler</code> 接口, 并复写了 <code>invoke</code> 方法, 对代理接口的所有方法调用都会转到此方法上.</li>
</ul>
<p><code>newProxyInstance</code> 的返回值是 <code>Object</code>, 可以强制转化为 <code>interfaces</code> 数组中的任意接口类型, 但不能转化为某个普通类型, 如 <code>RealService</code>. 即使它代理的实际对象是 <code>RealService</code>.</p>
<p>接着我们在来看看 <code>SimpleInvocationHandler</code>, 它实现了 <code>InvocationHandler</code> 接口, 它通过构造方法传入被代理对象 <code>realObject</code>. 复写的 <code>invoke</code> 方法有三个参数:</p>
<ul>
<li><code>proxy</code> 表示代理对象本身, 需要注意, 它不是被代理的对象.</li>
<li><code>method</code> 表示正在被调用的方法</li>
<li><code>args</code> 表示方法的参数</li>
</ul>
<p>需要注意这句代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object result = method.invoke(realObject, args);</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">千万不能把 proxy 当成 method.invoke 的第一个参数. 这样会造成死循环, 因为这样表示代理类代理了它自身.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 原理解析</span><br><span class="line"></span><br><span class="line">刚才的测试类中, 我们有一段代码, 它用来保存生成后的代理类的 class 文件: </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>我们来反编译看下, 它为我们动态生成的代理类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> im.zhaojun.jdk_proxy.IService;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1)  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;im.zhaojun.jdk_proxy.IService&quot;</span>).getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到, 其实也就是生成了一个类, 实现了我们传入的接口, 它所有方法都是调用的 <code>SimpleInvocationHandler</code> 的 invoke 方法.</p>
<p>相比于静态代理, 这里的动态代理看起来麻烦了不少, 但它却更加通用. 我们不用为每个被代理的类都创建一个静态代理类, 而是当代理类要做的功能不变时, 只需要有这一个代理类即可. 说起来可能有些不好理解, 看代码吧:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralProxyDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">IServiceA</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAImpl</span> <span class="keyword">implements</span> <span class="title">IServiceA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">IServiceB</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBImpl</span> <span class="keyword">implements</span> <span class="title">IServiceB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;flying&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object realObj;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SimpleInvocationHandler</span><span class="params">(Object realObj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.realObj = realObj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;entering &quot;</span> + realObj.getClass().getSimpleName() + <span class="string">&quot;::&quot;</span> + method.getName());</span><br><span class="line">            Object result = method.invoke(realObj, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;leaving &quot;</span> + realObj.getClass().getSimpleName() + <span class="string">&quot;::&quot;</span> + method.getName());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class&lt;T&gt; intf, T realObj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(intf.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123; intf &#125;,</span><br><span class="line">                <span class="keyword">new</span> SimpleInvocationHandler(realObj));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        IServiceA a = <span class="keyword">new</span> ServiceAImpl();</span><br><span class="line">        IServiceA aProxy = getProxy(IServiceA.class, a);</span><br><span class="line">        aProxy.sayHello();</span><br><span class="line"></span><br><span class="line">        IServiceB b = <span class="keyword">new</span> ServiceBImpl();</span><br><span class="line">        IServiceB bProxy = getProxy(IServiceB.class, b);</span><br><span class="line">        bProxy.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里有两个接口 <code>ServiceA</code> 和 <code>ServiceB</code>,  他们对应的实现类为 <code>ServiceAImpl</code> 和 <code>ServiceBImpl</code>. 虽然他们的接口和实现类完全不同, 但通过动态代理. 他们都可以使用 <code>SimpleInvocationHandler</code> 中 <code>invoke</code> 中的代理逻辑.</p>
<h3 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB 动态代理"></a>CGLIB 动态代理</h3><p>上面讲到的 JDK 动态代理, 有一定的局限性, 那就是只能为接口创建代理, 返回的对象也只能是接口类型的, 如果一个类没有接口, 或者想代理<strong>非接口中定义的方法</strong>, JDK 动态代理就无法实现了. 这里就要用到 <code>CGLIB</code> 动态代理了. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCGLibDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被代理类.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RealService</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法拦截器.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method,</span></span></span><br><span class="line"><span class="function"><span class="params">                Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;entering &quot;</span> + method.getName());</span><br><span class="line">            Object result = proxy.invokeSuper(object, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;leaving &quot;</span> + method.getName());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class&lt;T&gt; cls)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(cls);                    <span class="comment">// 设置被代理类</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> SimpleInterceptor());  <span class="comment">// 设置方法拦截器</span></span><br><span class="line">        <span class="keyword">return</span> (T) enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RealService proxyService = getProxy(RealService.class);</span><br><span class="line">        proxyService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>RealService</code> 表示被代理的类, 它没有实现任何接口. <code>getProxy()</code> 方法为一个类生成代理对象, 这个代理对象可以转换为被代理类的类型, 它使用了 <code>cglib</code> 的 <code>Enhancer</code> 类, <code>Enhancer</code> 类的 <code>setSuperclass</code> 设置被代理的类, <code>setCallback</code> 设置被代理类的方法被调用时的处理类, <code>Enhancer</code> 支持多种类型, 这里使用的类实现了 <code>MethodInterceptor</code> 接口, 它与 JDK 动态代理中的 <code>InvocationHandler</code> 有点类似, 方法名称变成了intercept, 多了一个MethodProxy类型的参数.</p>
<p>与前面的 <code>InvocationHandler</code> 不同，<code>SimpleInterceptor</code> 中没有被代理的对象，它通过 <code>MethodProxy</code> 的 <code>invokeSuper</code> 方法调用被代理类的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object result = proxy.invokeSuper(object, args);</span><br></pre></td></tr></table></figure>

<p>注意，它不能这样调用被代理类的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object result = method.invoke(object, args);    </span><br></pre></td></tr></table></figure>

<p>object 是代理对象，不能自己代理自己，会造成死循环。</p>
<blockquote>
<p>基本的使用就这些, 先消化下, 自己动手实现, 后续我会更新一些 JDK 更细节上的内容. </p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>动态代理</tag>
        <tag>cglib</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 多线程设计模式 —— Single Threaded Execution</title>
    <url>/java-multithreaded-design-pattern-01/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Single Threaded Execution 有时也会被称之为 <code>临界区</code>。表示 <code>临界区</code> 内的代码同一时间内只允许一个线程执行，这个模式是并发编程的基础，对应 Java 中也就是同步代码块 <code>synchronized</code>，或其他显式锁 <code>lock</code>。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>多线程环境</li>
<li>多个线程同时访问的共享资源</li>
<li>这些线程会改变共享资源。</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><span id="more"></span>

<p>现有票 100 张，分三个窗口售卖，卖完为止。</p>
<p>票类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;号窗口卖出：&quot;</span> + <span class="keyword">this</span>.counter-- + <span class="string">&quot;号票&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;票已卖完&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>窗口类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StationThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Ticket ticket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StationThread</span><span class="params">(String name, Ticket ticket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.ticket = ticket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ticket.sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> StationThread(<span class="string">&quot;S1&quot;</span>, ticket).start();</span><br><span class="line">        <span class="keyword">new</span> StationThread(<span class="string">&quot;S2&quot;</span>, ticket).start();</span><br><span class="line">        <span class="keyword">new</span> StationThread(<span class="string">&quot;S3&quot;</span>, ticket).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="https://cdn.jun6.net/2020/10/04/7d0d513035d33.png" alt="image.png"></p>
<p>很明显的可以看到，同一张票，被多个窗口同时售卖了，就是因为未对共享资源 Ticket 做保护，导致了这种情况。</p>
<p>解决办法也很简单，给 Ticket 的 sell 方法加上 <code>synchronized</code> 即可。这样就防止了多个窗口同时访问同一张票。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;号窗口卖出：&quot;</span> + <span class="keyword">this</span>.counter-- + <span class="string">&quot;号票&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;票已卖完&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://cdn.jun6.net/2020/10/04/27f49ac2f88b5.png" alt="image.png"></p>
<h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://cdn.jun6.net/2020/10/04/061196e78e69d.png" alt="image.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单线程的情况，不需要使用此模式，就好像一个人在家上厕所，不需要锁门一样。</p>
<p>只有当 <strong>多线程</strong> 同时对 <strong>同一个共享资源</strong>，在线程中 <strong>进行了修改</strong>，才需要使用此模式。</p>
<p>且需要注意，对于 <strong>共享资源</strong>，如果用到了此模式，要保证所有使用他的地方都进行了保护。不然等于你把门锁住了，但窗子没关。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>equals 和 == 到底有什么区别？</title>
    <url>/java-tattle-01/</url>
    <content><![CDATA[<p>Java 中的 <code>equals</code> 和 <code>==</code> 对于不同的数据类型有不同的表现，话不多少，看演示。</p>
<h2 id="对于基本数据类型"><a href="#对于基本数据类型" class="headerlink" title="对于基本数据类型"></a>对于基本数据类型</h2><p>对于基本数据类型来说，只能用 <code>==</code>，所以毫无疑问，这里是用来判断两个基本数据类型的值是否一致。</p>
<h2 id="对于基本数据类型包装类"><a href="#对于基本数据类型包装类" class="headerlink" title="对于基本数据类型包装类"></a>对于基本数据类型包装类</h2><p>先来看看这种创建对象的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i1 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer i2 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i1 == i2);</span><br><span class="line">        System.out.println(i1.equals(i2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>false
true
</code></pre>
<span id="more"></span>

<div class="note info"><p>这里可能会有人疑问，<code>==</code> 不是判断两者是否相等么，那为什么结果为 <code>false</code> 呢？</p>
<p>因为这里的 Integer 是一个对象，也就是引用数据类型，里面存放的是对象在堆内存中的引用值，所以这里的 <code>==</code> 只是判断两者的引用值是否相同，两者创建了两个对象，在堆内存中分别是不同的引用，由而引用值也不同，才会返回 <code>false</code>。</p>
</div>

<p>那么我们再看一下简化版的 Integer 的创建方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer i2 = <span class="number">100</span>;</span><br><span class="line">        System.out.println(i1 == i2);</span><br><span class="line">        System.out.println(i1.equals(i2));</span><br><span class="line">        </span><br><span class="line">        Integer i3 = <span class="number">1000</span>;</span><br><span class="line">        Integer i4 = <span class="number">1000</span>;</span><br><span class="line">        System.out.println(i3 == i4);</span><br><span class="line">        System.out.println(i3.equals(i4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>true
true
false
true
</code></pre>
<p><code>equals</code> 毫无疑问是判断值是否相同，所以结果为 <code>true</code>，但是为什么第一个 <code>==</code> 又为 true 了呢，而第二个 <code>==</code> 还是 false。</p>
<p>因为在 Java 5 中，为 Integer 的操作引入了一个新的特性，用来节省内存和提高性能。整型对象在内部实现中通过使用相同的对象引用实现了缓存和重用。但适用范围只有 <code>-128</code> 到 <code>+127</code> 也就是说当<strong>自动装箱</strong>时，不会再分配内存空间，而是使用缓存中已存在的对象。</p>
<p>最大值 127 可以通过 JVM 的启动参数 <code>-XX:AutoBoxCacheMax=size</code> 修改</p>
<p>这种缓存行为不仅适用于 Integer 对象。我们针对所有整数类型的类都有类似的缓存机制。<code>Byte</code>、<code>Short</code>、<code>Long</code>、<code>Character</code> 都支持缓存。</p>
<p>其中 <code>Byte</code>，<code>Short</code>，<code>Long</code> 有固定范围: -128 到 127。对于 <code>Character</code>, 范围是 0 到 127。除了 <code>Integer</code> 可以通过参数改变范围外，其它的都不行。</p>
<div class="note danger"><p>对于基本数据类型包装类而言，不论是使用哪种方式创建的，判断两者的值是否相同，务必要使用 <code>equals</code> ，而不要使用 <code>==</code>。</p>
</div>

<h2 id="对于自定义数据类型"><a href="#对于自定义数据类型" class="headerlink" title="对于自定义数据类型"></a>对于自定义数据类型</h2><p>首先有 Person 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.setId(<span class="number">1</span>);</span><br><span class="line">        p1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        p2.setId(<span class="number">1</span>);</span><br><span class="line">        p2.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(p1 == p2);</span><br><span class="line">        System.out.println(p1.equals(p2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>这里使用 <code>==</code> 的结果为 <code>true</code> 很容易理解，毕竟两个对象的引用不同，但是 <code>equals</code> 不是判断值是否相同么，我的两个<code>id</code> 和 <code>name</code> 都是一样的，为什么这里还会返回 <code>false</code> 呢？</em></p>
<p>Person 中我们没有写 equals 方法，根据 Java 继承的特点，Person 类继承的是 Object，所以使用的是 Object 的 equals 方法，那我们来看看 Object 的 equals 方法是怎么写的。</p>
<p>![image_1bo22o7qv1e801ivjhqftge18d1m.png-24.9kB][1]</p>
<p>原来这里的 equals 方法里用的也是 <code>==</code>，那么刚才我们用基本数据类型包装类时，为什么能判断呢，同样，我们找到 Integer 的 equals 方法。</p>
<p>![image_1bo22v5je88n1d611g3la3e1a1m13.png-33kB][2]<br>![image_1bo2315q517g21glb14ni11c9hdp2n.png-18.8kB][3]</p>
<p>可以看 Integer 的 equals 方法，会先判断该对象是否是一个 Integer 类的一个实例，如果不是则直接返回 false，是的话就比较他们的 value 值是否相等。</p>
<p>所以在我们自定义数据类型时，比较两个对象是否相同，一定要重写 equals 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">        </span><br><span class="line">        Person p = (Person)obj;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.id == p.id &amp;&amp; <span class="keyword">this</span>.name == p.name) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重写 equals 方法后的运行结果：</p>
<pre><code>false
true
</code></pre>
<h2 id="对于-String"><a href="#对于-String" class="headerlink" title="对于 String"></a>对于 String</h2><p>String 也有两种创建方式，一种是 <code>String str = new String(&quot;java&quot;);</code>，另一种是 <code>String str = &quot;java&quot;</code>。</p>
<p>Java 为 String 类型提供了<strong>缓冲机制</strong>，当使用第二种双引号的形式创建对象时，Java 会先去字符串缓冲池中寻找内容相同的字符串，如果存在就直接拿来应用，如果不存在就创建一个新的字符串放到缓冲池中。对于第一种 new 对象的形式而言，每次都会创建一个新的对象，不会访问字符串缓冲池。</p>
<p>既然如此，对于 String 的 <code>equals</code> 和 <code>==</code> 你也自然应该明白是什么结果了。</p>
<p>一般情况下，建议使用 <code>String s = &quot;abc&quot;</code> 方式，因为该方式采用的是字符串缓冲池机制，效率更高。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在引用类型中，”==” 是比较两个引用是否指向堆内存里的同一个地址（同一个对象），而 equals 是一个普通的方法，该方法返回的结果依赖于自身的实现。</p>
<p>对于引用类型而言，判断两者是否相同要用 <code>equals</code> 方法，而不是 <code>==</code>。当然对于自定义数据类型，记得要重写 <code>equals</code> 方法，不然效果就等同于 <code>==</code> 了。<br>  [1]: <a href="https://cdn.jun6.net/image_1bo22o7qv1e801ivjhqftge18d1m.png">https://cdn.jun6.net/image_1bo22o7qv1e801ivjhqftge18d1m.png</a><br>  [2]: <a href="https://cdn.jun6.net/image_1bo22v5je88n1d611g3la3e1a1m13.png">https://cdn.jun6.net/image_1bo22v5je88n1d611g3la3e1a1m13.png</a><br>  [3]: <a href="https://cdn.jun6.net/image_1bo2315q517g21glb14ni11c9hdp2n.png">https://cdn.jun6.net/image_1bo2315q517g21glb14ni11c9hdp2n.png</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中 byte 的取值范围为什么是 -128 到 +127</title>
    <url>/java-tattle-02/</url>
    <content><![CDATA[<p>首先要了解的概念是 Java 中用补码表示二进制数，补码的最高位代表符号位，最高位是 <code>1</code> 则表示为正数，最高位是 <code>0</code> 则表示为负数。</p>
<p>正数的补码是本身，负数的补码其绝对值的二进制位按位取反后 +1。</p>
<span id="more"></span>

<p>例如：</p>
<p><code>+60</code>：二进制表示形式为 0011 1100，补码为本身，也就还是 0011 1100<br><code>-60</code>：已知 <code>+60</code> 的二进制表现形式为 0011 1100，按位取反后是 1100 0011，在加 1，就是1100 0100。即表示 <code>-60</code> 的二进制表现形式 1100 0100。</p>
<p>回到正题，那么 byte 表示一个字节，一个字节是 8 位，最高位是符号位。</p>
<p>那么 8 位能表示的最大值就是 0111 1111，换算成十进制就是 127。</p>
<p>最小的负数就是1000 0000，（最大的负数是 1111 1111 是负数-1的补码），换算成十进制就是 -128，<br>1000 0000 是最小负数的补码表示形式，我们把补码计算步骤倒过来就即可。1000 0000 减 1 得  0111 1111 然后取反 1000 0000<br>因为负数的补码是其绝对值取反，即 1000 0000 为最小负数的绝对值，而 1000 0000 的十进制表示是 128，所以最小负数是 -128</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>记一道 Java 综合面试题</title>
    <url>/java-this-override/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天看了一道关于异常处理的题：<a href="/java-try-catch-finally/" title="由一道 Java finally 执行顺序的题引发的思考">由一道 Java finally 执行顺序的题引发的思考</a>，今天又在牛客网看到一道更深的题，这次加上了一个子父类继承关系的知识点。</p>
<span id="more"></span>


<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> B().getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">            setValue(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                value++;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(e.toString());</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.setValue(value);</span><br><span class="line">                System.out.println(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="number">5</span>);</span><br><span class="line">            setValue(getValue() - <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.setValue(<span class="number">2</span> * value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题考的就是代码执行顺序，比较直观的方法是使用单步调试，来一起看下执行过程吧：</p>
<p>首先从 main 方法开始执行，new 了一个对象 B，没什么可说的。<br><img src="https://cdn.jun6.net/201712080938_640.png"></p>
<p>接下来执行到了 B 类的构造方法，也没什么问题。<br><img src="https://cdn.jun6.net/201712080940_685.png"></p>
<p>然后执行到了父类的有参构造。<br><img src="https://cdn.jun6.net/201712080941_26.png"></p>
<p>这里要执行 <code>setValue(v)</code> 方法了，那么这里的 <code>setValue()</code> 方法应该是执行 B 类的，还是 A 类的呢？<br><img src="https://cdn.jun6.net/201712080944_300.png"></p>
<p>其实这个结果是有些出乎我意料， 怎么会执行子类 B 的 <code>setValue()</code> 方法呢？<br><strong>因为这里正在执行 B 的构造方法中，所以调用的方法就默认是 B 的，当 B 中没有，才会去找它的父类 A 中的方法。</strong></p>
<p>下一步是  <code>super.setValue()</code>  ，这里明确指明了调用父类的方法，所以应该没啥问题。<br><img src="https://cdn.jun6.net/201712080946_311.png"></p>
<p>嗯，这里将 A 类的 value 属性设值为 10。<br><img src="https://cdn.jun6.net/201712080949_703.png"></p>
<p>然后还回到 A 的构造方法中。<br><img src="https://cdn.jun6.net/201712080954_694.png"></p>
<p>再回到 B 的构造方法中，接下来应该调用 <code>getValue</code>。<br><img src="https://cdn.jun6.net/201712080955_320.png"></p>
<p>由于子类中没有，所以调用父类的 <code>getValue</code> 方法。<br><img src="https://cdn.jun6.net/201712080956_869.png"></p>
<p>接下来将 A 中的 value 自增 1，然后到了 <code>return value</code> ，由于下面还有 <code>finally</code> 语句块，所以先执行 <code>finally</code> 语句块，再返回。<br><img src="https://cdn.jun6.net/201712080957_346.png"></p>
<p>又到了一个 <code>setValue</code> 方法，那么这里调用的是子类 B 的，还是父类 A 的呢？</p>
<p><img src="https://cdn.jun6.net/201712080958_910.png"></p>
<p>可以看到，这里调用的是子类 B 的构造方法，还是刚才的那个结论：<br><strong>因为这里正在执行 B 的构造方法中，所以调用的方法就默认是 B 的，当 B 中没有，才会去找它的父类 A 中的方法。</strong></p>
<p>接下来应该会执行 <code>super.setValue()</code> 也就是它父类 A 的 <code>setValue()</code> 方法。<br><img src="https://cdn.jun6.net/201712081003_55.png"></p>
<p>这里会将 A 的 value 值设为 22。<br><img src="https://cdn.jun6.net/201712081007_994.png"></p>
<p>然后回到刚才的方法里，准备打印 value 值，打印后一共会回到 try 里的 return 语句。<br><img src="https://cdn.jun6.net/201712081008_701.png"></p>
<p>这里虽然 value 的值是 22，但是刚才执行 finally 语句块之前就已经将 reutrn 的值确定了，也就是 11，详细参见 <a href="/java-try-catch-finally/" title="由一道 Java finally 执行顺序的题引发的思考">由一道 Java finally 执行顺序的题引发的思考</a>。<br><img src="https://cdn.jun6.net/201712081010_845.png"></p>
<p>回到刚才的调用，由于上一步返回的值是 11，所以这里应该是调用的<code>setValue(11- 3);</code>，这里调用的是 B 的方法。<br><img src="https://cdn.jun6.net/201712081012_522.png"></p>
<p>接下来又要执行 <code>super.setValue()</code> 了，也就是父类的 <code>setValue()</code> 方法。<br><img src="https://cdn.jun6.net/201712081014_1.png"></p>
<p>这里会将 A 类的的 value 值从 22 改为 16.<br><img src="https://cdn.jun6.net/201712081017_898.png"></p>
<p>然后 B 类的构造方法执行完了，回到 main 方法，准备调用 <code>getValue()</code> 方法，因为 B 类没有，所以会调用其父类 A 的。<br><img src="https://cdn.jun6.net/201712081019_167.png"></p>
<p>这里将 A 的 value 值自增1，变为 17 ，然后最为 return 的最终返回结果后，执行 finally 语句中的内容。<br><img src="https://cdn.jun6.net/201712081025_248.png"></p>
<p>这里又到了 <code>setValue</code> 的抉择，到底执行哪个类的呢？<br><img src="https://cdn.jun6.net/201712081028_353.png"></p>
<p>还是调到了 B 类中，因为 main 方法里调用的是 <code>new B().xxx</code> 方法，所以这里的 this 代表的是 B 类。<br>接下来这里指定 <code>super.setValue()</code> ，调用父类的方法，将父类的 value * 2 ，然后回到 finally 块中。<br><img src="https://cdn.jun6.net/201712081030_992.png"></p>
<p>然后调用输出语句，输出结果应为 34，输出后会返回到 try 里的 return 语句中。<br><img src="https://cdn.jun6.net/201712081032_346.png"></p>
<p>那么这里的 return 值应该是刚才已经确定的值，也就是 17，然后回到 main 方法<br><img src="https://cdn.jun6.net/201712081033_671.png"></p>
<p>这里返回的是 17,所以输出 17,程序结束。<br><img src="https://cdn.jun6.net/201712081034_64.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题很长，不过也只是考两个知识点：</p>
<ol>
<li>子类与父类之间的调用关系：<strong>动态分派 在调用new B()时调用A的构造器时和super.getValue()时的setValue(int value)方法是根据隐式对象的实际类型来确定的。只有实际类型未重写该方法时，才按照继承层次由下往上查找。这个可以参阅《深入理解JVM》</strong>的“分派”一节。</li>
<li><code>try-catch-finally</code> 的执行顺序，详见： <a href="/java-try-catch-finally/" title="由一道 Java finally 执行顺序的题引发的思考">由一道 Java finally 执行顺序的题引发的思考</a></li>
</ol>
<p>理解了这两个知识点。还要脑子清醒，一步一步做，应该没什么问题。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基于反射的通用树形结构工具类</title>
    <url>/java-tree-util/</url>
    <content><![CDATA[<p>在日常的开发中, 经常会遇到许多树形结构的场景, 如菜单树, 部门树, 目录树等. 而这些一般都会涉及到要将数据库查询出来的集合转化为树形结构的功能.<br>由于 <code>list</code> -&gt; <code>tree</code> 是一个比较通用的功能, 无非就是根据 <code>id</code>, <code>pid</code>, <code>children</code> 这三个字段进行转换. 但由于字段名可能不一致, 如菜单里可能叫 <code>menuId</code>, 而部门里叫 <code>deptId</code>，所以我用反射来实现了一个通用的工具类, 来进行转换.</p>
<span id="more"></span>

<p>工具类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合转树结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 目标集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      集合元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的树形结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">toTree</span><span class="params">(<span class="meta">@NotNull</span> Collection&lt;T&gt; collection, <span class="meta">@NotNull</span> Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toTree(collection, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合转树结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 目标集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id         节点编号字段名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent     父节点编号字段名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> children   子节点集合属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      集合元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>           转换后的树形结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">toTree</span><span class="params">(<span class="meta">@NotNull</span> Collection&lt;T&gt; collection, String id, String parent, String children, <span class="meta">@NotNull</span> Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (collection == <span class="keyword">null</span> || collection.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">// 如果目标集合为空,直接返回一个空树</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(id)) id = <span class="string">&quot;id&quot;</span>;                     <span class="comment">// 如果被依赖字段名称为空则默认为id</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(parent)) parent = <span class="string">&quot;parent&quot;</span>;         <span class="comment">// 如果依赖字段为空则默认为parent</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(children)) children = <span class="string">&quot;children&quot;</span>;   <span class="comment">// 如果子节点集合属性名称为空则默认为children</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化根节点集合, 支持 Set 和 List</span></span><br><span class="line">            Collection&lt;T&gt; roots;</span><br><span class="line">            <span class="keyword">if</span> (collection.getClass().isAssignableFrom(Set.class)) &#123;</span><br><span class="line">                roots = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                roots = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 id 字段, 从当前对象或其父类</span></span><br><span class="line">            Field idField;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                idField = clazz.getDeclaredField(id);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e1) &#123;</span><br><span class="line">                idField = clazz.getSuperclass().getDeclaredField(id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 parentId 字段, 从当前对象或其父类</span></span><br><span class="line">            Field parentField;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                parentField = clazz.getDeclaredField(parent);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e1) &#123;</span><br><span class="line">                parentField = clazz.getSuperclass().getDeclaredField(parent);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 children 字段, 从当前对象或其父类</span></span><br><span class="line">            Field childrenField;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                childrenField = clazz.getDeclaredField(children);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e1) &#123;</span><br><span class="line">                childrenField = clazz.getSuperclass().getDeclaredField(children);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置为可访问</span></span><br><span class="line">            idField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            parentField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            childrenField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找出所有的根节点</span></span><br><span class="line">            <span class="keyword">for</span> (T c : collection) &#123;</span><br><span class="line">                Object parentId = parentField.get(c);</span><br><span class="line">                <span class="keyword">if</span> (isRootNode(parentId)) &#123;</span><br><span class="line">                    roots.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从目标集合移除所有根节点</span></span><br><span class="line">            collection.removeAll(roots);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历根节点, 依次添加子节点</span></span><br><span class="line">            <span class="keyword">for</span> (T root : roots) &#123;</span><br><span class="line">                addChild(root, collection, idField, parentField, childrenField);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭可访问</span></span><br><span class="line">            idField.setAccessible(<span class="keyword">false</span>);</span><br><span class="line">            parentField.setAccessible(<span class="keyword">false</span>);</span><br><span class="line">            childrenField.setAccessible(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> roots;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为目标节点添加孩子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node             目标节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection    目标集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idField       ID 字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentField   父节点字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> childrenField 字节点字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addChild</span><span class="params">(<span class="meta">@NotNull</span> T node, <span class="meta">@NotNull</span> Collection&lt;T&gt; collection, <span class="meta">@NotNull</span> Field idField, <span class="meta">@NotNull</span> Field parentField, <span class="meta">@NotNull</span> Field childrenField)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        Object id = idField.get(node);</span><br><span class="line">        Collection&lt;T&gt; children = (Collection&lt;T&gt;) childrenField.get(node);</span><br><span class="line">        <span class="comment">// 如果子节点的集合为 null, 初始化孩子集合</span></span><br><span class="line">        <span class="keyword">if</span> (children == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (collection.getClass().isAssignableFrom(Set.class)) &#123;</span><br><span class="line">                children = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            &#125; <span class="keyword">else</span> children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (T t : collection) &#123;</span><br><span class="line">            Object o = parentField.get(t);</span><br><span class="line">            <span class="keyword">if</span> (id.equals(o)) &#123;</span><br><span class="line">                <span class="comment">// 将当前节点添加到目标节点的孩子节点</span></span><br><span class="line">                children.add(t);</span><br><span class="line">                <span class="comment">// 重设目标节点的孩子节点集合,这里必须重设,因为如果目标节点的孩子节点是null的话,这样是没有地址的,就会造成数据丢失,所以必须重设,如果目标节点所在类的孩子节点初始化为一个空集合,而不是null,则可以不需要这一步,因为java一切皆指针</span></span><br><span class="line">                childrenField.set(node, children);</span><br><span class="line">                <span class="comment">// 递归添加孩子节点</span></span><br><span class="line">                addChild(t, collection, idField, parentField, childrenField);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是根节点, 判断方式为: 父节点编号为空或为 0, 则认为是根节点. 此处的判断应根据自己的业务数据而定.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentId      父节点编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>              是否是根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRootNode</span><span class="params">(Object parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (parentId == <span class="keyword">null</span>) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parentId <span class="keyword">instanceof</span> String &amp;&amp; (StringUtils.isEmpty(parentId) || parentId.equals(<span class="string">&quot;0&quot;</span>))) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parentId <span class="keyword">instanceof</span> Integer &amp;&amp; Integer.valueOf(<span class="number">0</span>).equals(parentId)) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>菜单实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5561561457068906366L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer menuId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String menuName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMenuId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuId</span><span class="params">(Integer menuId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuId = menuId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Integer parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMenuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuName</span><span class="params">(String menuName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuName = menuName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Menu&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;Menu&gt; children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>测试类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Menu&gt; menuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    menuList.add(<span class="keyword">new</span> Menu(<span class="number">1</span>, <span class="keyword">null</span>, <span class="string">&quot;节点1&quot;</span>));</span><br><span class="line">    menuList.add(<span class="keyword">new</span> Menu(<span class="number">2</span>, <span class="keyword">null</span>, <span class="string">&quot;节点2&quot;</span>));</span><br><span class="line">    menuList.add(<span class="keyword">new</span> Menu(<span class="number">3</span>, <span class="number">1</span>, <span class="string">&quot;节点1.1&quot;</span>));</span><br><span class="line">    menuList.add(<span class="keyword">new</span> Menu(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;节点1.2&quot;</span>));</span><br><span class="line">    menuList.add(<span class="keyword">new</span> Menu(<span class="number">5</span>, <span class="number">3</span>, <span class="string">&quot;节点1.1.1&quot;</span>));</span><br><span class="line">    Collection&lt;Menu&gt; menus = TreeUtils.toTree(menuList, <span class="string">&quot;menuId&quot;</span>, <span class="string">&quot;parentId&quot;</span>, <span class="string">&quot;children&quot;</span>, Menu.class);</span><br><span class="line">    System.out.println(JSONUtil.toJsonStr(menus));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;menuId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;节点1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;menuId&quot;</span>: <span class="number">5</span>,</span><br><span class="line">                        <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;节点1.1.1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;parentId&quot;</span>: <span class="number">3</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;节点1.1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;节点1.2&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;menuId&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;节点2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>反射</tag>
        <tag>工具类</tag>
        <tag>树形结构</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Java finally 执行顺序 -- 修改版</title>
    <url>/java-try-catch-finally-2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了一篇 <a href="/java-try-catch-finally/" title="关于 try-catch-finally 执行顺序">关于 try-catch-finally 执行顺序</a> 的文章，但是写的有些繁琐了，这里重新写一下。</p>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">aaa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ++x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ++x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">int</span> y = t.aaa();</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>我第一次看到这个题，得出了几个问题:</p>
<ul>
<li>如果在 try 语句块里有 return 语句，那么 finally 还会执行吗？</li>
<li>如果执行那应该是怎样的执行过程呢？</li>
</ul>
<p>首先这道题的运行结果是 2，可能跟你想的不一样吧，别急，下面我会慢慢解释的。</p>
<p>在学习 Java 基础的时候，老师就讲过，try-catch-finally 中的 finally 语句块一定会被执行，那么我们来 debug 一下：</p>
<p>初始状态:<br><img src="https://cdn.jun6.net/201801151206_791.png"></p>
<p>此时运行到了 <code>return ++x;</code> 但还没执行该语句，目前 x 的值为 1.<br><img src="https://cdn.jun6.net/201801151208_200.png"></p>
<p>这时发现跳到了 finally 语句块中，且 <code>return ++x</code> 的 <code>++</code> 操作已经执行，但没有进行 <code>reutrn</code>，目前 x 的值为 2:<br><img src="https://cdn.jun6.net/201801151209_732.png"></p>
<p>执行完 finally 语句块中的 <code>++x</code> 操作后，又回到了 return 中，此时 x 的值为 3:<br><img src="https://cdn.jun6.net/201801151213_408.png"></p>
<p>但根据最后的运行结果，我们发现其实真正 reutrn 的是 2，那么如何解释这一点呢？</p>
<p>其实在 <a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5">官方的 JVM 规范</a> 中对这一部分有说明：</p>
<div class="note default"><p>If the try clause executes a return, the compiled code does the following:</p>
<ol>
<li>Saves the return value (if any) in a local variable.</li>
<li>Executes a jsr to the code for the finally clause.</li>
<li>Upon return from the finally clause, returns the value saved in the local variable.</li>
</ol>
</div>

<p>简单翻译如下：</p>
<div class="note default"><p>如果 try 语句里有 return，那么代码的行为如下：</p>
<ol>
<li>如果有返回值，就把返回值保存到局部变量中</li>
<li>执行 jsr 指令跳到 finally 语句里执行</li>
<li>执行完 finally 语句后，返回之前保存在局部变量表里的值</li>
</ol>
</div>

<p>看完这个应该就能理解为什么返回的是 2 了，</p>
<p>但要注意的是：</p>
<ul>
<li>如果在 finally 语句块中也使用了 return 语句，那么会忽略 try 中的 return 语句，而执行 finally 中的 return。</li>
<li>如果 try 中 return 的是引用数据类型，那么 finally 中的操作可能会影响最终的 return 值，因为对于引用数据类型，暂存到局部变量里的是它的地址值。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>由一道 Java finally 执行顺序的题引发的思考</title>
    <url>/java-try-catch-finally/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文讲解过于繁琐，已重新修改至 <a href="/java-try-catch-finally-2/" title="关于 Java finally 执行顺序 -- 修改版">关于 Java finally 执行顺序 -- 修改版</a>。 </p>
<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>首先来看看这道题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String s = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(test());</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> s = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            s = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>执行结果是 <code>ABAB</code> ，刚看到这个结果，我是比较诧异的，利用 IDEA 的单步调试也没弄明白，来看看我当时的思路：</p>
<ol>
<li>首先输出 <code>try</code> 中的输出语句，输出 <code>&quot;A&quot;</code></li>
<li>由于 <code>try</code> 下还有的 <code>finally</code> 语句，所以执行 <code>finally</code> 中的输出语句，输出 <code>&quot;B&quot;</code></li>
<li>将 <code>&quot;B&quot;</code> 赋值给变量 <code>s</code></li>
<li>回到 <code>try</code> 中的 <code>return</code> 语句，再次将 <code>&quot;A&quot;</code> 赋值给 <code>s</code>，将 <code>&quot;A&quot;</code> 最为返回值，返回 <code>main</code> 方法中。(此时 <code>s = &quot;A&quot;</code>)</li>
<li>回到 <code>main</code> 方法中的第一行输出语句，输出 <code>&quot;A&quot;</code>，然后执行 <code>main</code> 方法中的第二条输出语句，输出 <code>&quot;A&quot;</code></li>
</ol>
<blockquote>
<p>所以，结果不应该是 “ABAA” 么，因为 return 中已经将 “A” 赋值给 s 了，那么 s 的值不应该是 “A” 么，这时返回值就是 “A”，再怎么第二条输出语句也不能是 “B” 呀，可看着开发工具输出的结果，我也很无奈，我当时是这个表情。。。<br><img src="https://cdn.jun6.net/201712071645_997.png"></p>
</blockquote>
<p>但我相信开发工具是不会骗我的，一定是我自己的理解有问题，然后自己又写了几个类似的例子来测试，最后得出的结论是：** finally 语句块在 return 语句之后，return 返回之前执行**，可能这句话不是那么容易理解，来看下面的例子吧，看完我相信你应该能明白我这句话是什么意思了。</p>
<h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>证明：<code>finally 语句块在 return 语句之后，return 返回之前执行。</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(test1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try block&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> b += <span class="number">80</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;catch block&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally block&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="number">25</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;b&gt;25, b = &quot;</span> + b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>try block
finally block
b&gt;25, b = 100
100
</code></pre>
<p>可以根据运行结果得知，在 <code>finally </code> 语句块执行之前，<code>return b += 80;</code> 中的 <code>b + =80;</code> 这部分已经运行，但是没有返回，然后等 <code>finally</code> 执行完以后才返回结果的。</p>
<h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p>如果觉得这个 <code>例 1</code> 还不足以说明这个情况的话，下面再加个例子加强证明结论：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(test11());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;try block&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> test12();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;finally block&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test12</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;return statement&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;after return&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>try block
return statement
finally block
after return
</code></pre>
<p>这下总明白了吧，执行 <code>finally</code> 之前将 <code>return</code> 后的 <code>test12()</code> 方法先执行了，然后再执行的 <code>finally</code> 语句。</p>
<h2 id="拓展问题一"><a href="#拓展问题一" class="headerlink" title="拓展问题一"></a>拓展问题一</h2><p>前面两个例子证明了原题得出的结论，但是这个结论好像还不能足矣证明原题中的结果为什么是<code>&quot;ABAB&quot;</code>，还有一个新问题：</p>
<p><strong>如果，finally 中对 return 返回的变量进行了修改，那么 return 返回的是修改前的值还是修改后的值？</strong></p>
<p>我们在 <code>例 1</code> 的 <code>finally</code> 语句块中加上一句 <code>b = 10;</code>，那么结果又会是什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(test1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try block&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> b += <span class="number">80</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;catch block&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;finally block&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="number">25</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;b&gt;25, b = &quot;</span> + b);</span><br><span class="line">            &#125;</span><br><span class="line">            b = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>try block
finally block
b&gt;25, b = 100
100
</code></pre>
<p>可以看到 <code>return</code> 的值并没有被 <code>finally</code> 中的语句改变，其实如果这样得出结论：<strong>finally 中对 return 返回的变量进行了修改，并不会影响 try 中 return 的值</strong>，是不负责任的，因为我们只考虑了基本数据类型，如果是引用数据类型，还会是这种结果么？</p>
<h2 id="扩展问题二"><a href="#扩展问题二" class="headerlink" title="扩展问题二"></a>扩展问题二</h2><p>接 <code>拓展问题 1</code> 的又一个问题，对于引用数据类型的情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(test1().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stu.setName(<span class="string">&quot;Try&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> stu;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            stu.setName(<span class="string">&quot;Catch&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stu.setName(<span class="string">&quot;Finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>Finally
</code></pre>
<p>可以看到，对于基本数据类型和引用数据类型，结论是不同的，再次总结下结论吧：</p>
<ul>
<li>对于基本数据类型，<code>finally</code> 语句块中对 <code>try</code> 语句块的 <code>return</code> 的变量进行了修改，<code>return</code> 的则是修改前的值。</li>
<li>对于引用数据类型，<code>finally</code> 语句块中对 <code>try</code> 语句块的 <code>return</code> 的变量进行了修改，<code>return</code> 的则是修改后的值。</li>
</ul>
<p>看到这里，不知道你有没有想到这个结论与 Java 的方法调用时的所谓的 <code>值传递</code> 和 <code>引用传递</code> 的结论有些类似。</p>
<p>既然得出了这个结论，那么这个结论是必然的情况么？一定正确么？别急，来看下一个例子。</p>
<h2 id="拓展问题三"><a href="#拓展问题三" class="headerlink" title="拓展问题三"></a>拓展问题三</h2><p>对于 <code>拓展问题 2</code> 我再做一个增强版的，其实就是在第 17 行之下添加一条语句 <code>stu = null</code> ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class FinallyTest4 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(test1().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Student test1() &#123;</span><br><span class="line">        Student stu = new Student();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stu.setName(<span class="string">&quot;Try&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> stu;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            stu.setName(<span class="string">&quot;Catch&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stu.setName(<span class="string">&quot;Finally&quot;</span>);</span><br><span class="line">            stu = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>Finally
</code></pre>
<p>这时，你可能都有骂人的冲动了，What ？咋回事，咋什么结论都不对呢，不是说好的引用数据类型会改变 <code>return</code> 的值么，这里都将 <code>stu</code> 修改为 <code>null</code> 了，怎么还能 <code>return</code> 了 <code>&quot;Finally&quot;</code> 呢？</p>
<p>别激动，别激动，不卖关子了，我直接说了：</p>
<blockquote>
<p>先说基本数据类型，由于基本数据类型是 <em>值传递</em> ，所以在 <code>try</code> 里的 <code>return</code> 执行的时候，就先将变量的值隐性的作为最终返回的值。</p>
</blockquote>
<blockquote>
<p>同样的，对于引用数据类型，只是将该变量所指向的内存地址隐性的作为最终返回的值，所以即使将 <code>stu = null</code>，也无所谓了，因为早在执行 <code>finally</code> 之前，<code>try</code> 里的 <code>return</code> 就已经拿到了 <code>stu</code> 所指向的地址。</p>
</blockquote>
<blockquote>
<p>这里多说一句，其实 Java 里都是值传递，只不过基本数据类型的值是真正的值，而引用数据类型是地址值而已。（如果你看这句话更晕的话，就先跳过去这句话，反正本篇文章也不是为了解释这个的。）</p>
</blockquote>
<h2 id="更深的思考"><a href="#更深的思考" class="headerlink" title="更深的思考"></a>更深的思考</h2><hr>
<p>问：如果 <code>try</code> 与 <code>finally</code> 中都有 <code>return</code> 语句，那么到底会返回哪一个呢？</p>
<blockquote>
<p>会返回 <code>finally</code> 中的 <code>return</code> 。</p>
</blockquote>
<hr>
<p>问：如果 <code>try</code> 里有 <code>return</code> 语句，整个 <code>try-catch-finally</code> 块之外也有一个 <code>return</code> 语句，那么哪个会执行，一定是这样么？</p>
<blockquote>
<p>在 <code>try</code> 里没有发生异常的情况下，是 <code>try</code> 里的 <code>return</code> 会执行，但发生了异常，则反之。</p>
</blockquote>
<hr>
<p>问：如果 <code>catch</code> 中有 <code>return</code> 语句呢？当然只有在异常的情况下才有可能会执行，那么是在 <code>finally</code> 之前就返回吗？</p>
<blockquote>
<p>当发生异常后，<code>catch</code> 中的 <code>return</code> 执行情况与未发生异常时 <code>try</code> 中 <code>return</code> 的执行情况完全一样。</p>
</blockquote>
<hr>
<h2 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h2><p>finally 块的语句在 try 或 catch 中的 return 语句执行之后返回之前执行，且 finally 里的修改语句可能影响也可能不影响 try 或 catch 中 return <strong>已经确定的返回值</strong>，若 finally 里也有 return 语句则覆盖 try 或 catch 中的 return 语句直接返回。</p>
<h2 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h2><ul>
<li><a href="https://www.cnblogs.com/lanxuezaipiao/p/3440471.html">Java finally语句到底是在return之前还是之后执行？</a></li>
<li><a href="http://cjianfeng.com/2017/01/09/finally%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E9%9D%A2%E8%AF%95%E9%A2%98/">finally执行顺序面试题</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建一个自己的云盘 + 离线下载站</title>
    <url>/kodcloud-aria2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次实验环境如下:</p>
<ul>
<li>VPS : <a href="https://cloud.google.com/">Google Cloud Platform</a></li>
<li>系统 : CentOS_7.0_64</li>
<li>运行环境 : <a href="https://www.apachefriends.org/zh_cn/index.html">XAMPP 7.2</a></li>
<li>云盘服务 : <a href="http://kodcloud.com/">kodcloud</a></li>
<li>离线下载 : <a href="https://doub.bid/shell-jc4/">逗比根据地 - Aria2 一键安装管理脚本</a></li>
</ul>
<span id="more"></span>

<h2 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h2><p>国内的阿里云，腾讯云等获取 root 权限很简单，我记得这两家的  CentOS 系统一般都是默认 root 权限的，但这里还是要说一下，如何开启 root 密码登陆的方式，(如果以获得 root 权限，则可以跳过这一段)。</p>
<p>先使用 <code>sudo -i</code> 切换到 root 用户，<code>vi /etc/ssh/sshd_config</code>：<br>找到 <code>PermitRootLogin no</code> 改成 <code>PermitRootLogin yes</code><br>找到 <code>PasswordAuthentication no</code> 改成 <code>PasswordAuthentication yes</code><br>按 Esc 输入<code>:wq</code> 保存退出 <code>vi</code></p>
<p>根据系统重启 SSH 服务，其他系统请自行搜索。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sevice ssh restart  <span class="comment"># centos 6.x</span></span><br><span class="line">systemctl restart sshd.service <span class="comment"># centos 7.x</span></span><br></pre></td></tr></table></figure>

<p>这样就开启用 root 用户密码登陆的权限了。但我们还不知道 root 用户的密码呢，所以输入 passwd 修改一下就可以用 xshell、putty 等工具登陆了。</p>
<blockquote>
<p><code>Google Cloud Platform</code> 缺只允许使用 ssh 登陆，虽然可以使用 sudo 来使用 root 权限，但发现最后还是有一些问题，就是 aria 下载的文件都是 root 用户，root 组的，而 kodexplorer 对这些下载的文件只有只读权限，很不方便，既然是个人的一些环境，所以这里就不那么考虑安全性了。</p>
</blockquote>
<h2 id="安装-XAMPP"><a href="#安装-XAMPP" class="headerlink" title="安装 XAMPP"></a>安装 XAMPP</h2><p>下载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://www.apachefriends.org/xampp-files/7.2.0/xampp-linux-x64-7.2.0-0-installer.run</span><br><span class="line">chmod 777 xampp-linux-x64-7.2.0-0-installer.run</span><br></pre></td></tr></table></figure>
<p>如果提示 <code>bash: wget: command not found</code>，就先执行一下 <code>yum install wget</code></p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./xampp-linux-x64-7.2.0-0-installer.run</span><br></pre></td></tr></table></figure>
<p>安装选项全部默认即可，直接回车确认。</p>
<h2 id="安装-kodcloud"><a href="#安装-kodcloud" class="headerlink" title="安装 kodcloud"></a>安装 kodcloud</h2><p>进入站点目录，创建网站存放目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lampp/htdocs</span><br><span class="line">mkdir kodcloud</span><br><span class="line"><span class="built_in">cd</span> kodcloud</span><br></pre></td></tr></table></figure>

<p>下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://static.kodcloud.com/update/download/kodexplorer4.25.zip</span><br></pre></td></tr></table></figure>
<p>安装解压工具并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install unzip</span><br><span class="line">unzip kodexplorer4.25.zip</span><br><span class="line">rm -rf kodexplorer4.25.zip</span><br></pre></td></tr></table></figure>

<p>赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 -R /opt/lampp/htdocs/kodcloud</span><br></pre></td></tr></table></figure>

<p>现在访问 <a href="http://ip/kodcloud">http://ip/kodcloud</a> 即可访问到了，可能有人会说，我不想要这一级目录，并且还要配置域名，关于域名的配置，我们一会再说。</p>
<h2 id="安装-aria2"><a href="#安装-aria2" class="headerlink" title="安装 aria2"></a>安装 aria2</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>aria2 安装脚本源地址：<a href="https://doub.bid/shell-jc4/">https://doub.bid/shell-jc4/</a>  （需科学上网）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget -N --no-check-certificate https://softs.fun/Bash/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上面这个脚本无法下载，尝试使用备用下载：</span></span><br><span class="line"><span class="comment">#wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</span></span><br></pre></td></tr></table></figure>
<p>执行后输入 1 即可安装。</p>
<h3 id="显示端"><a href="#显示端" class="headerlink" title="显示端"></a>显示端</h3><p>创建站点存放目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lampp/htdocs</span><br><span class="line">mkdir aria</span><br><span class="line"><span class="built_in">cd</span> /opt/lampp/htdocs/aria</span><br></pre></td></tr></table></figure>

<p>下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/mayswind/AriaNg/releases/download/0.3.0/aria-ng-0.3.0.zip</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip aria-ng-0.3.0.zip</span><br><span class="line">rm -rf aria-ng-0.3.0.zip</span><br></pre></td></tr></table></figure>


<h2 id="配置域名及-SSL-证书"><a href="#配置域名及-SSL-证书" class="headerlink" title="配置域名及 SSL 证书"></a>配置域名及 SSL 证书</h2><p>阿里有提供免费的 SSL 证书，打开阿里云官网 -&gt; 管理控制台 -&gt; 左侧的安全(云盾) -&gt; CA 证书服务。</p>
<p>填写相应的信息，申请两个即可，我这里申请是 pan.zhaojun1998.com 和 aria.zhaojun1998.com 的证书。</p>
<p>申请后几分钟内会自动通过，然后下载证书。<br><img src="https://cdn.jun6.net/201801041355_479.png"></p>
<p>接下来就是如何将证书上传到服务器的问题了，可以通过前面配置的 kodcloud 云打开 <a href="http://ip/kodcloud">http://ip/kodcloud</a> 将证书上传进去，或 ftp 等方式。（只需要上传 数字.key 和 数字.pem 即可）</p>
<p>最后在 <code>/opt/lampp/apache2</code> 目录下建立一个文件夹 cert，将证书放进来。</p>
<p>然后编辑 /opt/lampp/apache2/conf/httpd.conf，将域名对应上站点路径和证书。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Alias /bitnami/ &quot;/opt/lampp/apache2/htdocs/&quot;</span><br><span class="line">Alias /bitnami &quot;/opt/lampp/apache2/htdocs&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Directory</span> &quot;/<span class="attr">opt</span>/<span class="attr">lampp</span>/<span class="attr">apache2</span>/<span class="attr">htdocs</span>&quot;&gt;</span></span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span>            ## http 自动跳转 https</span><br><span class="line">    ServerName pan.zhaojun1998.com</span><br><span class="line">    RewriteEngine On</span><br><span class="line">    RewriteRule ^/(.*)$ https://pan.zhaojun1998.com/$1 [R=301]</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span>            ## http 自动跳转 https</span><br><span class="line">    ServerName aria.zhaojun1998.com</span><br><span class="line">    RewriteEngine On</span><br><span class="line">    RewriteRule ^/(.*)$ https://aria.zhaojun1998.com/$1 [R=301]</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">virtualhost</span> *<span class="attr">:443</span>&gt;</span>           ## https 配置</span><br><span class="line">        SSLEngine on</span><br><span class="line">        SSLCertificateFile /opt/lampp/apache2/cert/214413124310384.pem </span><br><span class="line">        SSLCertificateKeyFile /opt/lampp/apache2/cert/214413124310384.key</span><br><span class="line">        ServerName pan.zhaojun1998.com</span><br><span class="line">        DocumentRoot /opt/lampp/htdocs/kodcloud</span><br><span class="line"><span class="tag">&lt;/<span class="name">virtualhost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">virtualhost</span> *<span class="attr">:443</span>&gt;</span>			## https 配置</span><br><span class="line">        SSLEngine on</span><br><span class="line">        SSLCertificateFile /opt/lampp/apache2/cert/214298372380384.pem</span><br><span class="line">        SSLCertificateKeyFile /opt/lampp/apache2/cert/214298372380384.key</span><br><span class="line">        ServerName aria.zhaojun1998.com</span><br><span class="line">        DocumentRoot /opt/lampp/htdocs/aria</span><br><span class="line"><span class="tag">&lt;/<span class="name">virtualhost</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置完或，保存，然后重启 xampp:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/lampp/lampp restart</span><br></pre></td></tr></table></figure>


<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="aria-证书配置"><a href="#aria-证书配置" class="headerlink" title="aria 证书配置"></a>aria 证书配置</h3><p>这样基本就完成了，但打开 aria 后发现，无法链接上 aria，原因是因为我们配置了 https 证书，但没有告诉 aria ，下面我们修改 aria 的配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">./aria2.sh</span><br></pre></td></tr></table></figure>

<p>选择主要修改的为以下几项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 下载到 kodcloud 管理员的 home 目录下</span></span><br><span class="line">dir=/opt/lampp/htdocs/kodcloud/data/User/admin/home  </span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置的RPC授权令牌，就是一个认证的密码，防止别人恶意下载</span></span><br><span class="line">rpc-secret=123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用 RPC 服务的 SSL/TLS 加密,</span></span><br><span class="line"><span class="comment"># 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接</span></span><br><span class="line">rpc-secure=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt)</span></span><br><span class="line">rpc-certificate=你的 aria 证书pem路径</span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key)</span></span><br><span class="line">rpc-private-key=你的 aria 证书key路径</span><br></pre></td></tr></table></figure>


<h3 id="aria-kodcloud-权限问题"><a href="#aria-kodcloud-权限问题" class="headerlink" title="aria + kodcloud 权限问题"></a>aria + kodcloud 权限问题</h3><p>aria 是以 root 身份运行的，而 kodcloud 是以 apache 的 daemon 用户运行的。也就是说 aria 下载的文件， kodcloud 只有可读的权限，无法进行删除，修改等操作。</p>
<p>root 用户创建的文件默认是 644 权限，我们将它改为 664 权限，然后将 daemon 用户添加到 root 组即可。</p>
<p>修改 root 用户创建文件的默认权限，将超级用户的 uamsk 修改为 002 即可，这个计算方式有兴趣的自行查阅：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;bashrc     71行是普通用户的更改，73是超级用户的更改</span><br><span class="line">vim &#x2F;etc&#x2F;profile    60行是普通用户的更改，62是超级用户的更改</span><br><span class="line"></span><br><span class="line">source &#x2F;etc&#x2F;bashrc      ##刷新bash配置</span><br><span class="line">source &#x2F;etc&#x2F;profile     ##刷新系统配置</span><br></pre></td></tr></table></figure>

<p>将 daemon 添加到 root 组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -a -G root daemon</span><br></pre></td></tr></table></figure>

<p>重启 xampp 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;opt&#x2F;lampp&#x2F;lampp restart</span><br></pre></td></tr></table></figure>



<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="https://cdn.jun6.net/201801041435_853.png" alt="aria2"><br><img src="https://cdn.jun6.net/201801041435_111.png" alt="kodcloud"></p>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>云盘</tag>
        <tag>离线下载</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1008 Construct Binary Search Tree from Preorder Traversal</title>
    <url>/leetcode-1008/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给定一个前序遍历的数组，还原 <code>二叉搜索树</code>。</p>
<ul>
<li>数组中不存在重复值</li>
</ul>
</blockquote>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[8,5,1,7,10,12] </span><br><span class="line">输出：</span><br><span class="line">        8 </span><br><span class="line">       &#x2F; \ </span><br><span class="line">      5   10 </span><br><span class="line">     &#x2F; \   \  </span><br><span class="line">    1   7   12</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstFromPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; preorder.length; i++) &#123;</span><br><span class="line">            TreeNode temp = stack.peek();</span><br><span class="line">            <span class="keyword">int</span> n = preorder[i];</span><br><span class="line">            <span class="keyword">if</span> (n &lt; temp.val) &#123;</span><br><span class="line">                temp.left = <span class="keyword">new</span> TreeNode(n);</span><br><span class="line">                stack.push(temp.left);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode prev = stack.pop();</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek().val &lt; n) &#123;</span><br><span class="line">                    prev = stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                prev.right = <span class="keyword">new</span> TreeNode(n);</span><br><span class="line">                stack.push(prev.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度 <code>O(n)</code>，空间复杂度 <code>O(n)</code>。</p>
<p>Runtime: 1 ms, faster than 82.12% of Java online submissions for Construct Binary Search Tree from Preorder Traversal.</p>
<p>Memory Usage: 36.8 MB, less than 100.00% of Java online submissions for Construct Binary Search Tree from Preorder Traversal.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1022 Sum of Root To Leaf Binary Numbers</title>
    <url>/leetcode-1022/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉树，每个节点的值只有 0 和 1, 每个根到叶子节点的路径都是一个有效的二进制树, 如: <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, 那么用二进制表示就是 <code>01101</code>, 对应十进制为 <code>13</code>.</p>
<p>对于树中的所有叶子节点, 请返回根节点到这些叶子节点的路径所代表的二进制值的和.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line"></span><br><span class="line">     1</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  0     1</span><br><span class="line"> &#x2F; \   &#x2F; \</span><br><span class="line">0   1 0   1</span><br><span class="line"></span><br><span class="line">返回: 22. </span><br><span class="line">说明:  (100) + (101) + (110) + (111) &#x3D; 4 + 5 + 6 + 7 &#x3D; 22</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>采用深度优先遍历, 从跟节点开始, 到下一层的时候, 将父节点的值向左移动一位, 再加上当前节点的值, 直到根节点为止.</p>
<p>如上图中, <code>1 -&gt; 0 -&gt; 0</code> 这个路径, 从根节点 1 开始, 到第二层, 对 1 左移一位 <code>i = 1 &lt;&lt; 1</code>, 等于 <code>10</code>, 再加上当前节点的值 <code>0</code> 等于 <code>10</code>, 再到下一层, 向左移动一位 <code>i = 10 &lt;&lt; 1</code>, 等于 <code>100</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRootToLeaf</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode node, <span class="keyword">int</span> currentVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            currentVal &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            currentVal += node.val;</span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                result += currentVal;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(node.left, currentVal);</span><br><span class="line">            dfs(node.right, currentVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Sum of Root To Leaf Binary Numbers.<br>Memory Usage: 35.4 MB, less than 100.00% of Java online submissions for Sum of Root To Leaf Binary Numbers.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 104 Maximum Depth of Binary Tree</title>
    <url>/leetcode-104/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉树，返回其树的深度。 最大深度是从根节点到最远叶节点的最长路径上的节点数。</p>
<blockquote>
<p>叶子是没有子节点的节点。</p>
</blockquote>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">返回深度 3.</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMaxDepth(root, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxDepth</span><span class="params">(TreeNode node, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> depth;</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">        <span class="keyword">int</span> leftDepth = getMaxDepth(node.left, depth);</span><br><span class="line">        <span class="keyword">int</span> rightDepth = getMaxDepth(node.right, depth);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> depth = leftDepth &gt; rightDepth ? leftDepth : rightDepth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Depth of Binary Tree.<br>Memory Usage: 38.1 MB, less than 49.96% of Java online submissions for Maximum Depth of Binary Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 108 Convert Sorted Array to Binary Search Tree</title>
    <url>/leetcode-108/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一个从小到大的数组, 构建一颗二叉平衡树, 即每个节点的两个子树的深度不能相差超过 1.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予数组: [-10, -3, 0, 5, 9]</span><br><span class="line"></span><br><span class="line">返回以下树都是符合条件的: </span><br><span class="line">      0</span><br><span class="line">     &#x2F; \</span><br><span class="line">   -3   9</span><br><span class="line">   &#x2F;   &#x2F;</span><br><span class="line"> -10  5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">    &#x2F;  \</span><br><span class="line">  -10   5</span><br><span class="line">    \    \</span><br><span class="line">    -3    9</span><br></pre></td></tr></table></figure>


<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题有点类似于二分查找法, 即对二叉搜索树的反向推导, 每次取数组最中间的节点最为中节点, 左侧为左子树的内容, 右侧为右子树的内容, 直到不再存在子树. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> util.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        node.left = helper(nums, start, mid - <span class="number">1</span>);</span><br><span class="line">        node.right = helper(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Convert Sorted Array to Binary Search Tree.<br>Memory Usage: 35.8 MB, less than 99.88% of Java online submissions for Convert Sorted Array to Binary </p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>数组</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 191 Number of 1 Bits</title>
    <url>/leetcode-191/</url>
    <content><![CDATA[<h1 id="位1的个数"><a href="#位1的个数" class="headerlink" title="位1的个数"></a>位1的个数</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>编写一个函数，输入是一个<strong>无符号整数</strong>，返回其二进制表达式中数字位数为 <code>1</code> 的个数.</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：00000000000000000000000000001011</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：00000000000000000000000010000000</span><br><span class="line">输出：1</span><br><span class="line">解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure>

<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：11111111111111111111111111111101</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>这里用到了位运算, 如数字 5, 二进制位为 <code>101</code>, 那么使用 <code>&amp;</code> 运算, 和 <code>1</code> 进行与运算, 如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  101</span><br><span class="line">&amp; 001</span><br><span class="line">-----</span><br><span class="line">  001</span><br></pre></td></tr></table></figure>

<p>因为 1 只有最后一位为 1, 其他为都是 0, 所以他与任何数进行 <code>&amp;</code> 运算后, 都只会保留这个数的最后一位, 如果运算结果还是 1, 说明这个树的最后一位是 1, 反之为 0.</p>
<p>那就很好解决了, 将 num &amp; 1 后判断为 1, 则计数增加 1, 然后将右移一位 num &gt;&gt;= 1, 以此类推, 直到移位 32 次.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; mask) != <span class="number">0</span>) &#123;</span><br><span class="line">                bits++;</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度 O(1), 空间复杂度 O(1).</p>
</blockquote>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>这个解法有些取巧, 在二进制表示中，数字 <code>n</code> 中最低位的 <code>1</code> 总是对应 <code>n - 1</code> 中的 <code>0</code>. 因此, 将 <code>n</code> 和 <code>n - 1</code> 与运算总是能把 <code>n</code> 中最低位的 <code>1</code> 变成 <code>0</code>, 并保持其他位不变.</p>
<p>如对于数字 10, 和 10 - 1 进行 <code>&amp;</code> 运算:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1010</span><br><span class="line">&amp; 1001</span><br><span class="line">------</span><br><span class="line">  1000</span><br></pre></td></tr></table></figure>

<p>接着对于二进制值 <code>1000</code>, 与 <code>999</code> 进行 <code>&amp;</code> 运算:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1000</span><br><span class="line">&amp;  999</span><br><span class="line">------</span><br><span class="line">  0000</span><br></pre></td></tr></table></figure>

<p>由于每次都把最低位的 <code>1</code> 变为 <code>0</code> 了, 直到为 <code>0</code>, 那么这种个编程变了几次就说明有多少个 <code>1</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            n &amp;= (n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度 O(1), 空间复杂度 O(1). 但此算法效率相对比算法一效率高.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>leetcode</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 226 Invert Binary Tree</title>
    <url>/leetcode-226/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉树，返回其每层节点的平均值.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     7</span><br><span class="line"> &#x2F; \   &#x2F; \</span><br><span class="line">1   3 6   9</span><br><span class="line"></span><br><span class="line">返回:</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  7     2</span><br><span class="line"> &#x2F; \   &#x2F; \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>采用深度优先遍历, 从最底层节点开始, 将每个节点的左右节点进行交换即可.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        TreeNode left = root.left;</span><br><span class="line">        TreeNode right = root.right;</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invertTree(left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invertTree(right);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        root.left = right;</span><br><span class="line">        root.right = left;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Invert Binary Tree.<br>Memory Usage: 33.5 MB, less than 98.89% of Java online submissions for Invert Binary Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 26 Remove Duplicates from Sorted Array</title>
    <url>/leetcode-26/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给定一个有序的 int 数组，使每个元素只出现一次，并返回新的长度。要求在原数组修改，即 O(1) 的空间复杂度。</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>从头开始获取不重复的元素，依次填充到数组的前几位，并返回不重复的元素个数。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[k]) &#123;</span><br><span class="line">                nums[++k] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 7 ms, faster than 82.95% of Java online submissions for Remove Duplicates from Sorted Array.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 27 Remove Element</title>
    <url>/leetcode-27/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给定一个字符串数组，从数组中删除指定值 n，返回删除后的长度 k。（并不用真的删除，元素顺序可以改变，只需要保证返回的前 k 个数字不包含 n 即可。）</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>定义 left 为 0, right 为数组长度 - 1，left 依次向右走，碰到当前元素等于 n 时，将 right 所在的元素覆盖 n 所在的元素，并将 right 左移一位，直到 left 碰到 right。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] == val &amp;&amp; i &lt; len) &#123;</span><br><span class="line">                nums[i] = nums[--len];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 4 ms, faster than 99.11% of Java online submissions for Remove Element.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 299 Bulls and Cows</title>
    <url>/leetcode-299/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>你正和你的朋友一起玩下面的公牛和母牛游戏：你写下一个数字然后让你的朋友猜猜这个数字是多少. 每当你的朋友猜测时, 你提供一个提示, 表明所述猜测中有多少位数与你的密码完全匹配，包括数字和位置(称为”公牛”)以及有多少位数与密码匹配但位于错误的位置(称为”奶牛”)。<br>编写一个函数, 根据秘密数字和朋友的猜测返回提示, 用于 A 表示公牛, B 表示奶牛.</p>
</blockquote>
<p>例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: secret &#x3D; &quot;1807&quot;, guess &#x3D; &quot;7810&quot;</span><br><span class="line"></span><br><span class="line">输出: &quot;1A3B&quot;</span><br><span class="line"></span><br><span class="line">说明: 1 个公牛和 3 个奶牛. 公牛是 8, 奶牛是 0, 1 和 7.</span><br></pre></td></tr></table></figure>

<p>例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: secret &#x3D; &quot;1123&quot;, guess &#x3D; &quot;0111&quot;</span><br><span class="line"></span><br><span class="line">输出: &quot;1A1B&quot;</span><br><span class="line"></span><br><span class="line">说明: The 1st 1 in friend&#39;s guess is a bull, the 2nd or 3rd 1 is a cow.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>刚开始我的想法是依次获取公牛和奶牛的数量, 但奶牛的判断需要 O(n^2) 的时间复杂度, 后面想到, 用所有匹配的数量 - 公牛的数量就是奶牛的数量, 只需要 O(n) 的时间复杂度和 O(1) 的空间复杂度.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] table = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bulls = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c :secret.toCharArray()) &#123;</span><br><span class="line">        table[c - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; guess.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (secret.charAt(i) == guess.charAt(i)) &#123;</span><br><span class="line">            bulls++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (table[guess.charAt(i) - <span class="string">&#x27;0&#x27;</span>]-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            total++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bulls + <span class="string">&quot;A&quot;</span> + (total - bulls)  + <span class="string">&quot;B&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Bulls and Cows.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 338 Counting Bits</title>
    <url>/leetcode-338/</url>
    <content><![CDATA[<h1 id="比特位计数"><a href="#比特位计数" class="headerlink" title="比特位计数"></a>比特位计数</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个非负整数 <code>num</code>. 对于 <code>0 ≤ i ≤ num</code> 范围中的每个数字 <code>i</code>, 计算其二进制数中的 <code>1</code> 的数目并将它们作为数组返回.</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 2</span><br><span class="line">输出: [0,1,1]</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出: [0,1,1,2,1,2]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>此题是 <a href="http://zhaojun.im/leetcode-530/">LeetCode 191 Number of 1 Bits</a> 的拓展版, 可以利用那道题的两种算法, 只不过套个循环, 时间和空间复杂度都是 <code>O(n)</code>.</p>
<p>那两种解法就不说了. 这里说下另一种解法.</p>
<p>这里分为 <strong>2 的倍数</strong> 和 <strong>非 2 的倍数</strong> 两种数.</p>
<p>他们有一个区别就是二进制的最低位是否为 <code>1</code>.</p>
<p><strong>2 的倍数</strong>其二进制最低位都是 <code>0</code>.<br><strong>非 2 的倍数</strong>其二进制最低位都是 <code>1</code>.</p>
<p>除 2 或右移一位后, 等于是去掉最低位, 那么既然 2 的倍数最后一位都是 <code>0</code>, 所以对于 <strong>2 的倍数</strong> 除 2 或右移一位后, 数字 1 的个数并不会变. </p>
<p>那么对于<strong>非 2 的倍数</strong> <code>n</code>, <code>n</code> 肯定比 <code>n - 1</code> 的二进制中 <code>1</code> 的个数多一位. 如 n =  <code>1111</code>, n - 1 = <code>1110</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                arr[i] = arr[i &gt;&gt; <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[i] = arr[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度 O(n), 空间复杂度 O(n).</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>leetcode</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 344 Reverse String</title>
    <url>/leetcode-344/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>翻转字符串。</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>两个指针，分别在首和尾，都向中间走，直到首超过尾。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = chars.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = chars[i];</span><br><span class="line">            chars[i] = chars[j];</span><br><span class="line">            chars[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 2 ms, faster than 79.62% of Java online submissions for Reverse String.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 429 N-ary Tree Level Order Traversal</title>
    <url>/leetcode-429/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗 <code>N 叉树</code>，返回所有节点的层级遍历，即从左至右(逐层).</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树:</span><br><span class="line"></span><br><span class="line">         1 </span><br><span class="line">       &#x2F; | \ </span><br><span class="line">      3  2  4</span><br><span class="line">     &#x2F; \ </span><br><span class="line">    5   6 </span><br><span class="line"></span><br><span class="line">返回:</span><br><span class="line">[</span><br><span class="line">     [1]，</span><br><span class="line">     [3,2,4]</span><br><span class="line">     [5,6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>该题的要点是保持左右顺序，和记录当前层数，保持顺序的意思是指要将树某一层的数据从左至右放置到数组中，记录层数就更不用说了，每一层对应一个数组，要能区分数据的层级。</p>
<p>保持顺序这一点我们可以使用队列来实现，先进先出，获取到某一节点的左右子节点后，将其所有子节点依次添加到队列中，这样可以保证从左至右的顺序。</p>
<p>记录层级这一点，可以先记录队列中所有的元素，这个个数就是当前层的个数，哪怕在遍历过程中向队列中再添加了下一层的东西，也无所谓，因为我们知道遍历到多少个就应该换层了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(Node root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Queue&lt;Node&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">            queue.add(root);</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">int</span> size = queue.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                    Node node = queue.remove();</span><br><span class="line">                    list.add(node.val);</span><br><span class="line">                    <span class="keyword">if</span> (node.children == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.addAll(node.children);</span><br><span class="line">                &#125;</span><br><span class="line">                result.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 2 ms, faster than 93.07% of Java online submissions for N-ary Tree Level Order Traversal.<br>Memory Usage: 46.8 MB, less than 86.23% of Java online submissions for N-ary Tree Level Order Traversal.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>队列</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>N叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 461 Hamming Distance</title>
    <url>/leetcode-461/</url>
    <content><![CDATA[<h1 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>给出两个整数 x 和 y，计算它们之间的汉明距离。</p>
<p>注意：<br>0 ≤ x, y &lt; 231.</p>
<p>示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: x = <span class="number">1</span>, y = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line"><span class="number">1</span>   (<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span><br><span class="line"><span class="number">4</span>   (<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>)</span><br><span class="line">       ↑   ↑</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>解法一可是基于 <a href="http://zhaojun.im/leetcode-191/#%E8%A7%A3%E6%B3%95%E4%B8%80">LeetCode 191 Number of 1 Bits</a> 中的解法二.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &amp; <span class="number">1</span>) != (y &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度 O(1), 空间复杂度 O(1).</p>
</blockquote>
<p>0010<br>1000</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>解法二可是基于 <a href="http://zhaojun.im/leetcode-191/#%E8%A7%A3%E6%B3%95%E4%BA%8C">LeetCode 191 Number of 1 Bits</a> 中的解法二.</p>
<p>这里使用到了异或, 他的运算逻辑为参与运算的两个二进制位同号, 则结果为 0, 异号则为 1， 即 <code>0 ∧ 0 ＝ 0</code>, <code>0 ∧ 1 ＝ 1</code>, <code>1 ^ 0 = 1</code>, <code>1 ∧ 1 ＝ 0</code>.</p>
<p>这个规则很符合我们这道题, 两个数异或的结果的二进制位中, 1 的数量就是本题的解.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> z = x ^ y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">            z = z &amp; (z - <span class="number">1</span>);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度 O(1), 空间复杂度 O(1). 但此解法相对解法一更快一些.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>leetcode</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 520 Detect Capital</title>
    <url>/leetcode-520/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给与一个单词，判断其大写字母的使用是否正确，即每个字母都是大写或都是小写，或首字母大写。</p>
</blockquote>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;USA&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;FlaG&quot;</span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>定义两个变量，记录小写字母个数和大写字母个数，然后判断条件是否符合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">detectCapitalUse</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> lower = <span class="number">0</span>, upper = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLowerCaseLetter(chars[i])) &#123;</span><br><span class="line">                lower++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                upper++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lower == chars.length || upper == chars.length ||</span><br><span class="line">                (isUpperCaseLetter(chars[<span class="number">0</span>]) &amp;&amp; lower == chars.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUpperCaseLetter</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c &gt;= <span class="number">65</span> &amp;&amp; c &lt;= <span class="number">90</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLowerCaseLetter</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c &gt;= <span class="number">97</span> &amp;&amp; c &lt;= <span class="number">122</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 12 ms, faster than 98.36% of Java online submissions for Detect Capital.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 530 Minimum Absolute Difference in BST</title>
    <url>/leetcode-530/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗非负二叉搜索树, 返回任意两个节点之间的最小相差值. </p>
<blockquote>
<p>注: 树至少有两个节点.</p>
</blockquote>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     4</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">返回: 1 (1 和 2 之间相差 1).</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>因为是一颗二叉搜索树, 所以采用中序遍历可以得到所有值从小到大的排列, 那么将每个节点与上个节点的值 <code>prev</code> 进行比较得出相差值 <code>answer</code>, 判断相差值与上个相差值, 将更小的存起来. 直到遍历完整棵树.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> prev = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> answer = Integer.MAX_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            getMinimumDifference(root.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev != -<span class="number">1</span>) &#123;</span><br><span class="line">            answer = Math.min(answer, root.val - prev);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        prev = root.val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            getMinimumDifference(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 1 ms, faster than 95.95% of Java online submissions for Minimum Absolute Difference in BST.<br>Memory Usage: 38.4 MB, less than 97.37% of Java online submissions for Minimum Absolute Difference in BST.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 538 Convert BST to Greater Tree</title>
    <url>/leetcode-538/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉搜索树，每个节点都加上大于他的所有节点的和, 如节点 3, 有两个节点大于他, 分别是 10, 15, 那么节点 3 的值就要变为: 3 + 10 + 15 = 28.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line"></span><br><span class="line">     5</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     13</span><br><span class="line"></span><br><span class="line">返回树:</span><br><span class="line">     18</span><br><span class="line">    &#x2F;   \</span><br><span class="line">  20     13</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题很巧妙, 因为是一颗二叉搜索树, 所以只有所有右子树才会比当前节点大, 那么当前节点加上<strong>所有右子树的和</strong>即可, 根据这个思路, 我们可以采用后序遍历, 根据 <code>右 -&gt; 中 -&gt; 左</code> 的顺序, 所以我们总是能先得到 <strong>所有右字树的和</strong>, 然后到 <strong>中</strong>, 使用 <strong>中 = 中 + 右</strong> 即可. 这时的 <strong>中</strong> 就又称为最大的节点了.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">convertBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        convertBST(root.right);</span><br><span class="line"></span><br><span class="line">        root.val += sum;</span><br><span class="line">        sum = root.val;</span><br><span class="line"></span><br><span class="line">        convertBST(root.left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Convert BST to Greater Tree.<br>Memory Usage: 37.4 MB, less than 99.66% of Java online submissions for Convert BST to Greater Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>后序遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 557 Reverse Words in a String III</title>
    <url>/leetcode-557/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给定一个字符串, 翻转字符串中的每个单词, 每个单词以空格分隔, 保留空格和初始单词顺序。</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>首先按照空格对字符串进行分隔，然后将每个单词进行翻转后再拼接回字符串即可，需要注意拼接时记得加空格，但最后一个单词不需要加。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        String[] strs = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = chars.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = chars[i];</span><br><span class="line">                chars[i] = chars[j];</span><br><span class="line">                chars[j] = c;</span><br><span class="line">            &#125;</span><br><span class="line">            result.append(<span class="keyword">new</span> String(chars)).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.substring(<span class="number">0</span>, result.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 6 ms, faster than 93.75% of Java online submissions for Reverse Words in a String III.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 559 Maximum Depth of N-ary Tree</title>
    <url>/leetcode-559/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一颗 <code>N 叉树</code> 的根节点，返回树的深度.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line">         1 </span><br><span class="line">       &#x2F; | \ </span><br><span class="line">      3  2  4</span><br><span class="line">     &#x2F; \ </span><br><span class="line">    5   6 </span><br><span class="line">返回深度 3.</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>采用 <code>DFS (深度优先算法)</code>，代码比较简单，不再赘言。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node n : root.children)&#123;</span><br><span class="line">            depth = Math.max(depth, maxDepth(n) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 1 ms, faster than 99.56% of Java online submissions for Maximum Depth of N-ary Tree.<br>Memory Usage: 49.8 MB, less than 5.41% of Java online submissions for Maximum Depth of N-ary Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>DFS</tag>
        <tag>N叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 589 N-ary Tree Preorder Traversal</title>
    <url>/leetcode-589/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一颗 <code>N 叉树</code> 的根节点，返回前序遍历后的数组.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line">         1 </span><br><span class="line">       &#x2F; | \ </span><br><span class="line">      3  2  4</span><br><span class="line">     &#x2F; \ </span><br><span class="line">    5   6 </span><br><span class="line">将其前序遍历返回: [1,3,5,6,2,4].</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>和二叉树的前序遍历差不多，需要注意处理好子节点的顺序即可。</p>
<span id="more"></span>

<p>非递归解法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = root.children.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                stack.add(root.children.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归解法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        list.add(root.val);</span><br><span class="line">        <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">            preorder(child);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for N-ary Tree Preorder Traversal.</p>
<p>Memory Usage: 47.9 MB, less than 51.19% of Java online submissions for N-ary Tree Preorder Traversal.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>N叉树</tag>
        <tag>前序遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 590 N-ary Tree Postorder Traversal</title>
    <url>/leetcode-590/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一颗 <code>N 叉树</code> 的根节点，返回后序遍历后的数组.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line">         1 </span><br><span class="line">       &#x2F; | \ </span><br><span class="line">      3  2  4</span><br><span class="line">     &#x2F; \ </span><br><span class="line">    5   6 </span><br><span class="line">将其后序遍历返回: [5,6,3,2,4,1].</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>和二叉树的中序遍历差不多，需要注意处理好子节点的顺序即可。</p>
<span id="more"></span>

<p>非递归解法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">         List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            Node node = stack.peek();</span><br><span class="line">            List&lt;Node&gt; children = node.children;</span><br><span class="line">            <span class="keyword">if</span> (children != <span class="keyword">null</span> &amp;&amp; children.size() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = children.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    stack.add(children.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                list.add(stack.pop().val);</span><br><span class="line">            &#125;</span><br><span class="line">            node.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归解法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">            postorder(child);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        list.add(root.val);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for N-ary Tree Postorder Traversal.<br>Memory Usage: 48.2 MB, less than 40.66% of Java online submissions for N-ary Tree Postorder Traversal.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>N叉树</tag>
        <tag>后序遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 606 Construct String from Binary Tree</title>
    <url>/leetcode-606/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉树，根据前序遍历构建一个字符串, 不过需要在每个元素和他的子元素的外层用 <code>()</code> 包住, 并且需要你不会影响字符串和原始二叉树之间一一对应关系的空括号对.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line"></span><br><span class="line">     1</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     3</span><br><span class="line"> &#x2F;</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">全部返回应该是: &#96;1(2(4)())(3()())&#96;.</span><br><span class="line">省略掉不必要的括号对后的结果为: &#96;1(2(4))(3)&#96;.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">给予树：</span><br><span class="line">     1</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     3</span><br><span class="line">   \  </span><br><span class="line">    4 </span><br><span class="line"></span><br><span class="line">返回: &quot;1(2()(4))(3)&quot;</span><br></pre></td></tr></table></figure>



<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>采用深度优先遍历, 需要注意特殊情况: 当一个节点有左子树, 但没有右子树时, 可以省略右子树的 <code>()</code>. 当一个节点有右子树, 但没有左子树, 就不能省略左子树的 <code>()</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tree2str</span><span class="params">(TreeNode t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t.left == <span class="keyword">null</span> &amp;&amp; t.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t.val + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="keyword">null</span> &amp;&amp; t.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t.val + <span class="string">&quot;(&quot;</span> + tree2str(t.left) + <span class="string">&quot;)&quot;</span> + <span class="string">&quot;(&quot;</span> + tree2str(t.right) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t.val + <span class="string">&quot;(&quot;</span> + tree2str(t.left) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> t.val + <span class="string">&quot;()(&quot;</span> + tree2str(t.right) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 6 ms, faster than 84.71% of Java online submissions for Construct String from Binary Tree.<br>Memory Usage: 37.6 MB, less than 98.36% of Java online submissions for Construct String from Binary Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 344 Merge Two Binary Trees</title>
    <url>/leetcode-617/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>合并两颗二叉树, 合并规则是相同位置的值进行相加, 返回生成后二叉树的根节点.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">	Tree 1                     Tree 2                  </span><br><span class="line">          1                         2                             </span><br><span class="line">         &#x2F; \                       &#x2F; \                            </span><br><span class="line">        3   2                     1   3                        </span><br><span class="line">       &#x2F;                           \   \                      </span><br><span class="line">      5                             4   7                  </span><br><span class="line">输出: </span><br><span class="line">	     3</span><br><span class="line">	    &#x2F; \</span><br><span class="line">	   4   5</span><br><span class="line">	  &#x2F; \   \ </span><br><span class="line">	 5   4   7</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>基本思路是将两棵树, 合并到左树上, 基本规则是只有当 <code>tree1</code> 和 <code>tree2</code> 相同位置的节点都不为空时, 才能进行相加操作, 当 <code>tree1</code> 为空时, 把 <code>tree2</code> 的节点<strong>嫁接</strong>过来, 当 <code>tree2</code> 为空时, 保留 <code>tree1</code> 即可. 以此类推, 把每个节点都看成根节点即可.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t1.val += t2.val;</span><br><span class="line">        t1.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">        t1.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Two Binary Trees.<br>Memory Usage: 41.2 MB, less than 78.32% of Java online submissions for Merge Two Binary Trees.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 637 Average of Levels in Binary Tree</title>
    <url>/leetcode-637/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉树，返回其每层节点的平均值.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">返回: [3, 14.5, 11]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>采用广度优先遍历, 遍历每一行的数据, 相加并除以每一层的个数即可.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Double&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node = queue.remove();</span><br><span class="line">                sum += node.val;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(sum / size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 2 ms, faster than 99.14% of Java online submissions for Average of Levels in Binary Tree.<br>Memory Usage: 39.2 MB, less than 99.96% of Java online submissions for Average of Levels in Binary Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 654 Maximum Binary Tree</title>
    <url>/leetcode-654/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给定一个整数数组，生成一棵 <code>最大二叉树</code>，规则是数组中的最大值为根节点，然后分割出最大值左侧的子数组再构造 <code>最大二叉树</code>，最大值的右侧也构造成 <code>最大二叉树</code>。</p>
</blockquote>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,2,1,6,0,5]</span><br><span class="line">输出: 返回表示以下树的根节点:</span><br><span class="line"></span><br><span class="line">      6</span><br><span class="line">    &#x2F;   \</span><br><span class="line">   3     5</span><br><span class="line">    \    &#x2F; </span><br><span class="line">     2  0   </span><br><span class="line">       \</span><br><span class="line">        1</span><br></pre></td></tr></table></figure>



<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>根据题意，是经典的分而治之的题目，用递归就可以很简单的实现：</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> maxIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (num &gt; max) &#123;</span><br><span class="line">                max = num;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(max);</span><br><span class="line">        node.left = constructMaximumBinaryTree(Arrays.copyOfRange(nums, <span class="number">0</span>, maxIndex));</span><br><span class="line">        node.right = constructMaximumBinaryTree(Arrays.copyOfRange(nums, maxIndex + <span class="number">1</span>, len));</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 6 ms, faster than 69.99% of Java online submissions for Maximum Binary Tree.</p>
<p>Memory Usage: 39.1 MB, less than 88.96% of Java online submissions for Maximum Binary Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 657 Robot Return to Origin</title>
    <url>/leetcode-657/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>其实就是给一个字符串, 每个字符包含 “U”、”D”、”L”、”R”, 分别表示上下左右, 表示机器人向这个位置走一步, 判断最终是否机器人是否还在原来的位置。</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题很简单，只需要假设当前节点是 <code>0, 0</code>，定义两个变量, <code>i</code> 和 <code>j</code>，默认值都为 0，每当向上 <code>i + 1</code>，向下 <code>i - 1</code>，向右 <code>j + 1</code>，向左 <code>j - 1</code>。最终只需要判断 <code>i</code> 和 <code>j</code> 是否都等于 0 即可。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeCircle</span><span class="params">(String moves)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = moves.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;U&#x27;</span>) &#123;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">                i -= <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                j -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 8 ms, faster than 97.27% of Java online submissions for Robot Return to Origin.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 669 Trim a Binary Search Tree</title>
    <url>/leetcode-669/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定二叉搜索树以及 <code>L</code>和 <code>R</code> 最低和最高边界作为修剪树，使其所有元素都在[L, R]（R&gt; = L）. 您可能需要更改树的根，因此结果应返回修剪后的二叉搜索树的新根。</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树:</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  0   2</span><br><span class="line"></span><br><span class="line">  L &#x3D; 1</span><br><span class="line">  R &#x3D; 2</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">    1</span><br><span class="line">      \</span><br><span class="line">       2</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树:</span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  0   4</span><br><span class="line">   \</span><br><span class="line">    2</span><br><span class="line">   &#x2F;</span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line">  L &#x3D; 1</span><br><span class="line">  R &#x3D; 3</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">      3</span><br><span class="line">     &#x2F; </span><br><span class="line">   2   </span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>采用深度优先遍历, 如果当前节点的值, 在区间内, 则正常返回, 如果不在区间内, 则将当前节点删除, 并将左子树或右子树嫁接到当前节点.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">trimBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        root.left = trimBST(root.left, L, R);</span><br><span class="line">        root.right = trimBST(root.right, L, R);</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt;= R &amp;&amp; root.val &gt;= L) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; L) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Trim a Binary Search Tree.<br>Memory Usage: 36.9 MB, less than 98.26% of Java online submissions for Trim a Binary Search Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 700 Search in a Binary Search Tree</title>
    <url>/leetcode-700/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给定一颗 <code>二叉搜索树</code> 的根节点，和一个要插入的值，将值插入进去，并返回根节点</p>
<ul>
<li>保证原树中不存在新值</li>
<li>只要保证返回的树同样也是 <code>二叉搜索树</code> 即可</li>
</ul>
</blockquote>
<p>例: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予一棵树:</span><br><span class="line">        4</span><br><span class="line">       &#x2F; \</span><br><span class="line">      2   7</span><br><span class="line">     &#x2F; \</span><br><span class="line">    1   3</span><br></pre></td></tr></table></figure>

<p>对于搜索值: 2, 你应该返回以下子树:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  2     </span><br><span class="line"> &#x2F; \   </span><br><span class="line">1   3</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>因为是二叉搜索树, 所以根据二叉搜索树的规则遍历即可.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">searchBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val &lt; val) &#123;</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val) &#123;</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in a Binary Search Tree.</p>
<p>Memory Usage: 40.4 MB, less than 17.60% of Java online submissions for Search in a Binary Search Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 701 Insert into a Binary Search Tree</title>
    <url>/leetcode-701/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给定一颗 <code>二叉搜索树</code> 的根节点，和一个要插入的值，将值插入进去，并返回根节点</p>
<ul>
<li>保证原树中不存在新值</li>
<li>只要保证返回的树同样也是 <code>二叉搜索树</code> 即可</li>
</ul>
</blockquote>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树：</span><br><span class="line">        4 </span><br><span class="line">       &#x2F; \ </span><br><span class="line">      2   7 </span><br><span class="line">     &#x2F; \ </span><br><span class="line">    1   3 </span><br><span class="line">并且要插入的值：5</span><br></pre></td></tr></table></figure>

<p>您可以返回此 <code>二叉搜索树</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     7</span><br><span class="line"> &#x2F; \   &#x2F;</span><br><span class="line">1   3 5</span><br></pre></td></tr></table></figure>

<p>这棵树也有效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     5</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     7</span><br><span class="line"> &#x2F; \   </span><br><span class="line">1   3</span><br><span class="line">     \</span><br><span class="line">      4</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>因为是二叉搜索树，所以依次判断新值与每个节点的大小即可，大于当前节点，则判断此节点的右节点与新节点。小于当前节点，则判断此节点的左节点与新节点，直到子节点为空，那么再根据此节点的大小选择放到左侧还是右侧。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Tree Root can not be empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode current = root;</span><br><span class="line"></span><br><span class="line">        TreeNode preNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            preNode = current;</span><br><span class="line">            <span class="keyword">if</span> (current.val &lt; val) &#123;</span><br><span class="line">                current = current.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.val &gt; val)&#123;</span><br><span class="line">                current = current.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preNode.val &lt; val) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            preNode.right = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            preNode.left = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Insert into a Binary Search Tree.</p>
<p>Memory Usage: 39.8 MB, less than 94.61% of Java online submissions for Insert into a Binary Search Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 709 To Lower Case</title>
    <url>/leetcode-709/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>传入字符串，将其小写形式。</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>根据 <code>ASCII</code> 码判断并返回即可，大写 A - Z 为 065 - 090，小写 a - z 为 097 - 122，正好相隔 32，当为大写时，将 ASCII 码 + 32 即可。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = chars[i];</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="number">65</span> &amp;&amp; c &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">                chars[i] = (c += <span class="number">32</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for To Lower Case.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 783 Minimum Distance Between BST Nodes</title>
    <url>/leetcode-783/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉搜索树, 返回任意两个节点之间的最小相差值.</p>
<blockquote>
<p>注: 树至少有两个节点.</p>
</blockquote>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     4</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">返回: 1 (1 和 2 之间相差 1).</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题很像: <a href="http://www.zhaojun.im/leetcode-938/">Minimum Absolute Difference in BST</a>, 解法甚至可以通用.</p>
<p>因为是一颗二叉搜索树, 所以采用中序遍历可以得到所有值从小到大的排列, 那么将每个节点与上个节点的值 <code>prev</code> 进行比较得出相差值 <code>answer</code>, 判断相差值与上个相差值, 将更小的存起来. 直到遍历完整棵树.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> prev = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> answer = Integer.MAX_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDiffInBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            minDiffInBST(root.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev != -<span class="number">1</span>) &#123;</span><br><span class="line">            answer = Math.min(answer, root.val - prev);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        prev = root.val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            minDiffInBST(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Minimum Distance Between BST Nodes.<br>Memory Usage: 33.5 MB, less than 100.00% of Java online submissions for Minimum Distance Between BST Nodes.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 80 Remove Duplicates from Sorted Array II</title>
    <url>/leetcode-80/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给定一个数组，删除其中的重复元素，使重复项最多出现两次，然后返回新的长度，要求 O(1) 空间复杂度。</p>
</blockquote>
<p>例 1:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">给予 nums = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">你的函数应该返回 length = <span class="number">5</span>,前五个元素分别为 <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3.</span></span><br></pre></td></tr></table></figure>

<p>例 2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">给予 nums = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">你的函数应该返回 length = <span class="number">7</span>,前五个元素分别为 <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3.</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>和 <a href="http://zhaojun.im/leetcode-26/">LeetCode 26 Remove Duplicates from Sorted Array</a> 这道题比较类似。<br>定义变量 k，表示待修改的元素位置，默认为 0，然后遍历后面的元素判断符合条件时，覆盖 k，然后 k 向后移动一位。<br>判断条件为：</p>
<ul>
<li>遍历的元素 n 不等于元素 k，也就代表不重复</li>
<li>遍历的元素 n 等于元素 k，但不等于 k - 1。则表示已经有两个重复元素了</li>
<li>对于第二点，需要注意，当 k = 0 时，没有 k - 1。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[k] || k == <span class="number">0</span> || (nums[i] == nums[k] &amp;&amp; nums[i] != nums[k - <span class="number">1</span>])) &#123;</span><br><span class="line">                nums[++k] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 6 ms, faster than 95.36% of Java online submissions for Remove Duplicates from Sorted Array II.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 804 Unique Morse Code Words</title>
    <url>/leetcode-804/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给予一个编码表，26 个字母分别对应一个编码，给定一组单词，获取单词的所有字母组合后的编码中不重复的数量。</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>首先为每个单词的每个字符进行转码, 将转码后的数据放到 Set 集合中, 最后返回 Set 的长度。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] codes = &#123;<span class="string">&quot;.-&quot;</span>, <span class="string">&quot;-...&quot;</span>, <span class="string">&quot;-.-.&quot;</span>, <span class="string">&quot;-..&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;..-.&quot;</span>, <span class="string">&quot;--.&quot;</span>, <span class="string">&quot;....&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;.---&quot;</span>, <span class="string">&quot;-.-&quot;</span>, <span class="string">&quot;.-..&quot;</span>, <span class="string">&quot;--&quot;</span>, <span class="string">&quot;-.&quot;</span>, <span class="string">&quot;---&quot;</span>, <span class="string">&quot;.--.&quot;</span>, <span class="string">&quot;--.-&quot;</span>, <span class="string">&quot;.-.&quot;</span>, <span class="string">&quot;...&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;..-&quot;</span>, <span class="string">&quot;...-&quot;</span>, <span class="string">&quot;.--&quot;</span>, <span class="string">&quot;-..-&quot;</span>, <span class="string">&quot;-.--&quot;</span>, <span class="string">&quot;--..&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniqueMorseRepresentations</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; hashSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            hashSet.add(convertCode(word));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashSet.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertCode</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line"></span><br><span class="line">        String code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : chars) &#123;</span><br><span class="line">            code += codes[ch - <span class="number">97</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 4 ms, faster than 100.00% of Java online submissions for Unique Morse Code Words.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 872 Leaf-Similar Trees</title>
    <url>/leetcode-872/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定两颗二叉树, 判断其叶子节点的序列是否是一致的.</p>
<p>例: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">树1:</span><br><span class="line">        4</span><br><span class="line">       &#x2F; \</span><br><span class="line">      2   7</span><br><span class="line">     &#x2F; \</span><br><span class="line">    1   3</span><br><span class="line"></span><br><span class="line">叶子节点序列为 [1, 3, 7]</span><br><span class="line"></span><br><span class="line">树2:</span><br><span class="line">        9</span><br><span class="line">       &#x2F; \</span><br><span class="line">      6   7</span><br><span class="line">     &#x2F; \</span><br><span class="line">    1   3</span><br><span class="line"></span><br><span class="line">叶子节点序列为 [1, 3, 7]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">两棵树叶子节点序列相同, 返回 true.</span><br></pre></td></tr></table></figure>


<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>本题主要考察的是对树的遍历，遍历获取所有叶子节点，并比较是否一致即可。下面给出递归和非递归两种实现方式。</p>
<p>递归写法 (DFS):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">leafSimilar</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfs(root1, list1);</span><br><span class="line">        dfs(root2, list2);</span><br><span class="line">        <span class="keyword">return</span> list1.equals(list2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, ArrayList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(root.val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(root.left, list);</span><br><span class="line">        dfs(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Leaf-Similar Trees.</p>
<p>Memory Usage: 37.3 MB, less than 6.16% of Java online submissions for Leaf-Similar Trees.</p>
</blockquote>
<p>非递归写法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">leafSimilar</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        pushLeafRoot(root1, list1);</span><br><span class="line">        pushLeafRoot(root2, list2);</span><br><span class="line">        <span class="keyword">return</span> list1.equals(list2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushLeafRoot</span><span class="params">(TreeNode root, ArrayList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                list.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 1 ms, faster than 82.41% of Java online submissions for Leaf-Similar Trees.</p>
<p>Memory Usage: 36.7 MB, less than 71.02% of Java online submissions for Leaf-Similar Trees.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 897 Increasing Order Search Tree</title>
    <url>/leetcode-897/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一颗二叉搜索树，重新进行排序，使其根节点是最小值，且每个节点都没有左子树，只有一个右子树，最终还要保持该树是一颗二叉搜索树.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例 1:</span><br><span class="line">给予树:</span><br><span class="line"></span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">    3    6</span><br><span class="line">   &#x2F; \    \</span><br><span class="line">  2   4    8</span><br><span class="line"> &#x2F;        &#x2F; \ </span><br><span class="line">1        7   9</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line"> 1</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">    \</span><br><span class="line">     3</span><br><span class="line">      \</span><br><span class="line">       4</span><br><span class="line">        \</span><br><span class="line">         5</span><br><span class="line">          \</span><br><span class="line">           6</span><br><span class="line">            \</span><br><span class="line">             7</span><br><span class="line">              \</span><br><span class="line">               8</span><br><span class="line">                \</span><br><span class="line">                 9  </span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>使用中序遍历即可。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode result = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> TreeNode dummy = result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">increasingBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        increasingBST(root.left);</span><br><span class="line">        dummy.right = <span class="keyword">new</span> TreeNode(root.val);</span><br><span class="line">        dummy = dummy.right;</span><br><span class="line">        increasingBST(root.right);</span><br><span class="line">        <span class="keyword">return</span> result.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 2 ms, faster than 99.97% of Java online submissions for Increasing Order Search Tree.</p>
<p>Memory Usage: 44.9 MB, less than 59.39% of Java online submissions for Increasing Order Search Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>二叉搜索树</tag>
        <tag>中序遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 917 Reverse Only Letters</title>
    <url>/leetcode-917/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>反转字符串，但只反转字符串中的字母，即 <code>a-z</code>，<code>A-Z</code>。其他的字符保持原位。</p>
</blockquote>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;ab-cd&quot;</span><br><span class="line">Output: &quot;dc-ba&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;a-bC-dEf-ghIj&quot;</span><br><span class="line">Output: &quot;j-Ih-gfE-dCba&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;Test1ng-Leet&#x3D;code-Q!&quot;</span><br><span class="line">Output: &quot;Qedo1ct-eeLg&#x3D;ntse-T!&quot;</span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>将字符串转为字符数组，用两个指针，从两端向中间走, 依次找下一个字母进行交换，直到两个指针相碰撞。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseOnlyLetters</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = S.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = chars.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; !isLetter(chars[i])) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; !isLetter(chars[j])) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">char</span> temp = chars[i];</span><br><span class="line">                chars[i] = chars[j];</span><br><span class="line">                chars[j] = temp;</span><br><span class="line">                i++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLetter</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (c &gt;= <span class="number">65</span> &amp;&amp; c &lt;= <span class="number">90</span>) || (c &gt;= <span class="number">97</span> &amp;&amp; c &lt;= <span class="number">122</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 5 ms, faster than 93.93% of Java online submissions for Reverse Only Letters.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 929 Unique Email Addresses</title>
    <url>/leetcode-929/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>给与一组 <code>email</code> 地址，<code>email</code> 分为两部分， <code>@</code> 前我们称为 <code>local name</code>, <code>@</code> 后称为 <code>domain name</code>。现规定只可以出现小写字母和字符 <code>.</code>、<code>+</code>。<br>其中 <code>.</code> 可以忽略, 如 <code>alice.z@leetcode.com</code> 和 <code>al.icez@leetcode.com</code> 都表示 <code>alicez@leetcode.com</code>。<br><code>+</code> 出现在 <code>local name</code> 中时，将忽略第一个 <code>+</code> 后的所有内容，如 <code>m.y+name@email.com</code> 和 <code>m.y@email.com</code> 都表示 <code>my@email.com</code>。</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>按照题意，先取 <code>local name</code> 的第一个字符到第一个加号之前的内容, 然后删除其中的所有 <code>.</code>, 并与 <code>@</code> 后的 <code>domain name</code> 拼接, 将结果放入 Set 集合中，最后返回 Set 的长度即可。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numUniqueEmails</span><span class="params">(String[] emails)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String email : emails) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = email.indexOf(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> end = email.indexOf(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">            String localName = email.substring(<span class="number">0</span>, start);</span><br><span class="line">            localName = localName.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            String domainName = email.substring(end, email.length());</span><br><span class="line">            set.add(localName + domainName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 35 ms, faster than 63.93% of Java online submissions for Unique Email Addresses.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 938 Range Sum of BST</title>
    <url>/leetcode-938/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉搜索树, 返回区间 L - R 之间的所有值的总和. 二叉搜索树中没有重复值.</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树, L &#x3D; 3, R &#x3D; 8:</span><br><span class="line"></span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">    3    6</span><br><span class="line">   &#x2F; \    \</span><br><span class="line">  2   4    8</span><br><span class="line"> &#x2F;        &#x2F; \ </span><br><span class="line">1        7   9</span><br><span class="line"></span><br><span class="line">返回: 3 + 4 + 5 + 6 + 7 + 8 &#x3D; 33.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>因为是一颗二叉搜索树, 所以我们采用中序遍历即可得到从小到大的值, 不过既然知道区间, 那么我们可以过滤到一些没必要的查找, 如上面的例子, 查到到了节点 3, 根据二叉搜索树的规则: <strong>当前节点的所有左子树的值都比他小</strong>, 且我们知道这棵树中没有重复值, 那么久没必要将他的左子树再进行递归判断了, 右子树同理.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; L &amp;&amp; root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rangeSumBST(root.left, L, R);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root.val &gt;= L &amp;&amp; root.val &lt;= R) &#123;</span><br><span class="line">            i += root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; R &amp;&amp; root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rangeSumBST(root.right, L, R);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Range Sum of BST.<br>Memory Usage: 43.1 MB, less than 99.61% of Java online submissions for Range Sum of BST</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 965 Univalued Binary Tree</title>
    <url>/leetcode-965/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p> 判断二叉树是否是 <code>唯一二叉树</code>.  当树中所有节点的值都一样时，我们认为他是一颗 <code>唯一二叉树</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予一棵树:</span><br><span class="line">        1</span><br><span class="line">       &#x2F; \</span><br><span class="line">      1   1</span><br><span class="line">     &#x2F; \</span><br><span class="line">    1   1</span><br><span class="line">应当返回 &#96;true&#96;</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予一棵树:</span><br><span class="line">        1</span><br><span class="line">       &#x2F; \</span><br><span class="line">      1   1</span><br><span class="line">     &#x2F; \</span><br><span class="line">    5   1</span><br><span class="line">应当返回 &#96;false&#96;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题其实只是考一下对二叉树的遍历，我比较习惯用栈来实现，而不是递归，所以有以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUnivalTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = root.val;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (node.val != i) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 1 ms, faster than 83.52% of Java online submissions for Univalued Binary Tree.</p>
<p>Memory Usage: 35.9 MB, less than 92.59% of Java online submissions for Univalued Binary Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 993 Cousins in Binary Tree</title>
    <url>/leetcode-993/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给予一颗二叉树，和两个节点的值，判断这两个节点是否是<strong>堂兄弟</strong>，即在同一层，但<strong>父节点不同</strong>。</p>
<p>例 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给予树, x &#x3D; 3, y &#x3D; 4：</span><br><span class="line"></span><br><span class="line">     1</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     3</span><br><span class="line"> &#x2F;</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">返回 false.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">给予树, x &#x3D; 5, y &#x3D; 4：</span><br><span class="line"></span><br><span class="line">     1</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     3</span><br><span class="line">   \     \</span><br><span class="line">    4     5</span><br><span class="line"></span><br><span class="line">返回 true.</span><br></pre></td></tr></table></figure>


<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>采用广度优先遍历, 要点是记录节点与父节点的对应关系, 然后判断是否在同一层, 这里采用队列来实现.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCousins</span><span class="params">(TreeNode root, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; valParentMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line"></span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node = queue.remove();</span><br><span class="line">                list.add(node.val);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                    valParentMap.put(node.left.val, node.val);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                    valParentMap.put(node.right.val, node.val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (list.containsAll(Arrays.asList(x, y)) &amp;&amp; !valParentMap.get(x).equals(valParentMap.get(y))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Runtime: 3 ms, faster than 68.73% of Java online submissions for Cousins in Binary Tree.<br>Memory Usage: 34.7 MB, less than 98.52% of Java online submissions for Cousins in Binary Tree.</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>leetcode</tag>
        <tag>树</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>有环链表</title>
    <url>/linked-list-cycle/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个链表，判断它是否有环。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><pre><code>    A:   1-&gt;5-&gt;10-&gt;11-&gt;18
               ↑       ↓
               ↑       ↓
               ↑ ← ← ← ←
               
    A:   1-&gt;5-&gt;10-&gt;11-&gt;18-&gt;null
      
</code></pre>
<p>链表 A 的第五个节点 18 的 next 节点是 10，如此构成有环链表。</p>
<p>链表 B 则是一个无环链表。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果链表有环，可以把有环部分看成一个跑道，有两个人，一个跑的快，一个跑的慢，如此一直跑下去，跑的快的一定会追上跑的慢的。</p>
<p>如果链表无环，那么跑的快的那个一定会先到达链表尾部，也就是 NULL。</p>
<p>我们可以设置两个指针来模拟那两个跑的快的人和跑的慢的人，一个指针每次向后移动一位，另一个指针每次向后移动两位，直到两者相遇或快指针到达链表尾部。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head: The first node of linked list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: True if it has a cycle, or false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode slow = head, fast = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/linked-list-cycle/">LintCode：带环链表</a> </p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>链表</tag>
        <tag>有环链表</tag>
        <tag>两根指针</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j 详解</title>
    <url>/log4j/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>log4j 官网下载相应的 jar 包: <a href="http://logging.apache.org/log4j/1.2/download.html">点击直达</a></p>
<p>或使用 maven 坐标:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>首先需要在项目 <code>src</code> 目录下创建文件 <code>log4j.properties</code> :</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug, stdout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">%c %d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span></span><br></pre></td></tr></table></figure>



<span id="more"></span>



<p>输出日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(Test.class);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录debug级别的信息</span></span><br><span class="line">        logger.debug(<span class="string">&quot;This is debug message.&quot;</span>);</span><br><span class="line">        <span class="comment">// 记录info级别的信息</span></span><br><span class="line">        logger.info(<span class="string">&quot;This is info message.&quot;</span>);</span><br><span class="line">        <span class="comment">// 记录error级别的信息</span></span><br><span class="line">        logger.error(<span class="string">&quot;This is error message.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果:</p>
<pre><code>im.zhaojun.Test 19:31:42,793 DEBUG Test:13 - This is debug message.
im.zhaojun.Test 19:31:42,798  INFO Test:15 - This is info message.
im.zhaojun.Test 19:31:42,798 ERROR Test:17 - This is error message.
</code></pre>
<h2 id="log4j-配置"><a href="#log4j-配置" class="headerlink" title="log4j 配置"></a>log4j 配置</h2><h3 id="Appender"><a href="#Appender" class="headerlink" title="Appender"></a>Appender</h3><p>输出方式也称之为输出目的地，Log4j 自带的 appender 类有：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.apache.log4j.ConsoleAppender(控制台)，</span>  <span class="string"></span></span><br><span class="line"><span class="meta">org.apache.log4j.FileAppender(文件)，</span>  <span class="string"></span></span><br><span class="line"><span class="meta">org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)</span>  <span class="string"></span></span><br><span class="line"><span class="attr">org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)</span></span><br><span class="line"><span class="attr">org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)</span></span><br><span class="line"><span class="attr">org.apache.log4j.jdbc.JDBCAppender(输出到数据库)</span></span><br></pre></td></tr></table></figure>

<p>配置方式如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.appender.appenderName</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br></pre></td></tr></table></figure>

<h3 id="Level"><a href="#Level" class="headerlink" title="Level"></a>Level</h3><p>日志信息的优先级从高到低有 OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL，但只建议使用 ERROR、WARN、INFO、DEBUG 四种级别。</p>
<h4 id="Root-Level"><a href="#Root-Level" class="headerlink" title="Root Level"></a>Root Level</h4><p>可以在 <code>log4j.properties</code> 中来配置 <strong>Root Level</strong>，语法为:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">[ level ], appenderName, appenderName, …</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>[level] 中可填写 <code>info</code>, <code>debug</code> 等级别，它表示所有 <code>appender</code> 的最低输出级别，如填写 info，则所有 appender 中低于 info 级别的日志将不会生效。</p>
</blockquote>
<h4 id="Appender-Level"><a href="#Appender-Level" class="headerlink" title="Appender Level"></a>Appender Level</h4><p>每个 Appender 也可以配置 Level，不过这里称为 Threshold ：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.appender.appenderName.Threshold</span> = <span class="string">[level]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中 appenderName 为自定义的 appender 名称，[level] 为当前 appender 的最低输出级别。</p>
</blockquote>
<h4 id="Logger-Level"><a href="#Logger-Level" class="headerlink" title="Logger Level"></a>Logger Level</h4><p>在程序中通过 <code>logger.setLevel()</code> 来设置当前 Logger 对象输出的最低 Level。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置只输出 INFO 及以上级别的信息</span></span><br><span class="line">        logger.setLevel(Level.INFO);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录debug级别的信息, (这里不会输出)</span></span><br><span class="line">        logger.debug(<span class="string">&quot;This is debug message.&quot;</span>);</span><br><span class="line">        <span class="comment">// 记录info级别的信息</span></span><br><span class="line">        logger.info(<span class="string">&quot;This is info message.&quot;</span>);</span><br><span class="line">        <span class="comment">// 记录error级别的信息</span></span><br><span class="line">        logger.error(<span class="string">&quot;This is error message.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不推荐使用，在 Appender 中会配置更加直观。</p>
</blockquote>
<h4 id="Level-相互关系"><a href="#Level-相互关系" class="headerlink" title="Level 相互关系"></a>Level 相互关系</h4><p>三种 Level 的关系为：<code>Root Level &gt; Appender Level &gt; Logger Level</code>   。</p>
<p>它们之间可理解为父子关系，父级别会限制子级别的输出内容，</p>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p>Log4j 自带的 layout 有：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.apache.log4j.HTMLLayout（以HTML表格形式布局），</span>  <span class="string"></span></span><br><span class="line"><span class="meta">org.apache.log4j.PatternLayout（可以灵活地指定布局模式），</span>  <span class="string"></span></span><br><span class="line"><span class="meta">org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</span>  <span class="string"></span></span><br><span class="line"><span class="attr">org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span></span><br></pre></td></tr></table></figure>

<p>配置方式如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.appender.appenderName.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br></pre></td></tr></table></figure>

<h2 id="Logger-实例"><a href="#Logger-实例" class="headerlink" title="Logger 实例"></a>Logger 实例</h2><p>Logger类提供了多种方法来处理日志，它提供了两个静态方法获得一个 Logger 对象： </p>
<ul>
<li><strong>public static Logger getRootLogger();</strong></li>
<li><strong>public static Logger getLogger(String name);</strong></li>
</ul>
<p>第一个返回应用程序实例根记录器并没有名字。</p>
<p>第二种方法通过记录器的名称获得。记录器名称是可以传递任何字符串，通常是类或包的名称 ，用于区分不同类的输出，可以在 Layout 中通过 <code>%c</code>  来获取。（也可传入 Class 类型，会自动调用其 <code>getName</code> 方法取得字符串）。</p>
<p> Logger类有专门用于打印日志信息下面的方法如下。</p>
<table>
<thead>
<tr>
<th align="center">#</th>
<th align="left">方法及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left"><strong>public void debug(Object message)</strong> 这种方法打印使用 Level.DEBUG 消息级别</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left"><strong>public void error(Object message)</strong> 这种方法打印使用 Level.ERROR 消息级别</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left"><strong>public void fatal(Object message);</strong> 这种方法打印使用 Level.FATAL 消息级别</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left"><strong>public void info(Object message);</strong> 这种方法打印使用 Level.INFO 消息级别</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left"><strong>public void warn(Object message);</strong> 这种方法打印使用 Level.WARN 消息级别</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left"><strong>public void trace(Object message);</strong> 这种方法打印使用Level.TRACE消息级别</td>
</tr>
</tbody></table>
<h2 id="日志格式化"><a href="#日志格式化" class="headerlink" title="日志格式化"></a>日志格式化</h2><h3 id="PatternLayout"><a href="#PatternLayout" class="headerlink" title="PatternLayout"></a>PatternLayout</h3><p>最为常用的便是 <code>org.apache.log4j.PatternLayout</code>，它采用类似 C 语言中的 printf 函数的打印格式格式化日志信息。</p>
<pre><code>%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL  
%r 输出自应用启动到输出该log信息耗费的毫秒数  
%c 输出所属的类目，通常就是所在类的全名  
%t 输出产生该日志事件的线程名  
%n 输出一个回车换行符，Windows平台为&quot;rn&quot;，Unix平台为&quot;n&quot;  
%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyy MMM dd HH:mm:ss,SSS&#125;，输出类似：2002年10月18日 22：10：28，921  
%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>Logger 的名字, 即 <code>Logger.getLogger(String name)</code> 创建实例时的 name 值。 <br />允许使用 %c{数字} 输出部分的名字(从右边往左边数)。见实例</td>
<td>%c 将输出 com.log4j.Log4jTest<br />%c{1}将输出Log4jTest<br />%c{2}将输出log4j.Log4jTest<br />%c{3}将输出com.log4j.Log4jTest</td>
</tr>
<tr>
<td>C</td>
<td>输出 Logger 所在类的名称。</td>
<td>%C 将输出com.log4j.Log4jTest<br />%C{1}将输出Log4jTest<br />%C{2}将输出log4j.Log4jTest<br />%C{3}将输出com.log4j.Log4jTest</td>
</tr>
<tr>
<td>d</td>
<td>输出日期。允许使用%d{yyyy-MM-dd HH:mm:ss}格式化日期。</td>
<td>%d将输出2018-07-28 22:24:25,353<br />%d{yyyy-MM-dd}将输出2018-07-28<br />%d{ABSOLUTE}将输出22:24:25,353</td>
</tr>
<tr>
<td>F</td>
<td>输出所在的类文件名称</td>
<td>%F将输出Log4jTest.java</td>
</tr>
<tr>
<td>l</td>
<td>输出语句所在的行数,包括类名,方法名,文件名,行数等</td>
<td>%l将输出com.log4j.test.Log4jTest.main(Log4jTest.java:50)</td>
</tr>
<tr>
<td>L</td>
<td>输出语句所在的行数，只输出数字</td>
<td>%L将输出 50</td>
</tr>
<tr>
<td>m</td>
<td>输出日志</td>
<td>输出日志,即log.info(“”), log.debug(“”)的内容</td>
</tr>
<tr>
<td>M</td>
<td>输出方法名</td>
<td>%M 将输出main</td>
</tr>
<tr>
<td>n</td>
<td>换行符,Windows下输出\r\n,Linux下输出\n</td>
<td>含行</td>
</tr>
<tr>
<td>p</td>
<td>输出日志级别(prioriry)</td>
<td>DEBUG,INFO,ERROR,FITAL等</td>
</tr>
<tr>
<td>r</td>
<td>输出从程序启动到输出该日志之间的时间间隔，单位毫秒</td>
<td>%r将输出300</td>
</tr>
<tr>
<td>t</td>
<td>输出当前的线程名称</td>
<td>%t将输出main,Thread-0,Thread-1等</td>
</tr>
<tr>
<td>%</td>
<td>%%用来输出百分号</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>需要避免 “C”, “F”, “L”, “M” 等位置信息的记录，原因详见：<a href="http://logging.apache.org/log4j/2.x/manual/layouts.html#LocationInformation">http://logging.apache.org/log4j/2.x/manual/layouts.html#LocationInformation</a></p>
</blockquote>
<p>Log4j 能输出形形色色的参数, 但参数内容的长度可能不同。如 <code>%C</code> 输出类名，有的类名很长，有的类名很短，会导致日志比较凌乱。为了解决该问题，Log4j允许设置输出内容的长度等，不够的会用空格补上。</p>
<p>设置的方法是在 % 与参数符号间添加数字, 例如 <code>%20p</code>, <code>%-20p</code>等。正数表示右对齐，负数表示左对齐，数字表示最小宽度，不足时用空格补齐。还可以设置最大宽度，如果超出，则截取，方法是用小数点+数字设置，例如 <code>%.30p</code>。</p>
<p>以 <code>%p</code> 为例，所有的调整格式见表:</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>对齐方式</th>
<th>最小宽度</th>
<th>最大宽度</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>[%10p]</td>
<td>右对齐</td>
<td>10</td>
<td></td>
<td>正数右对齐，最小宽度</td>
<td>[     ERROR]</td>
</tr>
<tr>
<td>[%-10p]</td>
<td>左对齐</td>
<td>10</td>
<td></td>
<td>负数左对齐，最小宽度</td>
<td>[ERROR     ]</td>
</tr>
<tr>
<td>[%.4p]</td>
<td></td>
<td></td>
<td>4</td>
<td>最大宽度</td>
<td>[RROR]</td>
</tr>
<tr>
<td>[%10.20p]</td>
<td>右对齐</td>
<td>10</td>
<td>20</td>
<td>正数右对齐，最大最小宽度</td>
<td>[      ERROR]</td>
</tr>
</tbody></table>
<h2 id="日志目的地"><a href="#日志目的地" class="headerlink" title="日志目的地"></a>日志目的地</h2><h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>要写日志信息到一个文件中，必须使用 org.apache.log4j.FileAppender。配置参数： </p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>immediateFlush</td>
<td>标志的默认设置为true，这意味着输出流的文件被刷新，在每个追加操作</td>
</tr>
<tr>
<td>encoding</td>
<td>它可以使用任何字符编码。默认情况下是特定于平台的编码方案</td>
</tr>
<tr>
<td>threshold</td>
<td>这个 appender 阈值级别</td>
</tr>
<tr>
<td>File</td>
<td>日志文件的路径，如 d:/test.log</td>
</tr>
<tr>
<td>append</td>
<td>默认设置为true，这意味着记录的信息被附加到同一文件的末尾</td>
</tr>
<tr>
<td>bufferedIO</td>
<td>此标志表示是否需要写入缓存启用。默认设置为false</td>
</tr>
<tr>
<td>bufferSize</td>
<td>如果 bufferedI/O 启用，这表示缓冲区的大小，默认设置为8KB</td>
</tr>
</tbody></table>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>log4j API 提供 org.apache.log4j.jdbc.JDBCAppender 对象，它能够将日志信息在指定的数据库，配置参数： </p>
<table>
<thead>
<tr>
<th>Property</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bufferSize</td>
<td>设置缓冲区的大小。默认大小为1</td>
</tr>
<tr>
<td>driver</td>
<td>设置驱动程序类为指定的字符串。如果没有指定驱动程序类，默认为sun.jdbc.odbc.JdbcOdbcDriver</td>
</tr>
<tr>
<td>layout</td>
<td>设置要使用的布局。默认布局是org.apache.log4j.PatternLayout</td>
</tr>
<tr>
<td>password</td>
<td>Sets the database password.</td>
</tr>
<tr>
<td>sql</td>
<td>指定SQL语句在每次记录事件发生的时间执行。这可能是INSERT，UPDATE或DELETE</td>
</tr>
<tr>
<td>URL</td>
<td>设置JDBC URL</td>
</tr>
<tr>
<td>user</td>
<td>设置数据库用户名</td>
</tr>
</tbody></table>
<p>开始使用基于JDBC日志，要创建在哪里保存日志信息的表。下面是创建日志表的SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `logs` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  `<span class="type">date</span>` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `logger` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `level` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `message` <span class="type">varchar</span>(<span class="number">1000</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p>以下是将用于将消息记录到一个日志表中的示例配置文件 log4j.properties的JDBCAppender</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">DEBUG, DB</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.DB</span>=<span class="string">org.apache.log4j.jdbc.JDBCAppender</span></span><br><span class="line"><span class="meta">log4j.appender.DB.URL</span>=<span class="string">jdbc:mysql://localhost/dbname</span></span><br><span class="line"><span class="meta">log4j.appender.DB.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">log4j.appender.DB.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">log4j.appender.DB.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.DB.sql</span>=<span class="string">INSERT INTO logs(`date`, `logger`, `level`, `message`)VALUES(&#x27;%d&#123;yyyy-MM-dd HH:mm:ss&#125;&#x27;,&#x27;%C&#x27;,&#x27;%p&#x27;,&#x27;%m&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.DB.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from logs;</span><br><span class="line">+---------------------+-----------------+-------+---------------------------+----+</span><br><span class="line">| date                | logger          | level | message                   | id |</span><br><span class="line">+---------------------+-----------------+-------+---------------------------+----+</span><br><span class="line">| 2018-07-28 23:25:40 | im.zhaojun.Test | INFO  | This is info message.你好 |  1 |</span><br><span class="line">| 2018-07-28 23:25:40 | im.zhaojun.Test | ERROR | This is error message.    |  2 |</span><br><span class="line">| 2018-07-28 23:25:40 | im.zhaojun.Test | INFO  | This is info message.你好 |  3 |</span><br><span class="line">| 2018-07-28 23:25:40 | im.zhaojun.Test | ERROR | This is error message.    |  4 |</span><br><span class="line">| 2018-07-28 23:25:40 | im.zhaojun.Test | INFO  | This is info message.你好 |  5 |</span><br><span class="line">| 2018-07-28 23:25:41 | im.zhaojun.Test | ERROR | This is error message.    |  6 |</span><br><span class="line">+---------------------+-----------------+-------+---------------------------+----+</span><br><span class="line">4 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>最长上升连续子序列</title>
    <url>/longest-increasing-continuous-subsequence/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个整数数组（下标从 0 到 n-1， n 表示整个数组的规模），请找出该数组中的最长上升连续子序列。（最长上升连续子序列可以定义为从右到左或从左到右的序列。）</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给定 <code>[5, 4, 2, 1, 3]</code>, 其最长上升连续子序列（LICS）为 <code>[5, 4, 2, 1]</code>, 返回 <code>4</code>.</p>
<p>给定 <code>[5, 1, 2, 3, 4]</code>, 其最长上升连续子序列（LICS）为 <code>[1, 2, 3, 4]</code>, 返回 <code>4</code>.</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><code>max</code> 存储最大的上升连续子序列<br><code>count</code> 记录可能为最大循环子序列的统计<br>先从左侧开始循环，若当前数大于下一个数，那么 <code>count++</code>，如果 <code>count &gt; max</code>，则将 <code>count</code> 赋值给 <code>max</code>。然后从右侧向左开始循环，同理。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param : An array of Integer</span></span><br><span class="line"><span class="comment">     * @return: an integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestIncreasingContinuousSubsequence</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; A[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            max = count &gt; max ? count : max;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = A.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; A[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            max = count &gt; max ? count : max;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/longest-increasing-continuous-subsequence/">LintCode：最长上升连续子序列</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>最长上升子序列</title>
    <url>/longest-increasing-subsequence/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个整数序列，找到最长上升子序列（LIS），返回LIS的长度。</p>
<div class="note info"><p>最长上升子序列问题是在一个无序的给定序列中找到一个尽可能长的由低到高排列的子序列，这种子序列不一定是连续的或者唯一的。</p>
</div>


<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <code>[5,4,1,2,3]</code>，LIS 是 <code>[1,2,3]</code>，返回 <code>3</code><br>给出 <code>[4,2,4,5,3,7]</code>，LIS 是 <code>[2,4,5,7]</code>，返回 <code>4</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如 <code>1, 3, 5, 2, 8, 4, 6</code>，对于 6 来说，它的 LIS 是它的前一个数，也就是 4 小于它（4 &lt; 6）的情况下，将 4 的（LIS + 1）就是 6 个 LIS，以此类推。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: The integer array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The length of LIS (longest increasing subsequence)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestIncreasingSubsequence</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] lis = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tempMax = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lis[j] &gt; tempMax &amp;&amp; nums[j] &lt; nums[i])</span><br><span class="line">                    tempMax = lis[j];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            lis[i] = tempMax + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            max = lis[i] &gt; max ? lis[i] : max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/longest-increasing-subsequence/">LintCode：最长上升子序列</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次 IDEA 更新 Maven Index 的问题</title>
    <url>/maven-mirror-index/</url>
    <content><![CDATA[<p>由于 maven 默认的中央仓库的速度不是很理想, 所以换成了阿里云的镜像, 但使用后发现, 无法正常更新索引了, Maven 的索引功能可以让 IDEA 自动提示一些信息, 如图所示:</p>
<p><img src="https://cdn.jun6.net/201807241657_293.gif"></p>
<span id="more"></span>

<p>废话不多说, 网上大多给出的地址都是:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但在更新时出现了错误 <code>FileNotFoundException:Resource nexus-maven-repository-index.properties does not exist</code>:<br><img src="https://cdn.jun6.net/201807241659_788.png"></p>
<p>看样子是没找到文件, 经过一番查询后发现去找的是 <a href="http://repo1.maven.org/maven2/.index/nexus-maven-repository-index.properties">http://repo1.maven.org/maven2/.index/nexus-maven-repository-index.properties</a>这个地址, 即仓库目录下的隐藏文件夹 <code>.index</code>.</p>
<p>但试图去访问阿里云的镜像下的 <code>.index</code> 目录时, 却发现压根没有这个目录:<br><img src="https://cdn.jun6.net/201807241703_485.png"></p>
<p>但其实这个目录应该是 <a href="http://maven.aliyun.com/nexus/content/repositories/central">http://maven.aliyun.com/nexus/content/repositories/central</a> 这个仓库下的 <code>.index</code> 目录.</p>
<p>也就是说, 要配置仓库地址为 :</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的最大深度</title>
    <url>/maximum-depth-of-binary-tree/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的距离。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出一棵如下的二叉树:</p>
<pre><code>  1
 / \ 
2   3
   / \
  4   5
  
</code></pre>
<p>这个二叉树的最大深度为 <code>3</code>.</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>用递归分别遍历每个节点 ，返回相对于当前节点的最大深度（记得加上根节点）。</p>
<h3 id="循环法"><a href="#循环法" class="headerlink" title="循环法"></a>循环法</h3><p>非递归写法可以用一个队列来存储，先将根节点存入，并记录当前节点的兄弟节点个数（指来自同一个父节点），当兄弟节点都出队列完毕，就对子节点进行与根节点同样的操作。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归法-1"><a href="#递归法-1" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition of TreeNode:</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public TreeNode left, right;</span></span><br><span class="line"><span class="comment"> *     public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root: The root of binary tree.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">int</span> left = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//简化写法的话，其实可以一行代码解决：</span></span><br><span class="line">    <span class="comment">// return root == null ? 0 : Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环法-1"><a href="#循环法-1" class="headerlink" title="循环法"></a>循环法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition of TreeNode:</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public TreeNode left, right;</span></span><br><span class="line"><span class="comment"> *     public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root: The root of binary tree.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">0</span>;  <span class="comment">//表示二叉树的深度</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;  <span class="comment">//表示已从队列中取出当前层的个数</span></span><br><span class="line">        <span class="keyword">int</span> amount = <span class="number">1</span>; <span class="comment">//表示当前节点的兄弟节点个数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (queue.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            TreeNode top = queue.poll();</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (top.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(top.left);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (top.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(top.right);</span><br><span class="line">            &#125;    </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (count == amount) &#123;</span><br><span class="line">                amount = queue.size();</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">                depth++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/maximum-depth-of-binary-tree/#">LintCode：二叉树的最大深度</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>递归</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>最大子数组</title>
    <url>/maximum-subarray/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个整数数组，找到一个具有最大和的子数组，返回其最大和。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出数组<code>[−2,2,−3,4,−1,2,1,−5,3]</code>，符合要求的子数组为<code>[4,−1,2,1]</code>，其最大和为 <code>6</code></p>
<span id="more"></span>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对数组进行遍历，每次取当前角标的数，加上 sum 值，如果 sum 值大于现存的最大值，那么则将 sum 赋值给 max，如果 sum 小于 0，则将 sum 重置为 0，直到循环结束。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: A list of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: A integer indicate the sum of max subarray</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            max = sum &gt; max ? sum : max;</span><br><span class="line">            sum = sum &gt; <span class="number">0</span> ? sum : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/maximum-subarray/">LintCode：最大子数组</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>数组</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>合并区间</title>
    <url>/merge-intervals/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出若干闭合区间，合并所有重叠的部分。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出若干闭合区间，合并所有重叠的部分。</p>
<pre><code>[                     [
  [1, 3],               [1, 6],
  [2, 6],      =&gt;       [8, 10],
  [8, 10],              [15, 18]
  [15, 18]            ]
]
</code></pre>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目没有说是有序的集合，所以我们要进行先根据左端点进行排序，排序后，判断右端点与下一个节点的左端点的大小来决定是否合并区间。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition of Interval:</span></span><br><span class="line"><span class="comment"> * public class Interval &#123;</span></span><br><span class="line"><span class="comment"> *     int start, end;</span></span><br><span class="line"><span class="comment"> *     Interval(int start, int end) &#123;</span></span><br><span class="line"><span class="comment"> *         this.start = start;</span></span><br><span class="line"><span class="comment"> *         this.end = end;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intervals, a collection of intervals</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: A new sorted interval list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">merge</span><span class="params">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class="line">        List&lt;Interval&gt; ans = <span class="keyword">new</span> ArrayList&lt;Interval&gt;();</span><br><span class="line">        </span><br><span class="line">        Collections.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval obj1, Interval obj2)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> obj1.start - obj2.start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        Interval last = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Interval item : intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="keyword">null</span> || last.end &lt; item.start) &#123;</span><br><span class="line">                ans.add(item);</span><br><span class="line">                last = item;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                last.end = Math.max(last.end, item.end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/merge-intervals/">LintCode：合并区间</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>合并排序数组 Ⅱ</title>
    <url>/merge-sorted-array/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>合并两个排序的整数数组 A 和 B 变成一个新的数组。</p>
<blockquote>
<p>注意事项：你可以假设A具有足够的空间（A数组的大小大于或等于 m + n）去添加B中的元素。</p>
<p>ps：m 表示 A 数组的有效元素个数，n 代表 B 数组的有效元素个数。</p>
</blockquote>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 A = <code>[1, 2, 3, empty, empty]</code>, B = <code>[4, 5]</code></p>
<p>合并之后 A 将变成 <code>[1,2,3,4,5]</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以正序比较 A 数组与 B 数组的每一位，小的放前，其他的元素依次向后移动，但是依次向后移动这个成本太高了。</p>
<p>所以可以考虑倒序比较，根据数组 A 与数组 B 的最后一个有效位，进行倒序的比较，将大的添加到 A 的最后放即可。</p>
<blockquote>
<p>这里要搞清楚的是 A 的最后一个有效位与 A 的最后一位的区别，A 的最后一个有效位是指 A[m-1]，而 A 的最后一位是指 A[A.length-1]。</p>
</blockquote>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A: sorted integer array A which has m elements, </span></span><br><span class="line"><span class="comment">     *           but size of A is m+n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> B: sorted integer array B which has n elements</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSortedArray</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> m, <span class="keyword">int</span>[] B, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = m + n -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; B[j]) &#123;</span><br><span class="line">                A[index--] = A[i--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                A[index--] = B[j--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            A[index--] = A[i--];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            A[index--] = B[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/merge-sorted-array/">LintCode：合并排序数组Ⅱ</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>合并排序数组</title>
    <url>/merge-two-sorted-arrays/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>合并两个排序的整数数组A和B变成一个新的数组。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出A = <code>[1,2,3,4]</code>，B = <code>[2,4,5,6]</code>，返回 <code>[1,2,2,3,4,4,5,6]</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>创建一个新的数组，长度是 A 和 B 长度之合，再设三个指针，分别指向 A，B 和新数组的第一个元素，然后遍历两个数组，依次比较每一个元素，较小的数存入新数组中，并将较小值的指针与新数组的指针向后移动一位。最后当遍历完 A 或 B 以后，就将剩余数组的数据依次添加到新数组。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A and B: sorted integer array A and B.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: A new sorted integer array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] mergeSortedArray(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || B == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[A.length + B.length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt; A.length &amp;&amp; j &lt; B.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; B[j])&#123;</span><br><span class="line">                result[index++] = A[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[index++] = B[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt; A.length) &#123;</span><br><span class="line">            result[index++] = A[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (j &lt; B.length) &#123;</span><br><span class="line">            result[index++] = B[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/merge-two-sorted-arrays/">LintCode：合并排序数组</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>合并两个排序链表</title>
    <url>/merge-two-sorted-lists/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>将两个排序链表合并为一个新的排序链表</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <code>1-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null</code>，<code>2-&gt;null</code>， 返回 <code>1-&gt;2-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题很简单，属于链表的基本操作。<br>只需要创建一个新的链表与一个指向新链表最后一个节点的指针即可。<br>当 <code>l1</code> 与 <code>l2</code> 均不为空的情况下，判断 <code>l1</code> 和 <code>l2</code>的大小，把较小值放进新链表的最后一个节点，然后将较小值所处的链表向后移一位，以判断下一个数。<br>依次循环，直到 <code>l1</code> 或 <code>l2</code> 中有一方为空时，将为空的一方，直接加到新链表后即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode l1 is the head of the linked list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode l2 is the head of the linked list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: ListNode head of linked list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">		ListNode listNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">		ListNode lastNode = listNode;</span><br><span class="line">		<span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (l1.val &gt; l2.val) &#123;</span><br><span class="line">				lastNode.next = l2;</span><br><span class="line">				l2 = l2.next;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				lastNode.next = l1;</span><br><span class="line">				l1 = l1.next;</span><br><span class="line">			&#125;</span><br><span class="line">			lastNode = lastNode.next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (l1 == <span class="keyword">null</span>)</span><br><span class="line">			lastNode.next = l2;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">			lastNode.next = l1;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> listNode.next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/merge-two-sorted-lists/">LintCode：合并两个排序链表</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>最小子数组</title>
    <url>/minimum-subarray/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个整数数组，找到一个具有最小和的子数组。返回其最小和。    </p>
<blockquote>
<p><strong>注意事项</strong>：子数组最少包含一个数字</p>
</blockquote>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出数组<code>[1, -1, -2, 1]</code>，返回 <code>-3</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>该题与 <a href="/maximum-subarray/" title="最大子数组">最大子数组</a> 这道题，思路相似，只不过这里是 ArrayList 而已，差距不大。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: a list of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: A integer indicate the sum of minimum subarray</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArray</span><span class="params">(ArrayList&lt;Integer&gt; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            sum += nums.get(i);</span><br><span class="line">            min = sum &lt; min ? sum : min;</span><br><span class="line">            sum = sum &lt; <span class="number">0</span> ? sum : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/minimum-subarray/">LintCode：最小子数组</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>数组</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>移动零</title>
    <url>/move-zeroes/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个数组 nums 写一个函数将 0 移动到数组的最后面，非零元素保持原数组的顺序</p>
<div class="note danger"><p> 注意事项：</p>
<ol>
<li>必须在原数组上操作</li>
<li>最小化操作数</li>
</ol>
</div>

<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 nums = <code>[0, 1, 0, 3, 12]</code>, 调用函数之后, nums = <code>[1, 3, 12, 0, 0]</code>.</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>设两个指针，先都指向数组头元素，一个依次向后找不为零的数，然后与另一个指向的数进行交换，直到找到最后一个元素为止。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums an integer array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> nothing, do this in-place</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[right] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[right];</span><br><span class="line">                nums[right] = nums[left];</span><br><span class="line">                nums[left] = temp;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/move-zeroes/">LintCode：移动零</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>两根指针</tag>
      </tags>
  </entry>
  <entry>
    <title>巧用 MyBatis 构建树形结构</title>
    <url>/mybatis-recursive-tree/</url>
    <content><![CDATA[<p>在项目中我们经常会碰到这种格式的数据, 需要将其转化为树形结构: </p>
<table>
<thead>
<tr>
<th align="center">menu_id</th>
<th align="center">parent_id</th>
<th align="center">menu_name</th>
<th>url</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">权限管理</td>
<td>#</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">用户管理</td>
<td>/user/index</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">1</td>
<td align="center">角色管理</td>
<td>/role/index</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">1</td>
<td align="center">菜单权限</td>
<td>/menu/index</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">0</td>
<td align="center">系统监控</td>
<td>#</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">11</td>
<td align="center">登录日志</td>
<td>/log/login/index</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">11</td>
<td align="center">操作日志</td>
<td>/log/sys/index</td>
</tr>
<tr>
<td align="center">20</td>
<td align="center">11</td>
<td align="center">在线用户</td>
<td>/online/index</td>
</tr>
<tr>
<td align="center">27</td>
<td align="center">1</td>
<td align="center">操作权限</td>
<td>/operator/index</td>
</tr>
<tr>
<td align="center">28</td>
<td align="center">1</td>
<td align="center">部门管理</td>
<td>/dept/index</td>
</tr>
<tr>
<td align="center">29</td>
<td align="center">11</td>
<td align="center">系统管理</td>
<td>/system/index</td>
</tr>
<tr>
<td align="center">30</td>
<td align="center">0</td>
<td align="center">账号关联</td>
<td>/oauth2/index</td>
</tr>
</tbody></table>
<p>一般的做法是查询出所有, 然后递归构建树形结构, 但其实可以巧用 MyBatis 在查询时就进行转换, 这用到了 MyBatis 的 <code>resultMap</code> 功能.</p>
<p>首先由以下表结构定义:</p>
<span id="more"></span>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> menu</span><br><span class="line">(</span><br><span class="line">    menu_id   <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;菜单 ID&#x27;</span>,</span><br><span class="line">    parent_id <span class="type">int</span>          <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    menu_name <span class="type">varchar</span>(<span class="number">20</span>)  <span class="keyword">null</span> comment <span class="string">&#x27;菜单名称&#x27;</span>,</span><br><span class="line">    url       <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">null</span> comment <span class="string">&#x27;菜单 URL&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>实体类定义:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer menuId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String menuName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; children;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>resultMap 定义:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultTreeMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;im.zhaojun.model.Menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;menu_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;menuId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;parent_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;parentId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;menu_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;menuName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;url&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;url&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;children&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Menu&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectTree&quot;</span> <span class="attr">column</span>=<span class="string">&quot;&#123;parent_id = menu_id&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查询定义:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMenuTree&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultTreeMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from menu</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;parent_id!=null&quot;</span>&gt;</span></span><br><span class="line">                and parent_id = #&#123;parent_id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and parent_id = 0</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查询出的结果集:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;menuId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;权限管理&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;用户管理&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/user/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;角色管理&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/role/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;菜单权限&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/menu/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">27</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;操作权限&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/operator/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">28</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;部门管理&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/dept/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;menuId&quot;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;系统监控&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">12</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;登录日志&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/log/login/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">19</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;操作日志&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/log/sys/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;在线用户&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/online/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;menuId&quot;</span>: <span class="number">29</span>,</span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;系统管理&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/system/index&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;menuId&quot;</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">&quot;parentId&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;menuName&quot;</span>: <span class="string">&quot;账号关联&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/oauth2/index&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>看完了效果, 我们来讲解下 <code>resultMap</code> 中的定义, 主要是 <code>collection</code> 语句中的内容:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;children&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Menu&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectTree&quot;</span> <span class="attr">column</span>=<span class="string">&quot;&#123;parent_id = menu_id&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>property=&quot;children&quot;</code> 对应的是实体类中的 children 字段.</li>
<li><code>ofType=&quot;Menu&quot;</code> 对应 children 中泛型的的类型.</li>
<li><code>select=&quot;selectTree&quot;</code> 指定了 SELECT 语句的 id.</li>
<li><code>column=&quot;&#123;parent_id = menu_id&#125;&quot;</code> 参数的表达式, 向子语句中传递参数.</li>
</ul>
<p>这个collection整体的含义可以这样理解:</p>
<p>通过 <code>selectTree</code> 这个 <code>SELECT</code> 语句来获取当前菜单中的 <code>children</code> 属性结果, 在查询子菜单的 SELECT 语句中, 需要传递一个 <code>parent_id</code> 参数, 这个参数的值就是当前菜单中的 id.</p>
<p>本章实例代码: <a href="https://github.com/zhaojun1998/mybatis-recursive-demo">https://github.com/zhaojun1998/mybatis-recursive-demo</a></p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 连接</title>
    <url>/mysql-01/</url>
    <content><![CDATA[<h2 id="进行连接"><a href="#进行连接" class="headerlink" title="进行连接"></a>进行连接</h2><p>使用数据库的第一步是连接，连接命令为:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u$username <span class="operator">-</span>h$host <span class="operator">-</span>P$port <span class="operator">-</span>p</span><br></pre></td></tr></table></figure>

<p>然后输入密码就行了，不推荐在 <code>-p</code> 的后面输入密码，会有安全问题。</p>
<span id="more"></span>

<p>此时会去获取你拥有的权限，之后这个连接里的所有权限判断逻辑，都会用此时读取到的权限。也就是说即使在连接后，管理员账号对此账号进行了权限更改，也不会立即生效，而是重新连接后才会生效。</p>
<h2 id="查看连接"><a href="#查看连接" class="headerlink" title="查看连接"></a>查看连接</h2><p>连接后，可以使用命令，查看所有连接:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist;</span><br></pre></td></tr></table></figure>

<h2 id="连接过期"><a href="#连接过期" class="headerlink" title="连接过期"></a>连接过期</h2><p>建立连接后, 如果长时间没有操作，会被自动断开，这个时间由参数 <code>wait_timeout</code> 控制，查看方式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;wait_timeout&#39;;</span><br></pre></td></tr></table></figure>
<pre><code>    +---------------+-------+
    | Variable_name | Value |
    +---------------+-------+
    | wait_timeout  | 28800 |
    +---------------+-------+
    1 row in set, 1 warning (0.00 sec)
</code></pre>
<p>默认为 28000 秒, 即 8 个小时，与之相关的还有 <code>interactive_timeout</code> 属性。</p>
<p>他们的区别是 <code>interactive_timeout</code> 针对交互式连接, <code>wait_timeout</code> 针对非交互式连接.</p>
<ul>
<li>交互式连接: 通过 mysql 客户端连接.</li>
<li>非交互式连接: 通过 jdbc 方式连接.</li>
</ul>
<h2 id="长-短连接"><a href="#长-短连接" class="headerlink" title="长/短连接"></a>长/短连接</h2><ul>
<li>短连接: 每次程序与数据库交互后都会关闭连接，下次查询再新建连接。</li>
<li>长连接: 成语与数据库建立连接后，就一直打开，后面的查询会重用这个连接。</li>
</ul>
<p>短连接每次进行连接时比较耗费资源，但是维护很多长连接也会占用很多内存空间，两者之前的取舍要根据实际情况来定。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 查询缓存</title>
    <url>/mysql-02/</url>
    <content><![CDATA[<p>MySQL 拿到一个查询请求后，会先看看之前有没有执行过这条语句，如果执行过，则直接从查询缓存中取之前查询的结果即可，<strong>但大多情况不建议使用 MySQL 的查询缓存，因为弊大于利</strong>。</p>
<p>因为查询缓存的失效非常频繁，只要对一个表进行更新，那么这个表的所有查询缓存将会全部被清除，所以命中率并不会很好，除非你有一张静态的表，不会改变他的数据，或者很久才会更新一次。比如系统配置表，才适合使用这个查询缓存。</p>
<p>还有一个原因是因为，现在有 <code>Redis</code>, <code>MemoryCache</code> 等专门用来做缓存的应用，他们对缓存的处理会更优，而且 MySQL 服务器的资源通常都比较宝贵，所以不推荐使用 MySQL 的查询缓存。</p>
<p>查看查询缓存状态:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%query_cache_type%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>显式指定使用查询缓存:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">where</span> ID <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>缓存</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>初识 redo log 和 binlog</title>
    <url>/mysql-03/</url>
    <content><![CDATA[<h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><p><code>InnoDB</code> 存储引擎是<strong>以页为单位</strong>来管理存储空间的, 我们的增删改查操作本质上都是在访问<strong>页面</strong>, 如读取一条数据, 会把这个数据<strong>所在的页</strong>加载到内存中, 而不仅仅是这条数据本身, 这个页的默认大小是 <code>16KB</code>.</p>
<p>在事务中, 我们有一个特性: <strong>持久性</strong>, 指对于一个已提交的事务, 在事务提交后, 即使系统崩溃, 也要保证这个事务对数据库做的更改不会丢失, 那么我们如何保证这一点呢, 有一个简单粗暴的做法就是: <strong>在事务提交之前, 将事务所修改的所有页面都刷新到磁盘</strong>, 但这种做法有几个问题:</p>
<ul>
<li>刷新一个数据页太浪费了, 可能我们只修改了这个数据页中的一个字节, 但 <code>InnoDB</code> 所有操作都是基于页面的, 我们只修改一个字节就要刷新一个 16KB 的页到磁盘上台浪费了.</li>
<li>随机 IO 刷起来比较慢, 一个事务可能包含了很多语句, 即使一条语句, 也可能修改了许多页面, 有可能修改的这些页面并不相邻, 那么这就需要进行很多次随机 IO, 这相对顺序 IO 来说很慢, 尤其对机械硬盘来说.</li>
</ul>
<p>那么如何解决这个问题呢, <code>InnoDB</code> 采用了 <strong>redo log</strong> 机制来解决:</p>
<span id="more"></span>

<p><code>redo log</code> 是 <code>Innodb</code> 存储引擎的特性, 即在更新数据时, 先将更新操作的结果放到 <code>redo log</code> 中, 他存储的是<strong>物理日志</strong>, 如 <code>将第 0 号表空间的 100 号页面的偏移量为 1000 处的值更新为 2。</code>, 然后过一段时间或待系统空闲时, 一起将多个更新操作在硬盘的数据文件上执行.</p>
<p>不过这个文件是有大小限制的, 当这个文件满的时候, 会删除最先写入的数据.</p>
<blockquote>
<p>你可能会问, 写到 <code>redo log</code> 不也是写入到磁盘吗, 这效率会更好吗, 是不是多此一举啊. 其实不是的, 首先每次写入 <code>redo log</code> 的数据是非常小的, 他只记录了这次修改的物理操作. 相较于之前要刷新 1 个或多个 16KB 的页面来说操作的数据量小多了, 而且写 <code>redo log</code> 是顺序 IO, 这整体会快很多.</p>
</blockquote>
<h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><p><code>binlog</code> 是 <code>MySQL</code> 的功能, 所有存储引擎都可以使用. 记录的是<strong>逻辑日志</strong>, 如 <code>给 ID = 2 的数据行的 C 字段加 1</code>. 他是追加写入的, 当写到一定大小后, 会切换到写一个文件继续写, 不会覆盖原来的文件. 一般用来做数据库的备份和恢复使用.</p>
<h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p>不过既然有两个日志, 那么如何保证不会出现写完 <code>read log</code>, 但还没写 <code>binlog</code> 的时候就宕机了呢, 为了解决这个问题, <code>MySQL</code> 采用了两阶段提交的方式:</p>
<ol>
<li>先写入 <code>redo log</code> 状态为 <code>prepare</code> 阶段. (存储引擎层 InnoDB)</li>
<li>写 <code>binlog</code> (MySQL 服务层)</li>
<li>提交事务, <code>redo log</code> 状态改为 <code>commit</code> 状态. (存储引擎层 InnoDB)</li>
</ol>
<p>当系统出现异常宕机时:</p>
<ul>
<li>binlog 有记录，redo log 状态 commit: 正常完成的事务，不需要恢复</li>
<li>binlog 有记录，redo log 状态 prepare: 在 binlog 写完提交事务之前的 crash, 恢复操作：提交事务</li>
<li>binlog 无记录，redo log 状态 prepare: 在 binlog写完之前的 crash, 恢复操作：回滚事务</li>
<li>binlog 无记录，redo log 无记录: 在 redo log 写之前 crash, 恢复操作：回滚事务</li>
</ul>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p><code>innodb_flush_log_at_trx_commit</code> 参数设置为 1, 表示每次事务的 <code>redo log</code> 都直接持久化到磁盘, 推荐设置为 1, 这样可以保证 MySQL 异常重启后<strong>数据不会丢失</strong>.</p>
<p><code>sync_binlog</code> 参数设置为 1, 表示每次事务的 <code>binlog</code> 都持久化到磁盘, 推荐设置为 1, 这样可以保证 <code>MySQL</code> 异常重启后 <strong>binlog 不会丢失</strong>.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>redo log</code> 是 <code>InnoDB</code> 引擎的特性, 只对使用 <code>InnoDB</code> 引擎的表生效, 记录的是 <strong>物理日志</strong>, <strong>有大小限制</strong>, 他的主要目的<strong>是为了保证事务的一致性和提升更新操作的效率</strong>.<br><code>binlog</code> 是 MySQL 的功能, 所有存储引擎都可以使用, 记录的是 <strong>逻辑日志</strong>, <strong>没有大小限制</strong>, 他的主要目的是<strong>用于备份和恢复数据使用</strong>.</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>redo log</tag>
        <tag>binlog</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 索引</title>
    <url>/mysql-04/</url>
    <content><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>数据库的索引是一个要点, 无论是面试还是在工作中, 这个知识点都很常会用到, 你可能只是用过索引, 知道加了索引可以提高查询的性能, 但不知道为什么这样, 今天我们一起来详细了解下吧.</p>
<h2 id="索引模型"><a href="#索引模型" class="headerlink" title="索引模型"></a>索引模型</h2><p>索引有很多种存储结构, 称之为索引模型, 不同类型的模型分别对应不同的适用场景.</p>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希表是一种以键值对存储数据的结构 <code>KEY - VALUE</code>. 查找时输入 <code>key</code> 来查找对应点 <code>value</code>.</p>
<p>哈希表的思路很简单, 将值放置到数组中. 如定义一个长度为 16 的数组, 输入 <code>key</code>: <code>user1</code>, 对 <code>user1</code> 做哈希运算 (利用哈希函数), 返回一个整数, 如 <code>2156648</code>, 用这个数对 16 取余, 返回值为 8. 那么就将他放到数组的第 8 个位置.</p>
<p>你可能会有下面的疑惑:</p>
<ul>
<li>哈希函数又是什么: 哈希函数的意图就是把任何长度输入值, 变化成固定长度的输出, 一般为整数.</li>
<li>哈希值会冲突么, 冲突了怎么办: 会冲突, 冲突了有许多中解决方式, 今天我讲一种比较常用的, 即在数组中不直接存放数据值, 而是存放一个链表, 当冲突时, 就把多个值通过链表串联起来. 类似于 Java 中 <code>HashMap</code> 的存储方式.</li>
</ul>
<blockquote>
<p>总结: <strong>适合用于等值查询</strong>, 不适用于范围查询. 出现大量哈希冲突的情况后, 查询效率会很低.</p>
</blockquote>
<h3 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h3><p>这个就更简单了, 将所有值从小到大排序, 这样查找时, 可以采用二分法, 时间复杂度只有 <code>O(logN)</code>. 而且对范围查询的支持也非常好, 先根据二分法, 找到范围查询的左值, 然后依次遍历数组到范围查询的右值即可.</p>
<p>但这仅仅是查询效率很好, 但向数组中心插入值就麻烦了, 如现有数据 <code>[1, 5, 8, 10, 11, 13]</code>, 现在要插入数据值 <code>3</code>, 那么就要将 <code>5, 8, 10, 11, 13</code> 这些值都向后移动一位, 插入操作的效率为 <code>O(N)</code>, 这并不是一个理想的效率.</p>
<blockquote>
<p>适用于范围查询. 等值查询的效率也较高, 但插入操作效率较低.</p>
</blockquote>
<h3 id="搜索树"><a href="#搜索树" class="headerlink" title="搜索树"></a>搜索树</h3><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p>二叉搜索树的特点是: 每个节点的左儿子小于父节点, 父节点又小于右儿子. 如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">    3    6</span><br><span class="line">   &#x2F; \    \</span><br><span class="line">  2   4    8</span><br><span class="line"> &#x2F;        &#x2F; \ </span><br><span class="line">1        7   9</span><br></pre></td></tr></table></figure>

<p>这是如果你找值 7, 先从根节点 5 开始找, 比 5 大, 那肯定在右边, 所以找到第二层的 6, 比 6 还大, 找到第三次的 8, 比 8 小, 最后找到第四层的 7, 这样最坏的情况也就数据在树的最后一层, 即<strong>平均时间复杂度</strong>为 <code>O(logN)</code>.</p>
<h4 id="平衡二叉树-红黑树"><a href="#平衡二叉树-红黑树" class="headerlink" title="平衡二叉树 (红黑树)"></a>平衡二叉树 (红黑树)</h4><p>但是二叉搜索树还可能会出现一个问题是树不平衡, 如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br><span class="line">           \</span><br><span class="line">            7</span><br><span class="line">             \</span><br><span class="line">              8</span><br><span class="line">               \</span><br><span class="line">                9</span><br></pre></td></tr></table></figure>

<p>上面我们提高二叉搜索树的查询性能取决于树的高度, 现在这个数查询的性能变成了 O(N), 性能大打折扣. 为了解决这个问题, 提出了 <code>红黑树</code> 的概念. 他是一种自平衡的二叉搜索树, 即在插入节点时, 判断整个树是否是平衡的, 如果不平衡, 通过一系列旋转操作来达到平衡的目的, 在更新时维持树的平衡需要的时间复杂度也是 <code>O(logN)</code>.</p>
<blockquote>
<p>红黑树的篇幅有点长, 不太适合放到这里, 需要详细了解的朋友, 可自行查阅相关知识.</p>
</blockquote>
<h4 id="N-叉树-B-树-B-树"><a href="#N-叉树-B-树-B-树" class="headerlink" title="N 叉树 (B 树, B+ 树)"></a>N 叉树 (B 树, B+ 树)</h4><p>同样的, 平衡二叉树也有一个问题, 如当数据有 100 条时, 此时树的高度为 20, 那么一次查询可能需要访问 20 个数据块, 也就是访问 20 次磁盘, 这是不能被接受的, 尤其是在机械硬盘下, 为了让一个查询更少的读取磁盘, 我们就不应该使用二叉树, 而是 N 叉树, 这个 N 取决于数据块的大小.</p>
<p>以 InnoDB 的一个整数字段索引为例, 这个 N 差不多是 1200, 当树高为 4 时, 可以存储 1200 的三次方个值, 大约为 17 亿, 那么这样访问磁盘的次数就大大减少了.</p>
<blockquote>
<p>InnoDB 中的 B+ 树, 就是 N 叉树的一种实现.</p>
</blockquote>
<h2 id="InnoDB-存储模型"><a href="#InnoDB-存储模型" class="headerlink" title="InnoDB 存储模型"></a>InnoDB 存储模型</h2><p>在 InnoDB 中, 表是根据主键顺序以索引的形式存放的, InnoDB 存储模型采用了 B+ 树索引模型, <strong>在 InnoDB 中每一个索引都对应着一颗 B+ 树</strong>, 每棵非主键索引树的叶子节点存储的是主键的值, 每棵主键树的叶子节点存储的是整行数据值.</p>
<p>假如, 我们有一个主键列为 ID 的表, 表中有字段 K, 并且在 K 上有索引, 建表语句如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> T</span><br><span class="line">(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key, </span><br><span class="line">    k <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    index (k)</span><br><span class="line">) engine <span class="operator">=</span> InnoDB;</span><br></pre></td></tr></table></figure>

<p>然后插入数据:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(id, k, name) <span class="keyword">values</span>(<span class="number">100</span>, <span class="number">1</span>, &quot;A&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(id, k, name) <span class="keyword">values</span>(<span class="number">200</span>, <span class="number">2</span>, &quot;B&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(id, k, name) <span class="keyword">values</span>(<span class="number">300</span>, <span class="number">3</span>, &quot;C&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(id, k, name) <span class="keyword">values</span>(<span class="number">400</span>, <span class="number">4</span>, &quot;D&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(id, k, name) <span class="keyword">values</span>(<span class="number">500</span>, <span class="number">5</span>, &quot;E&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(id, k, name) <span class="keyword">values</span>(<span class="number">600</span>, <span class="number">6</span>, &quot;F&quot;);</span><br></pre></td></tr></table></figure>

<p>两个树的示意图如下:</p>
<p><img src="https://cdn.jun6.net/2019/07/17/5d2f325737b14.png"></p>
<p>那么对于 <strong>主键索引和普通索引的查询有什么区别呢?</strong></p>
<p>如查询语句 <code>select * from T where ID = 500</code>, 即根据主键进行查询, 则只需要搜索 ID 索引树.</p>
<p>如查询语句 <code>select * from T where K = 5</code>, 即根据普通索引进行查询, 则需要先搜索 K 索引树, 得到 ID 值 500, 再到 ID 索引树搜索. 这个过程称之为<strong>回表</strong>.</p>
<p>由于普通索引的叶子节点存储的是主键, 那么很显然, 主键长度越小越好, 所以自增主键是一个很好的选择.</p>
<p>当然, 如果你自己有业务字段是唯一的, 且不需要其他索引, 那么使用业务字段来做主键会适合.</p>
<h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>还是上面那个查询语句: <code>select * from T where K = 5</code>, 上面我们他会进行 <strong>回表</strong> 操作.</p>
<p>那么有没有可能经过索引优化, 不回表呢?</p>
<p>如果执行的语句是: <code>select ID from T where K = 5</code>, 这时只需要查找 ID 值, 而 ID 值已经在 k 索引树的叶子节点中了, 这样已经得到了需要的数据, 就不用进行 <strong>回表</strong> 操作了.</p>
<p>在这个查询中, 索引 k 覆盖了我们需要查询的字段,  我们称之为 <strong>覆盖索引</strong>.</p>
<blockquote>
<p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p>
</blockquote>
<h2 id="最左前缀索引"><a href="#最左前缀索引" class="headerlink" title="最左前缀索引"></a>最左前缀索引</h2><p>当然, 我们不能为所有需要查询的字段都建立上 <strong>索引</strong>, 那索引就太多了, 并且索引的维护成本也很大, 其实 <strong>B+ 树</strong> 这种索引结构, 支持最左前缀匹配, 来定位记录.</p>
<p>如现在我们有 <code>(name, age)</code> 这个联合索引 :</p>
<p><img src="https://cdn.jun6.net/201905191038_931.png"></p>
<p>可以看到, 索引已经按照定义中的顺序排序好了, name 在前, age 在后, 如果 name 一致, 按照 age 排序.</p>
<p>此时我们需要查找所有姓名等于 “张三” 的人, 可以快速定位到 ID4, 然后向后遍历直到姓名不等于张三.</p>
<p>那么如果你要查找的是所有姓名的第一个字等于 “张” 的人, 也可以快速定位到 ID3, 然后向后遍历直到不符合条件.</p>
<p>同理, 如现在有联合索引 <code>(name, age, score)</code>, 那么我们查询 <code>where name = &#39;%张&#39; and age = 10</code> 也是用到了索引的, 但查询 <code>where name = &#39;%张&#39; and score = 60</code>, 就没有完全用到这个索引.</p>
<p>由此可知, 我们只要满足索引的最左前缀, 就可以用索引来加速检索, 这个最左前缀可以是联合索引的最左 <code>N</code> 个字段, 也可以是字符串索引的前 <code>M</code> 个字符.</p>
<h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p>上一段我们提到了最左前缀可以用来在索引中定位记录, 但如果不符合最左前缀的部分, 应该怎么办呢?</p>
<p>还是以 <code>(name, age)</code> 联合索引为例. 现在需要查询 “名字第一个字是张, 年龄为 10 的男孩”, sql 示意如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tuser <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">10</span> <span class="keyword">and</span> ismale <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>再次附上索引结构图:</p>
<p><img src="https://cdn.jun6.net/201905191038_931.png"></p>
<p>这个索引只能用到 name 的前缀索引, 找到第一个满足条件的记录 ID3, 然后, 如何判断后面两个条件是否满足呢?</p>
<p>在 MySQL 5.6 之前, 只能从 ID3 开始一个一个的回表, 到主键索引上找出数据行, 再比对字段值.</p>
<p>而在 MySQL 5.6 引入了索引下推优化, 即在索引遍历过程中, 对索引中<strong>包含的字段</strong>先做判断, 先过滤到不符合条件的记录, 避免回表:</p>
<p>无索引下推执行流程:<br><img src="https://cdn.jun6.net/201905191107_285.png"></p>
<p>有索引下推执行流程:</p>
<p><img src="https://cdn.jun6.net/201905191107_395.png"></p>
<p>每个虚线表示回表一次, 在无索引下推图中, 我特意去掉了 age 值, 因为他不会看 age 的值, 只是按顺序把 name 第一个字是 “张” 的所有数据一个一个回表, 因此回表了 4 次.</p>
<p>而在有索引下推时, InnoDB 在 <code>(name, age)</code> 索引内部就判断了 age 是否等于 10, 对于不等于的, 直接跳过, 所以这里只回表了 2 次.</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>MySQL</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL InnoDB 事务隔离级别的实现原理</title>
    <url>/mysql-mvvc/</url>
    <content><![CDATA[<p>今天介绍下，在 <code>MySQL</code> 的 <code>InnoDB</code> 存储引擎中，事务隔离是如何实现的。</p>
<p><code>InnoDB</code> 里面每个事务有一个唯一的事务 <code>ID</code>，叫作 <code>transaction id</code>。它是在事务开始的时候向 <code>InnoDB</code> 的事务系统申请的，是按申请顺序严格递增的。</p>
<p>对于数据库的每行记录，都会有三个隐藏字段：<code>db_trx_id (事务 id)</code>、<code>db_roll_pt (回滚指针)</code>、<code>delete_flag(删除标记)</code>。— <em>有懂的朋友，还望别细纠，其实 <code>delete_flag</code> 是在头信息中，这里是为了方便理解</em></p>
<p>对于 <code>DML</code> 操作来说：</p>
<ul>
<li><strong>INSERT</strong>：创建一条数据，<code>db_trx_id</code> 的值为当前事务 <code>id</code>, <code>db_roll_pt</code> 为 <code>null</code> 。</li>
<li><strong>UPDATE</strong>：复制一行数据，将当前复制后这一行的 <code>db_trx_id</code> 置为当前事务的 <code>id</code>，<code>db_roll_pt</code> 是一个指针，指向复制前的那一条的。</li>
<li><strong>DELETE</strong>：复制一行数据，将当前复制后这一行的 <code>db_trx_id</code> 置为当前事务的 <code>id</code>，<code>db_roll_pt</code> 是一个指针，指向复制前的那一条的。并把 <code>delete_flag</code> 置为 <code>true</code> 。</li>
</ul>
<span id="more"></span>


<p>我们会用此语句建表及初始化数据，用于下面举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `k` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t(id, k) <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>


<p>数据初始状态为：</p>
<p><img src="https://cdn.jun6.net/2020/03/01/1ef1b7a3efa33.png"></p>
<h3 id="Repeatable-Read-可重复读"><a href="#Repeatable-Read-可重复读" class="headerlink" title="Repeatable Read 可重复读"></a>Repeatable Read 可重复读</h3><p>如当前的隔离界别为 <code>Repeatable Read</code> ，下面是 SQL 的执行过程：</p>
<p><img src="http://cdn.jun6.net/2020/03/01/3996297518139.png"></p>
<p>那么对于第 8，10，12，13 行来说，查询的结果应该是什么呢？</p>
<p>结果应该分别是：2，1，3，1 。</p>
<p>下面我们来逐步回放，MySQL 底层是如何实现这整个过程的：</p>
<ul>
<li><p>第 1 行：表示每个事务的 ID 号，其中 <code>read view</code> 取的是所有当前活跃的事务 ID 数组，活跃指的是，已开启并生成事务 ID 但未提交的事务。<code>max id</code> 取的是，目前为止，最大的事务 ID，<strong>不论是否已提交</strong>。我们还称 <code>read view</code> 数组中，最小的值为 <code>min id</code>。</p>
</li>
<li><p>第 2 - 4 行：表示分别开启使用，并创建此事务的 <code>read view</code> 及 <code>max id</code>，要注意的是，这里我并没有使用 <code>begin/start transaction</code> 来开启事务，是因为它们并不会马上创建 <code>read view</code> 及 <code>max id</code>，而是在执行第一条 <code>select</code> 语句后，来进行创建的。</p>
</li>
<li><p>第 5 行为修改 k 的值，自增 1，按照上面所说的规则，修改后：</p>
<p>  <img src="https://cdn.jun6.net/2020/03/01/cb277c85512e2.png"></p>
</li>
<li><p>第 6 行，提交 ID 为 102 的事务。</p>
</li>
<li><p>第 7 行执行了一个简单查询，未手动开启事务，但也会自动开启并生成 <code>read view</code> 及 <code>max id</code>，分别为 <code>read-view: [100, 101]</code> ，<code>max-id: 103</code></p>
</li>
</ul>
<p>此时会根据查询规则，进行查找，规则如下：</p>
<ol>
<li><p>如果数据的 <code>db_trx_id &lt; min id</code> ，则说明数据在开启当前事务前已提交的，内容可见。</p>
</li>
<li><p>如果数据的 <code>db_trx_id &gt; max id</code> ，则说明数据在此事务启动后生成的，内容不可见。</p>
</li>
<li><p>如果数据的 <code>min id &lt;= db_trx_id &lt;= max id</code> ，则还分为两种情况：</p>
<p>3.1 若 <code>db_trx_id</code> 在 <code>read view</code> 的数组中，表示这个版本是由还没提交的事务生成的，不可见，但如果是自己的事务，则可见。</p>
<p>3.2. 若不在数据中，则表示这个版本是已经提交了的事务生成的，可见。</p>
</li>
</ol>
<p>示意图如下：</p>
<p><img src="http://cdn.jun6.net/2020/03/01/a3e4de84498c1.png"></p>
<p>当前的事务的一致性视图为  <code>read view: [100, 101]</code> ，<code>max id: 103</code>，那么根据这个规则，在上面的数据链中查询数据，从最新的蓝色，开始找，找到第一个数据的 <code>db_trx_id</code> 为 102，符合规则 3.2 属于可见范围，查询结果为 2。</p>
<ul>
<li><p>第 8 行，当前的事务的一致性视图为  <code>read view: [100, 101]</code> ，<code>max id: 101</code>同样根据规则，第一个数据的 <code>db_trx_id</code> 为 102，符合规则 2，不可见，那么根据指针 <code>db_roll_pt</code>  继续查找，找到 <code>db_trx_id</code> 为 10 的数据，符合规则 1，数据可见，查询结果为 1。</p>
</li>
<li><p>第 9 行，修改 k 的值，自增 1，按照上面所说的规则，修改后：</p>
<p>  <img src="http://cdn.jun6.net/2020/03/01/ffa5c0e9e2e7a.png"></p>
</li>
<li><p>第 10 行，当前的事务的一致性视图为  <code>read view: [100]</code> ，<code>max id: 100</code> 同样根据规则，第一个数据的 <code>db_trx_id</code> 为 100，符合规则 3.1，在 <code>read view</code> 数组中，但是此 id 为当前事务 id，所以可是可见的，查询结果为 3。</p>
</li>
<li><p>第 11 行，当前的事务的一致性视图为  <code>read view: [100, 101]</code> ，<code>max id: 101</code> 同样根据规则，第一个数据的 <code>db_trx_id</code> 为 100，符合规则 3.1，在 <code>read view</code> 中，但是此 id 不为当前事务 id，所以内容可见的，那么根据指针 <code>db_roll_pt</code>  继续查找，找到 <code>db_trx_id</code> 为 102 的数据，符合规则 2，不可见，继续根据指针 <code>db_roll_pt</code>  查找，找到 <code>db_trx_id</code> 为 10 的数据，符合规则 1，数据可见，查询结果为 1。</p>
</li>
<li><p>第 12 - 13 行，为提交事务语句。</p>
</li>
</ul>
<h3 id="Read-Committed-读已提交"><a href="#Read-Committed-读已提交" class="headerlink" title="Read Committed 读已提交"></a>Read Committed 读已提交</h3><p>处于 <code>Read Committed 读已提交</code> 也可套用上面的规则，不过一致性视图： <code>read view</code> 和 <code>max id</code> 的创建时机，是每一条 <code>select</code> 语句时重新生成。你根据上面的内容，可以自己动手试验下读已提交。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 配置 HTTPS 强制跳转到 HTTP</title>
    <url>/nginx-https-to-http/</url>
    <content><![CDATA[<p>原来博客是 <code>HTTPS</code> 的，当时就是为了一把小绿锁，好看，但对我的博客来说，也不存在什么安全性问题，而且 <code>HTTPS</code> 还会拖慢访问速度以及一系列问题。</p>
<p>其实最重要的原因是，我的域名国内无法备案，博客放国外主机上，使用 <code>HTTPS</code> 部分地区无法访问，而 <code>HTTP</code> 却正常。真是伟大的墙~。惹不起，惹不起，就换回 <code>HTTP</code> 吧，但好多文章搜索引擎已经收录了，收录的连接却是 <code>HTTPS</code> 的，所以还需要想办法用 301 重定向到 <code>HTTP</code>。</p>
<span id="more"></span>



<p>啰嗦了这么多，其实就一小段 <code>nginx</code> 配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> ($server_port = <span class="string">&quot;443&quot;</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">302</span> http://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<div class="note warning"><p>注意：推荐先用 302 做测试，测试好后，再改为 301，以免出现缓存引起的 bug。</p>
</div>





<div class="note info"><p>最后奉劝大家一句，理性使用 <code>HTTPS</code>，按需所用，不盲目跟风。</p>
</div>



]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>https</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>自建 ngrok 内网穿透服务</title>
    <url>/ngrok/</url>
    <content><![CDATA[<p><code>ngrok</code> 和 <code>内网穿透</code> 是什么，有啥用处，以及为什么自建服务，这里我就不再多说了，相信点进来的人也不需要我解释这些。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>有公网 IP 的 VPS 一台</li>
<li>可以配置域名解析的域名一个。</li>
<li>系统：CentOS （也可为其他，命令稍有不同）</li>
</ul>
<span id="more"></span>

<h2 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h2><p>先把域名给配置了，比如我的域名是 <code>zhaojun.im</code>，那么建立 <code>ngrok.zhaojun.im</code> 和 <code>*.ngrok.zhaojun.im</code> 解析到 你的 VPS 的 IP 上 (A 记录)。</p>
<p><img src="https://cdn.jun6.net/201804141548_627.png"></p>
<h2 id="安装-go-语言环境"><a href="#安装-go-语言环境" class="headerlink" title="安装 go 语言环境"></a>安装 go 语言环境</h2><p><code>ngrok</code> 是基于 <code>go</code> 语言开发的，所以需要先安装 <code>go</code> 语言开发环境，<code>CentOS</code> 可以使用 <code>yum</code> 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install golang</span><br></pre></td></tr></table></figure>

<p>如果没有权限，请使用 <code>sudo</code> 安装，安装完成之后，执行 <code>go version</code> 看到类似信息，证明安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go version go1.7.3 linux/amd64</span><br></pre></td></tr></table></figure>

<h2 id="安装-git-环境"><a href="#安装-git-环境" class="headerlink" title="安装 git 环境"></a>安装 git 环境</h2><p>有些 VPS 的系统中自带了 git 环境，有的没有带，如果你的 git 使用不正常，请卸载自带的 git，重装安装。</p>
<p>卸载原有 git （根据需要自选）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure>

<p>更新 yum 源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<p>安装 git ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<p>安装完后执行 <code>git --version</code>，返回类似的信息，证明安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git version 2.5.0</span><br></pre></td></tr></table></figure>

<h2 id="下载-ngrok-源码："><a href="#下载-ngrok-源码：" class="headerlink" title="下载 ngrok 源码："></a>下载 ngrok 源码：</h2><p>找一个存放 <code>ngrok</code> 的文件夹 ，clone 一份源码：</p>
<p>(为了方便演示，本文使用 <code>root</code> 用户，所以存放在 <code>/root/</code> 路径下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;inconshreveable&#x2F;ngrok.git</span><br><span class="line">export GOPATH&#x3D;&#x2F;root&#x2F;ngrok</span><br></pre></td></tr></table></figure>

<h2 id="生成自签名证书"><a href="#生成自签名证书" class="headerlink" title="生成自签名证书"></a>生成自签名证书</h2><p>使用 <code>ngrok</code> 官方服务时，我们使用的是官方的 <code>SSL</code> 证书。自己建立 <code>ngrok</code> 服务，需要我们生成自己的证书，并提供携带该证书的 <code>ngrok</code> 客户端。</p>
<p>证书生成过程需要有自己的一个基础域名，官网随机生成的地址，如：<code>695a358d.ngrok.com</code>，基础域名就是 <code>ngrok.com</code>。而在上文中提到的二级域名 <code>ngrok.zhaojun.im</code> 就是用来作为这次要提供的基础域名。如果你的域名是 <code>abc.com</code>，那么域名基础域名可以设置为 <code>ngrok.abc.com</code>。</p>
<p>以我的基础域名为例（<strong>注意替换成自己的域名</strong>），生成证书过程如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/ngrok</span><br><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj <span class="string">&quot;/CN=ngrok.zhaojun.im&quot;</span> -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out device.key 2048</span><br><span class="line">openssl req -new -key device.key -subj <span class="string">&quot;/CN=ngrok.zhaojun.im&quot;</span> -out device.csr</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure>

<p>执行完成以上命令后，在 <code>ngrok</code> 目录下，会新生成 6 个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">device.crt  device.csr  device.key  rootCA.key  rootCA.pem  rootCA.srl</span><br></pre></td></tr></table></figure>

<p>我们在编译可执行文件之前，需要把生成的证书分别替换到 <code>assets/client/tls</code> 和 <code>assets/server/tls</code> 中，这两个目录分别存放着 <code>ngrok</code> 和 <code>ngrokd</code> 的默认证书。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt</span><br><span class="line">cp device.crt assets/server/tls/snakeoil.crt</span><br><span class="line">cp device.key assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure>

<blockquote>
<p>中间会提示是否覆盖，输入 y 确认即可。这里最好一行一行复制执行，别一起复制执行。</p>
</blockquote>
<h2 id="编译-ngrokd-和-ngrok"><a href="#编译-ngrokd-和-ngrok" class="headerlink" title="编译 ngrokd 和 ngrok"></a>编译 ngrokd 和 ngrok</h2><p>ngrokd 是服务端的执行文件，进入到 ngrok 目录下，执行如下命令编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make release-server</span><br></pre></td></tr></table></figure>

<p>ngrok 是客户端的可执行文件，进入到 ngrok 目录下，执行如下命令编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GOOS=xxx GOARCH=xxx make release-client</span><br></pre></td></tr></table></figure>

<p>不同平台使用不同的 <code>GOOS</code> 和 <code>GOARCH</code>，<code>GOOS</code> 为编译出来的操作系统 (<code>windows</code>,<code>linux</code>,<code>darwin</code>)，<code>GOARCH</code> 对应的构架 (<code>386</code>, <code>amd64</code>, <code>arm</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux 平台 32 位系统：GOOS&#x3D;linux GOARCH&#x3D;386</span><br><span class="line">Linux 平台 64 位系统：GOOS&#x3D;linux GOARCH&#x3D;amd64</span><br><span class="line"></span><br><span class="line">Windows 平台 32 位系统：GOOS&#x3D;windows GOARCH&#x3D;386</span><br><span class="line">Windows 平台 64 位系统：GOOS&#x3D;windows GOARCH&#x3D;amd64</span><br><span class="line"></span><br><span class="line">MAC 平台 32 位系统：GOOS&#x3D;darwin GOARCH&#x3D;386</span><br><span class="line">MAC 平台 64 位系统：GOOS&#x3D;darwin GOARCH&#x3D;amd64</span><br><span class="line"></span><br><span class="line">ARM 平台：GOOS&#x3D;linux GOARCH&#x3D;arm</span><br></pre></td></tr></table></figure>

<p>然后下载编译后的客户端，通过 ftp 或 scp 等都可以，生成的目录在 ngrok 的 bin 目录下，当前例子的路径为 <code>/root/ngrok/bin/windows_amd64/ngrok.exe</code></p>
<h2 id="启动-ngrokd-服务器"><a href="#启动-ngrokd-服务器" class="headerlink" title="启动 ngrokd 服务器"></a>启动 ngrokd 服务器</h2><p>在 ngrok 的 bin 目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ngrokd -domain=<span class="string">&quot;ngrok.zhaojun.im&quot;</span> -httpAddr=<span class="string">&quot;:8088&quot;</span> -httpsAddr=<span class="string">&quot;:8089&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>-domain</code> 为你的 ngrok 服务域名，<code>-httpAddr</code> 为 http 服务端口地址，访问形式为：<code>xxx.ngrok.zhaojun.im:8088</code>，也可设置为 80 默认端口，注意端口冲突即可，<code>-httpsAddr</code> 为 https 服务，同上。</p>
<p><code>ngrokd</code> 启动后，退出命令行即关闭服务。如果想要在后台运行，则执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup ./ngrokd -domain=<span class="string">&quot;ngrok.zhaojun.im&quot;</span> -httpAddr=<span class="string">&quot;:8088&quot;</span> -httpsAddr=<span class="string">&quot;:8089&quot;</span> &amp;</span><br></pre></td></tr></table></figure>

<p>注意末尾需要有 <code>&amp;</code> 号，详细搜索 <code>nohup</code> 了解。<br>关闭服务只需通过：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -A   <span class="comment"># 找到PID，执行关闭</span></span><br><span class="line"><span class="built_in">kill</span> xxxid</span><br></pre></td></tr></table></figure>

<h2 id="启动-ngrok-客户端"><a href="#启动-ngrok-客户端" class="headerlink" title="启动 ngrok 客户端"></a>启动 ngrok 客户端</h2><p>上面我们编译好了客户端并下载到了本地，演示路径为 <code>d:/ngrok/ngrok.exe</code></p>
<p>在 <code>d:/ngrok/</code> 目录下，建立 ngrok 配置文件：<code>ngrok.cfg</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_addr: &quot;ngrok.zhaojun.im:4443&quot;</span><br><span class="line">trust_host_root_certs: false</span><br></pre></td></tr></table></figure>

<p><code>server_addr</code> 端口默认 4443，还需要服务器开启 4443 端口，使用阿里云或腾讯云的需要去安全组放行 4443 外网端口，不然无法正常使用。</p>
<p>然后使用 cmd 到这个路径下(<code>d:/ngrok/</code>)，执行命令启动并转发本地的 4000 端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ngrok -subdomain demo -config=./config.cfg 4000</span><br></pre></td></tr></table></figure>

<p>运行完了以后会有提示域名，根据提示域名访问，我这里这里为 : <code>http://demo.ngrok.zhaojun.im:8088</code>，访问这个就等于访问到你的 <code>http://127.0.0.1:4000</code> 下的内容了。</p>
<p>更详细的 ngrok 配置，请参考官方文档 : <a href="https://ngrok.com/docs">https://ngrok.com/docs</a></p>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样才算一个好的技术博客？</title>
    <url>/nice_blog/</url>
    <content><![CDATA[<p>作为一个博主，我同样也看过很多其他博主的文章，也在学习，分析，怎样才算一个好的技术博客？</p>
<p>先说说我的感受，我常常在遇到一个问题的时候，上网找答案，大多数找到的都是博客文章，但也发现了一些普遍问题：</p>
<ul>
<li>抄袭严重</li>
<li>排版杂乱</li>
<li>晦涩难懂</li>
</ul>
<span id="more"></span>

<p>我相信你们也会有过这种困扰，寻找问题查到的文章许多都是一模一样的，有些人竟然是直接复制的，连改都懒得改，甚至还把别人的代码块直接复制为普通文本，阅读体验极差！</p>
<p><em>这就好像小时候听到的笑话：小明考试抄同学答案，把对方的名字也抄上了~。</em></p>
<p>我觉得一个好的技术博客起码应该满足以下几点：</p>
<ul>
<li>尽量原创，如转载也请注明出处。</li>
<li>“接地气”，尽量不要弄一些晦涩的公式，可以把问题用通俗易懂的方式讲解出来，也是一种能力。</li>
<li>排版尽量舒适，起码代码应该写在代码块里，可参考 <a href="https://github.com/mzlogin/chinese-copywriting-guidelines">中文文案排版指北（简体中文版）</a>。</li>
<li>尽量保证自己的博客内容是正确的，防止误人子都。</li>
<li>免注册，无广告，博客不是用来赚钱，而只是用来分享的。</li>
</ul>
<p><strong>你们对此有什么看法呢？</strong></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>排版</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>链表倒数第n个节点</title>
    <url>/nth-to-last-node-in-list/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>找到单链表倒数第 n 个节点，保证链表中节点的最少数量为 n 。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出链表 <code>3-&gt;2-&gt;1-&gt;5-&gt;null</code> 和 <code>n = 2</code>，返回倒数第二个节点的值 <code>1</code></p>
<span id="more"></span>

<h2 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h2><p>一个简单的思路就是先将链表进行反转，然后在反转后的链表中，顺着找第 n 个元素即可。</p>
<h2 id="代码实现1"><a href="#代码实现1" class="headerlink" title="代码实现1"></a>代码实现1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head: The first node of linked list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n: An integer.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: Nth to last node of a singly linked list. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode <span class="title">nthToLast</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode node = <span class="keyword">null</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode temp = head.next;</span><br><span class="line">            head.next = node;</span><br><span class="line">            node = head;</span><br><span class="line">            head = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h2><p>考虑一下思路1会出现的问题：当链表很长时，效率会大大降低。例如对于 100 个元素的链表，查找倒数第 100 个，那么就等于将链表遍历了 2 次，效率很低。</p>
<p>改进思路：</p>
<ol>
<li>设 2 个指针 p1, p2</li>
<li>先让指针 p2 指向顺数第 n 个元素，p1 指向原链表的头指针。</li>
<li>然后 p1 和 p2 一起向后移动，直到 p2 指向 NULL，此时 p1 就会指向倒数第 n 个元素上。</li>
</ol>
<h2 id="代码实现2"><a href="#代码实现2" class="headerlink" title="代码实现2"></a>代码实现2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head: The first node of linked list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n: An integer.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: Nth to last node of a singly linked list. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode <span class="title">nthToLast</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        ListNode p1 = head;</span><br><span class="line">        ListNode p2 = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p2.next != <span class="keyword">null</span>) &#123;   </span><br><span class="line">            p1 = p1.next;   </span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/nth-to-last-node-in-list/">LintCode：链表倒数第n个节点</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Oracle 导入导出占用大量表空间的问题</title>
    <url>/oracle-tablespace-shrink/</url>
    <content><![CDATA[<h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>对于 <code>Oracle</code> 而言, 每个表建立是, 都有一个属性为 <code>initial</code>, 表示此表占用的空间大小, 随着数据的新增, 此值也会一直增大, 但删除这个表的数据后, <code>initial</code> 也不会缩小. 所以使用时间越长, 每个表占用的空间都会很大.</p>
<p>且导出后, 其他机器再次导入, 也会占用其同样的 <code>initial </code> 大小.</p>
<span id="more"></span>

<h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p><strong>注意: 进行以下操作前, 要先对数据进行备份. 以防出错!</strong></p>
<h3 id="查询每个用户占用空间大小-dba-用户执行"><a href="#查询每个用户占用空间大小-dba-用户执行" class="headerlink" title="查询每个用户占用空间大小 (dba 用户执行)"></a>查询每个用户占用空间大小 (dba 用户执行)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> owner, <span class="built_in">sum</span>(bytes <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>)  &quot;MB&quot;, <span class="built_in">sum</span>(bytes <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>)  &quot;GB&quot;  <span class="keyword">from</span> dba_segments <span class="keyword">group</span> <span class="keyword">by</span> owner <span class="keyword">order</span> <span class="keyword">by</span> GB <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<p><img src="http://cdn.jun6.net/2020/02/04/dabe148296334.png"></p>
<blockquote>
<p>查询结果中 <code>OWNER</code> 表示用户, 后两列表示占用空间大小, 根据上图所知, <code>DSP2</code> 这个用户, 占用了 <code>18.6GB</code> 的空间. 那么这个用户导出数据后, 其他电脑导入, 也会占用 <code>18.6GB</code>  空间.</p>
</blockquote>
<h3 id="缩小表-initial-空间-dba-用户执行"><a href="#缩小表-initial-空间-dba-用户执行" class="headerlink" title="缩小表 initial 空间 (dba 用户执行)"></a>缩小表 initial 空间 (dba 用户执行)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;ALTER TABLE &#x27;</span><span class="operator">||</span>owner<span class="operator">||</span><span class="string">&#x27;.&#x27;</span><span class="operator">||</span>table_name<span class="operator">||</span><span class="string">&#x27; MOVE TABLESPACE &#x27;</span><span class="operator">||</span>tablespace_name<span class="operator">||</span><span class="string">&#x27; STORAGE(INITIAL 64K NEXT 32K);&#x27;</span> </span><br><span class="line">  <span class="keyword">from</span> dba_tables </span><br><span class="line"> <span class="keyword">where</span> owner<span class="operator">=</span><span class="string">&#x27;DSP2&#x27;</span> <span class="keyword">and</span> initial_extent<span class="operator">&gt;</span><span class="number">65536</span>  </span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<p><img src="http://cdn.jun6.net/2020/02/04/d099aa050db07.png"></p>
<blockquote>
<p>**注意 <code>where owner=&#39;DSP2&#39;</code> 要中的用户改为你要缩小表空间的用户. **</p>
</blockquote>
<h3 id="重建索引-要导出的用户执行"><a href="#重建索引-要导出的用户执行" class="headerlink" title="重建索引 (要导出的用户执行)"></a>重建索引 (要导出的用户执行)</h3><p><strong>这里我切换到 <code>DSP2</code> 用户</strong>, 由于缩小表 <code>initial</code> 空间后, 索引会失效, 需要重建索引.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">  <span class="keyword">cursor</span> c <span class="keyword">is</span> </span><br><span class="line">    <span class="keyword">select</span> index_name, owner </span><br><span class="line">    <span class="keyword">from</span> dba_indexes </span><br><span class="line">    <span class="keyword">where</span> status<span class="operator">=</span><span class="string">&#x27;UNUSABLE&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  owner dba_indexes.owner<span class="operator">%</span>type;</span><br><span class="line">  index_name dba_indexes.index_name<span class="operator">%</span>type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">open</span> c;</span><br><span class="line">  loop </span><br><span class="line">       <span class="keyword">fetch</span> c <span class="keyword">into</span> index_name, owner; </span><br><span class="line">       exit <span class="keyword">when</span> c<span class="operator">%</span>notfound;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">execute</span> immediate <span class="string">&#x27;alter index &#x27;</span> <span class="operator">||</span> owner <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> index_name <span class="operator">||</span> <span class="string">&#x27; rebuild&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line">  <span class="keyword">close</span> c;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="缩小表空间-dba-用户执行"><a href="#缩小表空间-dba-用户执行" class="headerlink" title="缩小表空间 (dba 用户执行)"></a>缩小表空间 (dba 用户执行)</h3><p>查询表空间占用大小和可缩小大小:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.file#,</span><br><span class="line">       a.name,</span><br><span class="line">       a.bytes <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span> CurrentMB,</span><br><span class="line">       <span class="built_in">ceil</span>(HWM <span class="operator">*</span> a.block_size) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span> ResizeTo,</span><br><span class="line">       (a.bytes <span class="operator">-</span> HWM <span class="operator">*</span> a.block_size) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span> ReleaseMB,</span><br><span class="line">       <span class="string">&#x27;alter database datafile &#x27;&#x27;&#x27;</span> <span class="operator">||</span> a.name <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27; resize &#x27;</span> <span class="operator">||</span></span><br><span class="line">       <span class="built_in">ceil</span>(HWM <span class="operator">*</span> a.block_size <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>) <span class="operator">||</span> <span class="string">&#x27;M;&#x27;</span> ResizeCMD</span><br><span class="line">  <span class="keyword">from</span> v$datafile a,</span><br><span class="line">       (<span class="keyword">select</span> file_id, <span class="built_in">max</span>(block_id <span class="operator">+</span> blocks <span class="operator">-</span> <span class="number">1</span>) HWM</span><br><span class="line">          <span class="keyword">from</span> dba_extents</span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> file_id) b</span><br><span class="line"> <span class="keyword">where</span> a.file# <span class="operator">=</span> b.file_id(<span class="operator">+</span>)</span><br><span class="line">   <span class="keyword">and</span> (a.bytes <span class="operator">-</span> HWM <span class="operator">*</span> block_size) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> CURRENTMB <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<p><img src="http://cdn.jun6.net/2020/02/04/8a4b90ac5740c.png"></p>
<p>执行最后一列的命令，进行缩小表空间.</p>
<p>缩小完后, 再次查询用户占用空间大小 <strong>(dba 用户执行)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> owner, <span class="built_in">sum</span>(bytes <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>)  &quot;MB&quot;, <span class="built_in">sum</span>(bytes <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>)  &quot;GB&quot;  <span class="keyword">from</span> dba_segments <span class="keyword">group</span> <span class="keyword">by</span> owner <span class="keyword">order</span> <span class="keyword">by</span> GB <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jun6.net/2020/02/04/46ae7d15e59b5.png"></p>
<p>可见由 <code>18G</code> 占用, 缩小到了 <code>0.2G</code>. 此时这个用户再导出的数据文件, 其他电脑再导入, 就只会占用 <code>0.2G</code> 空间, 而不是 <code>18GB</code>.</p>
<h3 id="彻底清理空间"><a href="#彻底清理空间" class="headerlink" title="彻底清理空间"></a>彻底清理空间</h3><p>上述操作, 只能缩小这个用户部分占用空间, 仅能用于再次导出后, 导入时不会占用大量空间.</p>
<p>如想彻底清空表空间, 可以导出数据后, 删除此用户, 再执行清理命令, 然后再次建立用户导入即可.</p>
<p><strong>一定要注意先备份数据, 且确定导出的数据无误, 再进行此操作.</strong></p>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user 用户名 cascade;</span><br></pre></td></tr></table></figure>

<h4 id="查询表空间占用大小和可缩小大小"><a href="#查询表空间占用大小和可缩小大小" class="headerlink" title="查询表空间占用大小和可缩小大小"></a>查询表空间占用大小和可缩小大小</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.file#,</span><br><span class="line">       a.name,</span><br><span class="line">       a.bytes <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span> CurrentMB,</span><br><span class="line">       <span class="built_in">ceil</span>(HWM <span class="operator">*</span> a.block_size) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span> ResizeTo,</span><br><span class="line">       (a.bytes <span class="operator">-</span> HWM <span class="operator">*</span> a.block_size) <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span> ReleaseMB,</span><br><span class="line">       <span class="string">&#x27;alter database datafile &#x27;&#x27;&#x27;</span> <span class="operator">||</span> a.name <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27; resize &#x27;</span> <span class="operator">||</span></span><br><span class="line">       <span class="built_in">ceil</span>(HWM <span class="operator">*</span> a.block_size <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>) <span class="operator">||</span> <span class="string">&#x27;M;&#x27;</span> ResizeCMD</span><br><span class="line">  <span class="keyword">from</span> v$datafile a,</span><br><span class="line">       (<span class="keyword">select</span> file_id, <span class="built_in">max</span>(block_id <span class="operator">+</span> blocks <span class="operator">-</span> <span class="number">1</span>) HWM</span><br><span class="line">          <span class="keyword">from</span> dba_extents</span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> file_id) b</span><br><span class="line"> <span class="keyword">where</span> a.file# <span class="operator">=</span> b.file_id(<span class="operator">+</span>)</span><br><span class="line">   <span class="keyword">and</span> (a.bytes <span class="operator">-</span> HWM <span class="operator">*</span> block_size) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> CURRENTMB <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p>操作步骤与上方一致. 执行最后一列的缩小表空间的 SQL 即可.</p>
]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>回文链表</title>
    <url>/palindrome-linked-list/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>设计一种方式检查一个链表是否为回文链表。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p><code>1-&gt;2-&gt;1</code> 就是一个回文链表。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="压栈法1"><a href="#压栈法1" class="headerlink" title="压栈法1"></a>压栈法1</h3><p>遍历链表，将其所有元素依次压栈。然后依次出栈与原链表进行比较。</p>
<h3 id="压栈法2"><a href="#压栈法2" class="headerlink" title="压栈法2"></a>压栈法2</h3><p>将链表取一半压入栈中，与另一半进行比较。(采用快慢指针法)。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="压栈法1-1"><a href="#压栈法1-1" class="headerlink" title="压栈法1"></a>压栈法1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head a ListNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;ListNode&gt;();</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.pop().val != head.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="压栈法2-1"><a href="#压栈法2-1" class="headerlink" title="压栈法2"></a>压栈法2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head a ListNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;ListNode&gt;();</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(slow);</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.pop().val != slow.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/palindrome-linked-list/">LintCode：回文链表</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>栈</tag>
        <tag>两根指针</tag>
      </tags>
  </entry>
  <entry>
    <title>奇偶分割数组</title>
    <url>/partition-array-by-odd-and-even/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>分割一个整数数组，使得奇数在前偶数在后。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给定 <code>[1, 2, 3, 4]</code>，返回 <code>[1, 3, 2, 4]</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>两个指针分别从数组两端开始查找，左侧指针依次向右找直到遇到一个偶数为止，右侧指针依次向左找直到遇到一个奇数为止。然后将这两个数置换，然后左右两个指针继续向中间查找，直到两个指针碰头为止。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: an array of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: nothing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partitionArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">while</span> (start &lt; end &amp;&amp; nums[start] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (start &lt; end &amp;&amp; nums[end] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">                nums[start] = nums[end];</span><br><span class="line">                nums[end] = temp;</span><br><span class="line">                start++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/partition-array-by-odd-and-even/">LintCode：奇偶分割数组</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>两根指针</tag>
      </tags>
  </entry>
  <entry>
    <title>无限级菜单/权限树该如何设计</title>
    <url>/permission-tree/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发中我们经常会遇到：导航菜单、部门菜单、权限树、评论等功能。</p>
<p>这些功能都有共同的特点：</p>
<ol>
<li>有父子关系</li>
<li>可无限递归</li>
</ol>
<p>我们以导航菜单为例, 我们将导航菜单设置为动态的, 即从动态加载菜单数据。</p>
<span id="more"></span>

<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>适用于数据库存储的设计如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `menus`</span><br><span class="line">(</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;菜单名称&#x27;</span>,</span><br><span class="line">  `pid` <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;父级 ID, 最顶级为 0&#x27;</span>,</span><br><span class="line">  `<span class="keyword">order</span>` <span class="type">int</span> comment <span class="string">&#x27;排序, 序号越大, 越靠前&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h2><p>对于前端来说, 我们一般需要这种效果:</p>
<p>菜单配置页面:</p>
<p><img src="https://cdn.jun6.net/201811171405_536.png"></p>
<p>对应的导航菜单:</p>
<p><img src="https://cdn.jun6.net/201811171406_457.png"></p>
<p>常用的树形显示插件有: <a href="https://www.jstree.com/">JsTree</a>, <a href="http://www.treejs.cn/v3/main.php#_zTreeInfo">zTree</a>, <a href="https://fly.layui.com/extend/search/tree/">Layui Tree</a>, <a href="https://github.com/jonmiles/bootstrap-treeview">Bootstrap Tree View</a> 等。</p>
<p>这些插件一般需要这两种格式:</p>
<p>基础格式: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;权限管理&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;用户管理&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;角色管理&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;权限管理&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>树形格式: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;权限管理&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;用户管理&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;order&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;角色管理&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;order&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="string">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;权限管理&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;order&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="string">&quot;children&quot;</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>有的插件这两种格式都支持, 而有些只支持树形结构, 但我们数据库查询出来的结果往往又是普通结构, 这时候我们就需要将普通格式转换成树形格式。</p>
<p>这个转换一般是在服务端进行(因为前端插件大多都是请求后台的一个 URL 来接收 JSON 数据, 没有提供加载数据后 - 渲染前的事件, 所以无法在前端完成转换.)</p>
<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>首先有 Java 实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id,</span><br><span class="line">    <span class="keyword">private</span> String name,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pid</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库查询后的一般是在 List 中: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Menu&gt; menus = xxxMapper.selectXXX();</span><br></pre></td></tr></table></figure>

<p>然后我们需要将这个 <code>List</code> 转换为树形结构, 首先定义一个树形结构的 VO 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTreeVO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id,</span><br><span class="line">    <span class="keyword">private</span> String name,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pid,</span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuVo&gt; children,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转换工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> im.zhaojun.model.vo.MenuTreeVO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有待用&quot;菜单&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;MenuTreeVO&gt; all = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为树形</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 所有节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的树结构菜单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;MenuTreeVO&gt; <span class="title">toTree</span><span class="params">(List&lt;MenuTreeVO&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 最初, 所有的 &quot;菜单&quot; 都是待用的</span></span><br><span class="line">        all = <span class="keyword">new</span> ArrayList&lt;&gt;(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到所有的顶级 &quot;菜单&quot;</span></span><br><span class="line">        List&lt;MenuTreeVO&gt; roots = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MenuTreeVO menuTreeVO : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (menuTreeVO.getParentId() == <span class="number">0</span>) &#123;</span><br><span class="line">                roots.add(menuTreeVO);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所有顶级菜单从 &quot;待用菜单列表&quot; 中删除</span></span><br><span class="line">        all.removeAll(roots);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MenuTreeVO menuTreeVO : roots) &#123;</span><br><span class="line">            menuTreeVO.setChildren(getCurrentNodeChildren(menuTreeVO));;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roots;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归函数</span></span><br><span class="line"><span class="comment">     *      递归目的: 拿到子节点</span></span><br><span class="line"><span class="comment">     *      递归终止条件: 没有子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  子节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;MenuTreeVO&gt; <span class="title">getCurrentNodeChildren</span><span class="params">(MenuTreeVO parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断当前节点有没有子节点, 没有则创建一个空长度的 List, 有就使用之前已有的所有子节点.</span></span><br><span class="line">        List&lt;MenuTreeVO&gt; childList = parent.getChildren() == <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList&lt;&gt;() : parent.getChildren();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 &quot;待用菜单列表&quot; 中找到当前节点的所有子节点</span></span><br><span class="line">        <span class="keyword">for</span> (MenuTreeVO child : all) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.getMenuId().equals(child.getParentId())) &#123;</span><br><span class="line">                childList.add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前节点的所有子节点从 &quot;待用菜单列表&quot; 中删除</span></span><br><span class="line">        all.removeAll(childList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有的子节点再寻找它们自己的子节点</span></span><br><span class="line">        <span class="keyword">for</span> (MenuTreeVO menuTreeVO : childList) &#123;</span><br><span class="line">            menuTreeVO.setChildren(getCurrentNodeChildren(menuTreeVO));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> childList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>调用方式: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从数据库获取</span></span><br><span class="line">List&lt;Menu&gt; menus = xxxMapper.selectXXX();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Menu 转为 MenuTreeVO</span></span><br><span class="line">List&lt;MenuTreeVO&gt; menuTreeVOS = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Menu menu : menus) &#123;</span><br><span class="line">    MenuTreeVO menuTreeVO = <span class="keyword">new</span> MenuTreeVO();</span><br><span class="line">    BeanUtils.copyProperties(menu, menuTreeVO);</span><br><span class="line">    menuTreeVOS.add(menuTreeVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用转换方法</span></span><br><span class="line">xxxUtil.toTree(menuTreeVOS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Json 或 ModelAndView 返回给前台.</span></span><br></pre></td></tr></table></figure>

<h2 id="附-模板引擎渲染"><a href="#附-模板引擎渲染" class="headerlink" title="附:模板引擎渲染"></a>附:模板引擎渲染</h2><p>有时我们会使用模板引擎来渲染菜单, 但由于菜单是树形结构的, 所以在模板引擎中单纯的使用 for 是无法完成无限极菜单的渲染的.</p>
<p>这里有一个很新奇的方法, 我以 <code>thymeleaf</code> 引擎为例:</p>
<p>index.html 的导航部分:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;side-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:include</span>=<span class="string">&quot;public::menu($&#123;menus&#125;)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>public.html 公共模板部分:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:fragment</span>=<span class="string">&quot;menu(menus)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;menu:$&#123;menus&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe6b8;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cite</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;menu.menuName&#125;&quot;</span>&gt;</span>系统管理<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont nav_right&quot;</span>&gt;</span><span class="symbol">&amp;#xe697;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sub-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;child:$&#123;menu.children&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#lists.isEmpty(child.children)&#125;&quot;</span> <span class="attr">data-th-_href</span>=<span class="string">&quot;$&#123;child.url&#125;&quot;</span> <span class="attr">_href</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe6a7;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cite</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;child.menuName&#125;&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;#lists.isEmpty(child.children)&#125;&quot;</span> <span class="attr">th:include</span>=<span class="string">&quot;this::menu($&#123;child&#125;)&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基本逻辑就是使用 include 引用模板, 各种模板引擎都有这种功能, 然后判断当前节点有没有子节点, 有的话, 模板文件引用自身, 来完成递归.</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上述代码是在开发一个 Shiro 的权限管理后台的时候的一些思路和代码, 完整的代码可以参考: <a href="https://github.com/zhaojun1998/Shiro-Action">https://github.com/zhaojun1998/Shiro-Action</a></p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
      </tags>
  </entry>
  <entry>
    <title>加一</title>
    <url>/plus-one/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个非负数，表示一个数字数组，在该数的基础上+1，返回一个新的数组。</p>
<p>该数字按照大小进行排列，最大的数在列表的最前面。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给定 <code>[1,2,3]</code> 表示 123, 返回 <code>[1,2,4]</code>.</p>
<p>给定 <code>[9,9,9]</code> 表示 999, 返回 <code>[1,0,0,0]</code>.</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>定义一个变量存储进位数，默认值为 1，然后倒序取数组中的每个元素，依次加上进位数，加上后的值对 10 整除则是新的进位数，对 10 取模则是保留数。</p>
<p>当计算完数组中所有元素，如果进位数还大于0，则创建一个新的数组，在原数组的首元素之前加上进位数即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> digits a number represented as an array of digits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = digits[i] + carry;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            digits[i] = sum % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">            temp[<span class="number">0</span>] = carry;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                temp[i + <span class="number">1</span>] = digits[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/plus-one/">LintCode：加一</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>恢复旋转排序数组</title>
    <url>/recover-rotated-sorted-array/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个<strong>旋转</strong>排序数组，在原地恢复其排序。</p>
<blockquote>
<p><strong>什么是旋转数组？</strong></p>
<p>比如，原始数组为<code>[1,2,3,4]</code>, 则其旋转数组可以是<code>[1,2,3,4]</code>, <code>[2,3,4,1]</code>, <code>[3,4,1,2]</code>, <code>[4,1,2,3]</code></p>
</blockquote>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p><code>[4, 5, 1, 2, 3]</code> -&gt; <code>[1, 2, 3, 4, 5]</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历数组，首先找到当前数大于下一个数的位置，也就是样例中的 5，然后将数组开头的元素到 5 进行翻转，结果是 <code>[5, 4, 1, 2, 3]</code>，然后将后面的元素进行翻转，结果是 <code>[5, 4, 3, 2, 1]</code>，再将整个数组翻转，就得到了最终结果。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: The rotated sorted array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The recovered sorted array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverRotatedSortedArray</span><span class="params">(List&lt;Integer&gt; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums.get(i) &gt; nums.get(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                reverse(nums, <span class="number">0</span>, i);</span><br><span class="line">                reverse(nums, i + <span class="number">1</span>, nums.size() - <span class="number">1</span>);</span><br><span class="line">                reverse(nums, <span class="number">0</span>, nums.size() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List&lt;Integer&gt; list, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = list.get(i);</span><br><span class="line">            list.set(i, list.get(j));</span><br><span class="line">            list.set(j, temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/recover-rotated-sorted-array/">LintCode：恢复旋转排序数组</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>删除排序数组中的重复数字Ⅱ</title>
    <url>/remove-duplicates-from-sorted-array-ii/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>根据 <a href="/remove-duplicates-from-sorted-array/" title="删除排序数组中的重复数字">删除排序数组中的重复数字</a> 中的题意，跟进 ”删除重复数字“，如果可以允许出现两次重复将如何处理？</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出数组 A = <code>[1,1,2,2,2,3]</code>，你的函数应该返回长度 5，此时 A = <code>[1,1,2,2,3]</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题跟 <a href="/remove-duplicates-from-sorted-array/" title="删除排序数组中的重复数字">删除排序数组中的重复数字</a> 差不多，无非就是多判断一次，判断是否有两个连续的重复元素即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A: a array of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> : return an integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.length;) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = nums[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] != now) </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (j - i &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                    nums[index++] = now;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/remove-duplicates-from-sorted-array-ii/">LintCode：删除排序数组中的重复数组Ⅱ</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>删除排序数组中的重复数字</title>
    <url>/remove-duplicates-from-sorted-array/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个排序数组，在原数组中删除重复出现的数字，使得每个元素只出现一次，并且返回新的数组的长度。</p>
<p><strong>不要使用额外的数组空间，必须在原地没有额外空间的条件下完成。</strong></p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出数组nums =<code>[5,6,8,9,9,10]</code>，你的函数应该返回长度5，此时nums = <code>[5,6,8,9,10]</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用 2 个指针，一个指有效元素的长度，一个从前向后扫，跳过重复的元素，将不重复的元素依次放到数组前方，最后返回有效元素的长度即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A: a array of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> : return an integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[size] != nums[i]) &#123;</span><br><span class="line">                nums[++size] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/remove-duplicates-from-sorted-array/">LintCode：删除排序数组中的重复数字</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>删除排序链表中的重复元素</title>
    <url>/remove-duplicates-from-sorted-list/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个排序链表，删除所有重复的元素每个元素只留下一个。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <code>1-&gt;1-&gt;2-&gt;null</code>，返回 <code>1-&gt;2-&gt;null</code></p>
<p>给出 <code>1-&gt;1-&gt;2-&gt;3-&gt;3-&gt;null</code>，返回 <code>1-&gt;2-&gt;3-&gt;null</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>设置一个指针指向排序链表的头结点，遍历链表，若当前元素与下一个元素相同，直接将下一个元素的 next 指向下下个即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode head is the head of the linked list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: ListNode head of linked list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode node = head;</span><br><span class="line">        <span class="keyword">while</span> (node.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.val == node.next.val) &#123;</span><br><span class="line">                node.next = node.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/remove-duplicates-from-sorted-list/">LintCode：删除排序链表中的重复元素 </a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>删除元素</title>
    <url>/remove-element/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个数组和一个值，在原地删除与值相同的数字，返回新数组的长度。</p>
<p>元素的顺序可以改变，并且对新的数组不会有影响。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出一个数组 <code>[0,4,4,0,0,2,4,4]</code>，和值 4</p>
<p>返回 <code>4</code> 并且数组前4个元素为 <code>[0,0,0,2]</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>设两个指针，一个指向当数组头，一个指向数组尾，将头指针依次想尾指针靠近，如果过程中有值等于要删除的值，则将尾指针的值与头指针的值交换，知道两个指针碰头。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> A: A list of integers</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> elem: An integer</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@return</span>: The new length after remove</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> elem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = A.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] == elem) &#123;</span><br><span class="line">                A[i] = A[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/remove-element/">LintCode：删除元素</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>两根指针</tag>
      </tags>
  </entry>
  <entry>
    <title>删除链表中的元素</title>
    <url>/remove-linked-list-elements/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>删除链表中等于给定值 <code>val</code> 的所有节点。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出链表 <code>1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;5-&gt;3</code>, 和 <code>val = 3</code>, 你需要返回删除3之后的链表：<code>1-&gt;2-&gt;4-&gt;5</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>只需要将一个指针，遍历链表，当链表中有元素与 <code>val</code> 值相同时，让当前节点的 <code>next</code> 节点直接指向 当前节点的 <code>next.next</code> 节点即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head a ListNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val an integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        head = dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.next.val == val) &#123;</span><br><span class="line">                head.next = head.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/remove-linked-list-elements/">LintCode：删除链表中的元素</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>删除链表中倒数第n个节点</title>
    <url>/remove-nth-node-from-end-of-list/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个链表，删除链表中倒数第n个节点，返回链表的头节点。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出链表 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</code> 和 <code>n = 2</code>.</p>
<p>删除倒数第二个节点之后，这个链表将变成 <code>1-&gt;2-&gt;3-&gt;5-&gt;null</code>.</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>类似于 <a href="/nth-to-last-node-in-list/" title="链表倒数第n个节点">链表倒数第n个节点</a>，先找到被删除节点的前节点，然后将前节点的 next 指向被删除节点的的 next 即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head: The first node of linked list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n: An integer.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The head of linked list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        </span><br><span class="line">        ListNode preDelete = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            preDelete = preDelete.next;</span><br><span class="line">        &#125;</span><br><span class="line">        preDelete.next = preDelete.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/remove-nth-node-from-end-of-list/">LintCode：删除链表中倒数第n个节点</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>翻转链表 II</title>
    <url>/reverse-linked-list-ii/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>翻转链表中第m个节点到第n个节点的部分</p>
<blockquote>
<p> <strong>注意事项</strong>：<code>m</code>，<code>n</code>满足 <code>1 ≤ m ≤ n ≤ 链表长度</code></p>
</blockquote>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出链表 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</code>， <code>m = 2</code> 和 <code>n = 4</code>，返回 <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;null</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题类似于 <a href="/reverse-linked-list/" title="翻转链表">翻转链表</a>，只不过是限定了翻转的个数而已。<br>可以先记录下 <code>m</code> 节点的前一个节点，与 <code>n</code> 节点的后一个节点，然后将 <code>m - n</code> 进行翻转(参考：<a href="/reverse-linked-list/" title="翻转链表">翻转链表</a> )，最后利用 <code>m</code> 的前节点和 <code>n</code> 的后节点，将链表再次链接起来即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode head is the head of the linked list </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@oaram</span> m and n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The head of the reversed ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m , <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//非空判断</span></span><br><span class="line">    	<span class="keyword">if</span> (m &gt;= n || head == <span class="keyword">null</span>) &#123;</span><br><span class="line">	        <span class="keyword">return</span> head;</span><br><span class="line">	    &#125;</span><br><span class="line">    </span><br><span class="line">	    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">// 插入头节点</span></span><br><span class="line">	    dummy.next = head;</span><br><span class="line">	    head = dummy;</span><br><span class="line">	    </span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123; <span class="comment">// 找到m节点前面一个节点</span></span><br><span class="line">	        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">	            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	        head = head.next;</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    ListNode premNode = head; <span class="comment">// m 之前的那个节点</span></span><br><span class="line">	    ListNode mNode = premNode.next; <span class="comment">// m 节点 </span></span><br><span class="line">	    </span><br><span class="line">	    ListNode nNode = mNode;<span class="comment">// n节点</span></span><br><span class="line">        ListNode postnNode = mNode.next; <span class="comment">// n 之后那个节点 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// n 后节点 插入到n 节点之前 </span></span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt; n; i++) &#123;</span><br><span class="line">	        <span class="keyword">if</span> (postnNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">	            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	        ListNode temp = postnNode.next;  <span class="comment">// 下一个节点</span></span><br><span class="line">	        postnNode.next = nNode;</span><br><span class="line">	        nNode = postnNode;</span><br><span class="line">	        postnNode = temp;</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    mNode.next = postnNode;<span class="comment">// m next 指向 n 后</span></span><br><span class="line">        premNode.next = nNode; <span class="comment">// m 前节点 指向 n </span></span><br><span class="line"></span><br><span class="line">	    </span><br><span class="line">	    <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/reverse-linked-list-ii/">LintCode：翻转链表 II</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>翻转链表</title>
    <url>/reverse-linked-list/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>翻转一个链表</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出一个链表 <code>1-&gt;2-&gt;3-&gt;null</code>，这个翻转后的链表为 <code>3-&gt;2-&gt;1-&gt;null</code></p>
<span id="more"></span>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for ListNode.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head: The head of linked list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: The new head of reversed linked list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode temp = head.next;</span><br><span class="line">            head.next = prev;</span><br><span class="line">            prev = head;</span><br><span class="line">            head = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="https://cdn.jun6.net/dasdqwe.png" alt="翻转链表.png-79.6kB"></p>
<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/reverse-linked-list/">LintCode：翻转链表</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>翻转字符串</title>
    <url>/reverse-words-in-a-string/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个字符串，逐个翻转字符串中的每个单词。</p>
<ul>
<li>单词的构成：无空格字母构成一个单词</li>
<li>输入字符串是否包括前导或者尾随空格？可以包括，但是反转后的字符不能包括</li>
<li>如何处理两个单词间的多个空格？在反转字符串中间空格减少到只含一个</li>
</ul>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>传入一个字符串 <code>&quot; Hello  World!   &quot;</code>,返回 <code>&quot;World! Hello&quot;</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>首先 <code>目标字符串</code> 为 <code>null</code> 或者长度为 <code>0</code>，则直接返回空字符串；</li>
<li>先去除两端的空格之后，再找到 <code>目标字符串</code> 的第一个空格的位置</li>
<li>然后用 <code>subString()</code> 将第一个空格之前的子字符串压入栈中</li>
<li>将目标字符串剩下的另一半子字符串继续进行第二步操作，直至 <code>目标字符串</code> 的长度变为0</li>
<li>将栈中的所有元素以此出栈，除最后一个元素外，其他元素尾部都加上一个空格: <code>&quot; &quot;</code></li>
</ol>
<blockquote>
<p>注意当目标字符串没有空格时，取第一个空格的位置会返回 <code>-1</code> ，此时用这个位置去取字符串会出现下标越界！</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s : A string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> : A string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    	</span><br><span class="line">    	Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">while</span> (s.length() != <span class="number">0</span>) &#123;</span><br><span class="line">    	    s = s.trim();  </span><br><span class="line">	    	<span class="keyword">int</span> i = s.indexOf(<span class="string">&quot; &quot;</span>);</span><br><span class="line">	    	</span><br><span class="line">	    	<span class="keyword">if</span> ( i== -<span class="number">1</span>) &#123;</span><br><span class="line">	    		stack.push(s);</span><br><span class="line">	    		<span class="keyword">break</span>;</span><br><span class="line">	    	&#125;</span><br><span class="line">	    	</span><br><span class="line">	    	stack.push( s.substring(<span class="number">0</span>, i) );</span><br><span class="line">	    	s = s.substring(i, s.length());</span><br><span class="line">	    	</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    		<span class="keyword">if</span>(stack.size()==<span class="number">1</span>)</span><br><span class="line">    			str = str + stack.pop();</span><br><span class="line">    		<span class="keyword">else</span> </span><br><span class="line">    			str = str + stack.pop() + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/reverse-words-in-a-string/">LintCode：翻转字符串</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>旋转链表</title>
    <url>/rotate-list/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个链表，旋转链表，使得每个节点向右移动 k 个位置，其中 k 是一个非负数</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出链表 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null</code> 和 <code>k=2</code></p>
<p>返回 <code>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;null</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>设链表长度为 n,<br>当 <code>k = n</code> 时，链表旋转后的结果就是原链表（当 k 为 n 的倍数时，结果也是一样）。</p>
<p>当 <code>k &lt; n</code> 时，其实旋转链表就是将第 <code>n - k</code> 个元素后的所有元素都放在该链表的头结点之前，并把第 <code>n - k</code> 个元素的下一个节点指向 <code>null</code> 即可。</p>
<p>当 <code>k &gt; n</code> 时，则说明不止需要旋转一圈，但多旋转一圈其实跟多旋转两圈没什么区别，所以只需要将链表旋转 <code>k % n </code> 个位置即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head: the List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k: rotate to the right k places</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: the list after rotation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取链表长度，并得到尾节点的指针。</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        k = k % len;  <span class="comment">//去除需要多旋转的圈数</span></span><br><span class="line">        p.next = head; <span class="comment">//将链表首尾相连，结成环形。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - k; i++) &#123;</span><br><span class="line">            p = p.next;     <span class="comment">//旋转链表</span></span><br><span class="line">        &#125;</span><br><span class="line">        head = p.next;  <span class="comment">//新的链表头</span></span><br><span class="line">        p.next = <span class="keyword">null</span>;  <span class="comment">//断开环形链表。</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/rotate-list/#">LintCode：旋转链表</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索二维矩阵Ⅱ</title>
    <url>/search-a-2d-matrix-ii/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>写出一个高效的算法来搜索 <code>m * n</code> 矩阵中的值，返回这个值出现的次数。</p>
<p>这个矩阵具有以下特性：</p>
<ul>
<li>每行中的整数从左到右是排序的。</li>
<li>每一列的整数从上到下是排序的。</li>
<li>在每一行或每一列中没有重复的整数。</li>
</ul>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>考虑下列矩阵：</p>
<pre><code>[

    [1, 3, 5, 7],

    [2, 4, 7, 8],

    [3, 5, 9, 10]

]
</code></pre>
<p>给出 <code>target = 3</code>，返回 <code>2</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先根据该矩阵的特性可得以下的规律：</p>
<ul>
<li>左下角的右侧均比其右侧的数字大</li>
<li>左下角的下侧均比其左侧的数字大</li>
</ul>
<p>所以根据此规律可得搜索思路：</p>
<ol>
<li>从左下角开始搜索</li>
<li>如果此数比目标数大，则向上移动一位</li>
<li>如果此数比目标数小，则向右移动一位</li>
<li>如果此数等于目标数，则向上移动一位，再向右移动一位。</li>
<li>直至到最右侧或者最上侧为止。</li>
</ol>
<blockquote>
<p>从右上角搜索思路类似，只是方向不同。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix: A list of lists of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: A number you want to search in the matrix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer indicate the occurrence of target in the given matrix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> x = n - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (x &gt;= <span class="number">0</span> &amp;&amp; y &lt; m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[x][y] &gt; target) &#123;</span><br><span class="line">                x--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[x][y] &lt; target) &#123;</span><br><span class="line">                y++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x--;</span><br><span class="line">                y++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/search-a-2d-matrix-ii/">LintCode：搜索二维矩阵Ⅱ</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索二维矩阵Ⅰ</title>
    <url>/search-a-2d-matrix/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>写出一个高效的算法来搜索 <code>m * n</code> 矩阵中的值。</p>
<p>这个矩阵具有以下特性：</p>
<ul>
<li>每行中的整数从左到右是排序的。</li>
<li>每行的第一个数大于上一行的最后一个整数。</li>
</ul>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>考虑下列矩阵：</p>
<pre><code>[

    [1, 3, 5, 7],

    [10, 11, 16, 20],

    [23, 30, 34, 50]

]
</code></pre>
<p>给出 <code>target = 3</code>，返回 <code>true</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以先对每一行的第一列进行纵向二分查找，确定目标数大概在哪一行，然后再对那一行进行二分查找。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix, a list of lists of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target, an integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a boolean, indicate whether matrix contains target</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> high = matrix.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] == target)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] &gt; target)</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> row = mid;</span><br><span class="line">        <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid &gt; <span class="number">0</span>)</span><br><span class="line">                row = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        low = <span class="number">1</span>;</span><br><span class="line">        high = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (matrix[row][mid] == target)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (matrix[row][mid] &gt; target)</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/search-a-2d-matrix/">LintCode：搜索二维矩阵Ⅰ</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>矩阵</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索插入位置</title>
    <url>/search-insert-position/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个排序数组和一个目标值，如果在数组中找到目标值则返回索引。如果没有，返回到它将会被按顺序插入的位置。</p>
<p>你可以假设在数组中无重复元素。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p><code>[1,3,5,6]</code>，5 → 2</p>
<p><code>[1,3,5,6]</code>，2 → 1</p>
<p><code>[1,3,5,6]</code>，7 → 4</p>
<p><code>[1,3,5,6]</code>，0 → 0</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>跟普通的二分查找类似，循环的条件是 <code>min &lt;= max</code>，如果 <code>target</code> 和 <code>mid</code> 指向的值相等，则返回 <code>mid</code>，否则根据情况 <code>min = mid + 1</code> 或者<code> max = mid - 1</code>。<br>这样如果找不到该数，<code>max</code> 是比该数小的那个数的下标，而 <code>min</code> 是比该数大的那个数的下标。这题中，我们返回 <code>min</code> 就行了，如果返回 <code>max</code>，要注意 -1 的情况。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * param A : an integer sorted array</span></span><br><span class="line"><span class="comment">     * param target :  an integer to be inserted</span></span><br><span class="line"><span class="comment">     * return : an integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = A.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (min &lt;= max) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = min +  (max - min) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (A[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt; target) &#123;</span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/search-insert-position/">LintCode：搜索插入位置</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 认证</title>
    <url>/shiro-01/</url>
    <content><![CDATA[<p>认证在 Shiro 中被称为 <strong>Authentication</strong>，用来验证用户是不是拥有相应的身份，也可以理解为登陆时校验登陆凭证的过程。</p>
<span id="more"></span>

<p>首先需要导包，这里我们通过 maven 坐标的方式进行引用, 导入 shrio 和 junit 的包:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后创建一个测试类来简单认识一下 Shiro 的认证流程:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticateTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个 Realm</span></span><br><span class="line">    <span class="keyword">private</span> SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为 Realm 添加一个账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        simpleAccountRealm.addAccount(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用户认证(登陆)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthenticate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建 SecurityManager 环境</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为 SecurityManager 设置 Realm</span></span><br><span class="line">        defaultSecurityManager.setRealm(simpleAccountRealm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 SecurityManager 放入 SecurityUtils 这个工具类中</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取一个 Subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个账号密码, 在 web 应用中一般为表单上填写并传入后台.</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行登陆操作</span></span><br><span class="line">        subject.login(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证是否为登陆状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否登陆: &quot;</span> + subject.isAuthenticated());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登陆成功的话，<code>subject.isAuthenticated()</code>会返回 <code>true</code> 。</p>
<p>登陆失败的话，会抛出相应的异常，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UnknownAccountException             # 未知账户&#x2F;没找到帐号</span><br><span class="line">IncorrectCredentialsException       # 错误的凭证(密码)异常</span><br></pre></td></tr></table></figure>

<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-01/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-01/</a></p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 授权</title>
    <url>/shiro-02/</url>
    <content><![CDATA[<p>授权在 Shiro 中被称为 <strong>Authorization</strong>，用来<strong>验证用户是否具备某个角色或权限</strong>。</p>
<span id="more"></span>

<p>首先需要导包，这里我们通过 maven 坐标的方式进行引用, 导入 shrio 和 junit 的包:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>然后创建一个测试类来简单认识一下 Shiro 的授权流程:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个 Realm</span></span><br><span class="line">    <span class="keyword">private</span> SimpleAccountRealm simpleAccountRealm = <span class="keyword">new</span> SimpleAccountRealm();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为 Realm 添加一个账户, 并赋予 admin 角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        simpleAccountRealm.addAccount(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用户授权(是否具备某个角色或权限)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建 SecurityManager 环境</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为 SecurityManager 设置 Realm</span></span><br><span class="line">        defaultSecurityManager.setRealm(simpleAccountRealm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 SecurityManager 放入 SecurityUtils 这个工具类中</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取一个 Subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个账号密码</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行登陆操作</span></span><br><span class="line">        subject.login(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证是否为登陆状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否登陆: &quot;</span> + subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证是否具备某个角色</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备admin角色: &quot;</span> + subject.hasRole(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若登陆的用户具备 admin 角色的话，<code>subject.hasRole(&quot;admin&quot;)</code> 会返回 true，反之返回 false。</p>
<p>也可以使用 <code>subject.checkRole(&quot;admin&quot;)</code> 来校验，此方法没有返回值，但如账户不具备此角色，会抛出 <code>UnauthorizedException</code> 异常。    </p>
<p>还有 <code>subject.hasAllRoles(Collection&lt;String&gt; collection)</code> 及 <code>subject.CheckRoles(String... strings)</code> 等 API 用来判断用来进行其他方式的校验角色。</p>
<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-02/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-02/</a></p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro Realm</title>
    <url>/shiro-03/</url>
    <content><![CDATA[<h2 id="Realm-是什么"><a href="#Realm-是什么" class="headerlink" title="Realm 是什么"></a>Realm 是什么</h2><p>Realm: 域，Shiro 从 Realm 中获取用户，角色，权限信息。可以把 Relam 看成 DataSource，即安全数据源。</p>
<blockquote>
<p> 在前两章的认证和授权中，我们也使用到了 <code>SimpleAccountRealm</code>，并通过其 <code>addAccount(username, password, roles)</code> 来预设用户和角色信息。</p>
</blockquote>
<span id="more"></span>



<h2 id="IniRealm"><a href="#IniRealm" class="headerlink" title="IniRealm"></a>IniRealm</h2><p>IniRealm 顾名思义，即通过读取 <code>.ini</code> 文件来获取用户，角色，权限信息。</p>
<p>配置用户名/密码及其角色, 格式: “用户名=密码，角色1，角色2”，如:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">zhao</span> = <span class="number">123456</span>, admin, user</span><br><span class="line"><span class="attr">wang</span> = <span class="number">123456</span>, user</span><br></pre></td></tr></table></figure>



<p>配置角色及权限之间的关系, 格式: “角色=权限1, 权限2”, 如:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">admin</span> = user:delete</span><br><span class="line"><span class="attr">user</span> = user:select</span><br></pre></td></tr></table></figure>



<p>结合起来，即 : </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">zhao</span> = <span class="number">123456</span>, admin, user</span><br><span class="line"><span class="attr">wang</span> = <span class="number">123456</span>, user</span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">admin</span> = user:delete</span><br><span class="line"><span class="attr">user</span> = user:select</span><br></pre></td></tr></table></figure>



<p>然后进行测试 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.text.IniRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IniRealmTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIniRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        Realm iniRealm = <span class="keyword">new</span> IniRealm(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        defaultSecurityManager.setRealm(iniRealm);</span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------认证--------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 admin 权限: &quot;</span> + subject.hasRole(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 user 权限: &quot;</span> + subject.hasRole(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否同时具备 admin 和 user 权限: &quot;</span> + subject.hasAllRoles(Arrays.asList(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;user&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------授权--------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 user:delete 权限&quot;</span> + subject.isPermitted(<span class="string">&quot;user:delete&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 user:select 权限&quot;</span> + subject.isPermitted(<span class="string">&quot;user:select&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否同时具备 user:delete 和 user:select 权限&quot;</span> + subject.isPermittedAll(<span class="string">&quot;user:delete&quot;</span>, <span class="string">&quot;user:select&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>跟前两章的代码没有什么不同，只是将 SimpleAccountRealm 换成了 IniRealm。</p>
</blockquote>
<h2 id="JdbcRelam"><a href="#JdbcRelam" class="headerlink" title="JdbcRelam"></a>JdbcRelam</h2><p>JdbcRelam 顾名思义，即通过通过访问数据库来获取用户，角色，权限信息。</p>
<p>首先需要导入 <code>mysql</code> 的驱动包和 <code>druid</code> 数据库连接池的包:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建数据库表和初始化数据 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for roles_permissions</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `roles_permissions`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles_permissions` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `permission` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_roles_permissions` (`role_name`,`permission`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of roles_permissions</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `roles_permissions` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;user:delete&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `roles_permissions` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;user:select&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password_salt` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_users_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_roles</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_roles`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_roles` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_user_roles` (`username`,`role_name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user_roles</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_roles` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhao&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_roles` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;zhao&#x27;</span>, <span class="string">&#x27;user&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.jdbc.JdbcRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro JdbcRealm 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcRealmTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/shiro&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJdbcRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建 JdbcRelam</span></span><br><span class="line">        JdbcRealm jdbcRealm = <span class="keyword">new</span> JdbcRealm();</span><br><span class="line">        <span class="comment">// 为 JdbcRelam 设置数据源</span></span><br><span class="line">        jdbcRealm.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 设置启用权限查询, 默认为 false</span></span><br><span class="line">        jdbcRealm.setPermissionsLookupEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        defaultSecurityManager.setRealm(jdbcRealm);</span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------认证--------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 admin 权限: &quot;</span> + subject.hasRole(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 user 权限: &quot;</span> + subject.hasRole(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否同时具备 admin 和 user 权限: &quot;</span> + subject.hasAllRoles(Arrays.asList(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;user&quot;</span>)));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------授权--------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 user:delete 权限&quot;</span> + subject.isPermitted(<span class="string">&quot;user:delete&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 user:select 权限&quot;</span> + subject.isPermitted(<span class="string">&quot;user:select&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否同时具备 user:delete 和 user:select 权限&quot;</span> + subject.isPermittedAll(<span class="string">&quot;user:delete&quot;</span>, <span class="string">&quot;user:select&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这里也只是将 Relam 修改了一下，其他代码是一样的。</p>
<p>细心的朋友可能会有疑问，我们这里没有写一行查询语句，那么Shiro 怎么知道你的数据库结构的，它如何来查询角色和权限信息。</p>
<p>其实我们点开 <code>JdbcRelam</code> 的源码看看就知道了，它内置了默认的查询角色和权限的 SQL 语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_AUTHENTICATION_QUERY = <span class="string">&quot;select password from users where username = ?&quot;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SALTED_AUTHENTICATION_QUERY = <span class="string">&quot;select password, password_salt from users where username = ?&quot;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_USER_ROLES_QUERY = <span class="string">&quot;select role_name from user_roles where username = ?&quot;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PERMISSIONS_QUERY = <span class="string">&quot;select permission from roles_permissions where role_name = ?&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>而上面我们建立的表结构是符合这些查询语句的。</p>
<p>但在实际项目开发中，我们不可能完全按照 Shiro 提供的这种方式来建表，我们可以通过修改 JdbcRealm 的默认查询语句来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbcRealm.setAuthenticationQuery(String authenticationQuery);</span><br><span class="line">jdbcRealm.setPermissionsQuery(String permissionsQuery);</span><br><span class="line">jdbcRealm.setUserRolesQuery(String userRolesQuery);</span><br></pre></td></tr></table></figure>



<h2 id="自定义-Relam"><a href="#自定义-Relam" class="headerlink" title="自定义 Relam"></a>自定义 Relam</h2><p>在真实项目开发中，我们往往会使用自定义 Realm 来实现一些自定义的功能，如判断账号锁定，账号登陆次数限制等。</p>
<p>我们需要创建一个类来继承 <code>AuthorizingRealm</code> ，并实现其抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> im.zhaojun.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义 Realm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户凭证查询所用拥有的角色和权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection 用户凭证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回授权信息，包含所拥有的角色和权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        String username = (String)principalCollection.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据用户名其所拥有的角色和权限</span></span><br><span class="line">        Set&lt;String&gt; roles = selectRolesByUserName(username);</span><br><span class="line">        Set&lt;String&gt; permissions = selectPermissionsByUserName(username);</span><br><span class="line"></span><br><span class="line">        authorizationInfo.setRoles(roles);</span><br><span class="line">        authorizationInfo.setStringPermissions(permissions);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户提交的凭证查询是否具有这个用户 (这里不判断密码是否正确)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken 用户凭证 (账户密码)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 相应的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException 当用户不存在或具备其他状态, 如被锁定, 等状态会抛出相应的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个方法也可以使用 DAO 层的方法来查询数据库，返回 user 对象。</span></span><br><span class="line">        User user = selectUserByUserName((String) authenticationToken.getPrincipal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">&quot;账号不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), <span class="keyword">super</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">selectPermissionsByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; permissions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// 假设只有 zhao 这个用户具备 select 权限</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;zhao&quot;</span>.equals(username)) &#123;</span><br><span class="line">            permissions.add(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permissions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">selectRolesByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设只有 zhao 这个用户具备 user 角色</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;zhao&quot;</span>.equals(username)) &#123;</span><br><span class="line">            roles.add(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> User <span class="title">selectUserByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设当前只有 zhao - 123465 这个账户.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;zhao&quot;</span>.equals(username)) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> User(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的代码也很简单，主要是实现了父类的抽象方法 : </p>
<ul>
<li><code>doGetAuthenticationInfo</code> : 获取用户认证信息，在这里我们不需要校验密码是否正确，因为有专门的密码校验器来做这件事，我们只需要返回<strong>认证信息</strong>即可。 <em>(认证信息在这个示例中为 <code>SimpleAuthenticationInfo</code>， 即账号密码)</em><br>当然你也可以在返回认证信息前根据用户的状态，如冻结，锁定，或登陆次数来抛出相应的异常，以直接返回登陆失败，而不再进行密码校验。</li>
<li><code>doGetAuthorizationInfo</code> : 获取用户授权信息，授权信息包括所拥有的角色和权限信息，这里的逻辑很简单，只需要根据用户信息查询出角色和权限，配置到 <code>AuthorizationInfo</code> 中返回即可 。 </li>
</ul>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> im.zhaojun.realm.MyCustomRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义 Realm 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomRealmTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCustomRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        MyCustomRealm realm = <span class="keyword">new</span> MyCustomRealm();</span><br><span class="line">        securityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        subject.login(token);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 user 角色: &quot;</span> + subject.hasRole(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否具备 select 权限: &quot;</span> + subject.isPermitted(<span class="string">&quot;select&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-03/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-03/</a></p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 加密</title>
    <url>/shiro-04/</url>
    <content><![CDATA[<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>安全总是最重要的，对于用户的数据，我们一般都不会以原密码明文保存，而是经过加密后保存。</p>
<p>比较常见的是，当注册时使用 <code>MD5</code> 散列算法对初始密码处理后存入数据库，而后每次登陆请求，对用户输入的密码也进行 <code>MD5</code> 散列后与数据库中的散列后的密码进行匹配，已达到加密的目的。</p>
<span id="more"></span>




<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="MD5-加密"><a href="#MD5-加密" class="headerlink" title="MD5 加密"></a>MD5 加密</h3><p>Shiro 对加密处理也提供了相应的 API，老规矩，先导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先来试试最简单的，将密码进行 <code>md5</code> 散列后输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleEncryption</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(password);</span><br><span class="line">    System.out.println(md5Hash.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output result: e10adc3949ba59abbe56e057f20f883e</span></span><br></pre></td></tr></table></figure>



<h3 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h3><p>但上面这种加密其实安全性也不高，因为可以建立一个 <code>密码 - hash</code> 对应表，根据存储的海量数据，对 md5 进行”反解密”，如我们通过网站 : <a href="http://www.cmd5.com/"></a>，将密文输入进去，即可 “反解密”。</p>
<p><img src="https://cdn.jun6.net/201808141103_26.png"></p>
<p>这时候就需要<strong>盐</strong>的存在，即我们对原始密码，加一些佐料：盐。</p>
<p>如刚才我们的密码 <code>123456</code>，盐为 <code>ShiroStudy</code>，我们可以将盐加入到密码前或密码后，结果就是: <code>123456ShiroStudy</code>，这时再进行 <code>md5</code> 加密：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSlatEncryption</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    String slat = <span class="string">&quot;ShiroStudy&quot;</span>;</span><br><span class="line">    Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(password, ByteSource.Util.bytes(slat));</span><br><span class="line">    System.out.println(md5Hash.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output result : ac7351ab94f40504aab7ac7fdf4ddad3</span></span><br></pre></td></tr></table></figure>

<p><code>Md5Hash(source, slat)</code> 构造函数的第二个参数就是盐，但他需要的是 <code>ByteSource</code> 类型的盐，所以我们需要将字符串类型的盐通过他的工具类转换成 <code>ByteSource</code> 类型，即：<code>ByteSource.Util.bytes(slat)</code>。</p>
<p>这次我们再去尝试 “反解密” : </p>
<p><img src="https://cdn.jun6.net/201808141119_352.png"></p>
<h2 id="集成-Relam"><a href="#集成-Relam" class="headerlink" title="集成 Relam"></a>集成 Relam</h2><p>使用加密后，我们需要告诉 Relam，我们使用了哪种加密算法。</p>
<p>首先自定义定义 Relam：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> im.zhaojun.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义 Realm, 使用了加密, 盐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户凭证查询所用拥有的角色和权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection 用户凭证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回授权信息，包含所拥有的角色和权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户提交的凭证查询是否具有这个用户 (这里不判断密码是否正确)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken 用户凭证 (账户密码)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 相应的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException 当用户不存在或具备其他状态, 如被锁定, 等状态会抛出相应的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个方法也可以使用 DAO 层的方法来查询数据库，返回 user 对象。</span></span><br><span class="line">        User user = selectUserByUserName((String) authenticationToken.getPrincipal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">&quot;账号不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 告诉 Relam, 校验密码时需要加的盐.</span></span><br><span class="line">        ByteSource slat = ByteSource.Util.bytes(<span class="string">&quot;ShiroStudy&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), slat, <span class="keyword">super</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">selectPermissionsByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">selectRolesByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> User <span class="title">selectUserByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是 <code>doGetAuthenticationInfo</code> 方法，其他的代码与上一章的基本相同。</p>
<p>在 <code>doGetAuthenticationInfo</code> 中我们返回的 <code>AuthenticationInfo</code>  信息中，将盐加了进去。</p>
<p>我们来测试下这个 Realm : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> im.zhaojun.realm.MyCustomRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro 加密测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptionTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEncryptionRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Relam</span></span><br><span class="line">        MyCustomRealm realm = <span class="keyword">new</span> MyCustomRealm();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建密码匹配器</span></span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 告诉 Realm 密码匹配方式</span></span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line"></span><br><span class="line">        securityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前登陆状态: &quot;</span> + subject.isAuthenticated());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们需要为 Relam 指定一个 <code>CredentialsMatcher</code>，这里我们使用他的一个是实现类 : <code>HashedCredentialsMatcher</code>，并设置加密算法为 <code>md5</code>。</p>
<blockquote>
<p>基本的加密使用就这些，具体的细节上，还有更多的加密算法，加密次数等内容，本篇为不对新手造成更多的初学负担，便不再展开，如需要深入了解，请自行查询。</p>
</blockquote>
<p>本章代码地址：<a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-04/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-04/</a></p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 集成 Spring</title>
    <url>/shiro-05/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章我们来学习 Shiro 集成 Spring，即在 Web 环境下如何使用 Shiro 来进行权限控制。</p>
<p>本章所需知识：</p>
<ul>
<li>Shiro 认证 &amp;&amp; 授权</li>
<li>Spring、SpringMVC</li>
</ul>
<span id="more"></span>


<h2 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring MVC 依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Shiro 依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Log4j 日志依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SLF4J 与 Log4j 适配包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:spring.xml,</span><br><span class="line">        classpath:spring-shiro.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-web.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>比较常见的 Spring 配置，这里就不过多介绍了。我们需要 3 个配置文件，分别为 <code>spring.xml</code>, <code>spring-web.xml</code>, <code>spring-shiro.xml</code>。</p>
<p>我们暂时只需要配置 <code>spring-web.xml</code>, <code>spring-shiro.xml</code> 即可 (<code>spring.xml</code> 文件也需要创建，但不需要配置东西)。</p>
<h3 id="spring-web-xml"><a href="#spring-web-xml" class="headerlink" title="spring-web.xml"></a>spring-web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;im.zhaojun.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="spring-shiro-xml"><a href="#spring-shiro-xml" class="headerlink" title="spring-shiro.xml"></a>spring-shiro.xml</h3><p>之前我们都是手工 <code>new</code> 一个 <code>DefaultSecurityManager</code> ，但既然用到了 Spring，就将交由 Spring 容器来管理 : </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shiro 过滤器, 要与 web.xml 中的 Filter Name 相同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录页面, 未认证时访问需要认证或授权的资源会自动跳转到此页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录成功页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/index.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录后, 访问未授权的资源会跳转到此页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;unauthorizedUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/unauthorized.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /login.jsp = anon</span><br><span class="line">            /login = anon</span><br><span class="line">            /user.jsp = roles[user]</span><br><span class="line">            /admin.jsp = roles[admin]</span><br><span class="line">            /userList.jsp = perms[select]</span><br><span class="line">            /** = authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义 Relam --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myRealm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;im.zhaojun.realm.MyRealm&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>securityManager 和自定义 Realm 的配置很容易理解，但 shiroFilter 是个啥东西呢？</p>
<p>其实他是 Shiro 的权限过滤器，用来在 web 环境下对权限进行过滤，既然是一个 Filter，显然我们还需要在 web.xml 中增加 Shiro 的 Filter 配置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里的 <code>filter-name</code> 一定要与 <code>spring-shiro.xml</code> 中我们配置的对应的 bean 的名称相同。在此示例中均为 ：**<code>shiroFilter</code>**。</p>
</blockquote>
<p>这里还有一个 <code>filterChainDefinitions</code> 表示的是过滤器链，即从上到下以此判断，直到获取到当前请求资源的权限。</p>
<p>此处我们将 <code>/login.jsp</code> 和 <code>/login</code> 配置成 <em>anon</em>，表示的是可以<strong>匿名访问</strong>。</p>
<p><code>user.jsp</code> 配置为 *roles[user]*， 表示的是需要 <strong>user 角色</strong>可以访问。<br><code>admin.jsp</code> 配置为 *roles[admin]*， 表示的是需要 <strong>admin 角色</strong>可以访问。</p>
<p><code>userList.jsp</code> 配置为 *perms[select]*，表示的是需要 <strong>select 权限</strong>才可访问。</p>
<p><code>/**</code> 配置为 <em>authc</em> 表示的是所有页面都需要<strong>认证</strong>(登录)后才可访问。</p>
<p>当然还有更多的权限通配符，以及自定义权限通配符，我们会在后面的章节讲到</p>
<h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Index Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    username : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    password : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="user-jsp"><a href="#user-jsp" class="headerlink" title="user.jsp"></a>user.jsp</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>User Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="admin-jsp"><a href="#admin-jsp" class="headerlink" title="admin.jsp"></a>admin.jsp</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Admin Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Admin Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="userList-jsp"><a href="#userList-jsp" class="headerlink" title="userList.jsp"></a>userList.jsp</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>UserList Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>UserList Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><h3 id="MyRealm"><a href="#MyRealm" class="headerlink" title="MyRealm"></a>MyRealm</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> im.zhaojun.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义 Relam</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;MyRealm doGetAuthorizationInfo...&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拥有 admin 角色</span></span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        roles.add(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        authorizationInfo.setRoles(roles);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拥有权限</span></span><br><span class="line">        Set&lt;String&gt; permissions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        permissions.add(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">        authorizationInfo.setStringPermissions(permissions);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MyRealm doGetAuthenticationInfo...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String username = (String) authenticationToken.getPrincipal();</span><br><span class="line">        User user = selectUserByUserName(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">&quot;当前账户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), <span class="keyword">super</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟查询数据库, 假设数据库只有 zhao - 123456 这条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询到的用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> User <span class="title">selectUserByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;zhao&quot;</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(username, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当前只有一个用户，账户为 <code>zhao</code>， 密码为 <code>123456</code>。且拥有 <code>admin</code> 角色和 <code>select</code> 权限。</p>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> im.zhaojun.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录 Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(user.getUsername(), user.getPassword());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录成功，返回 <code>login success</code>，登录失败则返回对应的异常信息。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="过滤器基本测试"><a href="#过滤器基本测试" class="headerlink" title="过滤器基本测试"></a>过滤器基本测试</h3><p>启动 web 服务，默认情况下会访问 <code>index.jsp</code>，但我们启动启动项目后自动跳转到了 <code>login.jsp</code>，且手动访问 <code>index.jsp</code> 页面也会自动跳转到 <code>login.jsp</code>。</p>
<p>原因是因为我们在 <code>filterChainDefinitions</code> 过滤器链中仅为 <code>login.jsp</code> 与 <code>login</code> 配置了可匿名访问，而 <code>index.jsp</code> 这上述配置中的是需要认证后才可访问。</p>
<blockquote>
<p>由此可见 <code>filterChainDefinitions</code>，过滤器链是正常的。</p>
</blockquote>
<h3 id="认证-登录测试"><a href="#认证-登录测试" class="headerlink" title="认证/登录测试"></a>认证/登录测试</h3><h4 id="认证失败"><a href="#认证失败" class="headerlink" title="认证失败"></a>认证失败</h4><p>先来试试用户名错误 (使用  <code>admin</code>, <code>123456</code> 来进行登录)，返回结果为 <code>当前账户不存在 </code>，因为我们在 Realm 中抛出了  <code>UnknownAccountException</code> 异常，并设置了相应的 message，所以在 controller 中捕获到了异常并返回给了页面。</p>
<p>再来试试密码错误 (使用 <code>zhao</code>, <code>123456</code> 来进行登录)，返回结果为 <code>Submitted credentials for token [org.apache.shiro.authc.UsernamePasswordToken - zhao, rememberMe=false] did not match the expected credentials.</code>。</p>
<h4 id="认证成功"><a href="#认证成功" class="headerlink" title="认证成功"></a>认证成功</h4><p>使用正常的账号密码进行登录，返回结果为 <code>login success</code>。</p>
<blockquote>
<p>由此可见认证成功和失败的功能是正常的。</p>
</blockquote>
<h3 id="授权测试"><a href="#授权测试" class="headerlink" title="授权测试"></a>授权测试</h3><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>我们在过滤器链中关于角色的配置有：<code>/user.jsp = roles[user]</code> 和 <code>/admin.jsp = roles[admin]</code>。下面测试，假设以账号是 <code>zhao</code> 为例 (具备 <code>user</code> 角色)：</p>
<ul>
<li>未登录情况下：访问 <code>user.jsp</code> 会跳转到登录页面。</li>
<li>已登录 <code>zhao</code> 且具备相应的角色：可以正常访问 <code>user.jsp</code>。</li>
<li>已登录 <code>zhao</code> 且未具备相应的角色：访问 <code>admin.jsp</code>会跳转到 <code>unauthorized.jsp</code>。</li>
</ul>
<h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>我们在过滤器链中关于权限的配置有：<code>/userList.jsp = perms[select]</code>。下面测试，假设以账号是 <code>zhao</code> 为例 (具备 <code>select</code> 权限)：</p>
<ul>
<li>未登录情况下：访问 <code>userList.jsp</code> 会跳转到登录页面。</li>
<li>已登录 <code>zhao</code> 且具备相应的权限：可以正常访问 <code>userList.jsp</code>。</li>
<li>已登录 <code>zhao</code> 且未具备相应的权限：和不具备角色一样会跳转到 <code>unauthorized.jsp</code>。 </li>
</ul>
<h3 id="缓存测试"><a href="#缓存测试" class="headerlink" title="缓存测试"></a>缓存测试</h3><p>可能细心的朋友会注意到我在 <code>MyRealm</code> 中的 <code>doGetAuthorizationInfo()</code> 和 <code>doGetAuthenticationInfo()</code> 分别加了一条输出语句，会有以下效果：</p>
<p>认证时会触发 <code>doGetAuthenticationInfo</code> 中的输出语句，证明每次登陆都会调用该方法。</p>
<p>授权时同样会触发 <code>doGetAuthorizationInfo</code> 中的输出语句，且每次授权也需要调用此方法一次。</p>
<blockquote>
<p>那么我们来考虑一下缓存问题：</p>
<p>认证就不用说了，涉及到的查询就一条，根据用户名返回用户信息即可，没必要进行缓存。</p>
<p>但授权却比较麻烦，因为授权时我们一般都会去调用数据库来查询其用户所拥有的角色和权限，往往这都会涉及到多表查询。所以我们是否可以将授权数据缓存起来呢？应该如何进行缓存？缓存后角色或权限数据修改了怎么办？这里留下一个悬念，后面的章节中我们会讲到 Shiro 的缓存模块来完善缓存功能。</p>
</blockquote>
<p>本章代码地址：<a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-05/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-05/</a> </p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 集成 Spring 之加密</title>
    <url>/shiro-06/</url>
    <content><![CDATA[<p>本章我们来讲解，如果使用 Shiro 集成 Spring 后，使用加密功能。本章基础代码为上一章 : <a href="http://www.zhaojun.im/shiro-05/">Shiro 集成 Spring</a> 中的代码。</p>
<span id="more"></span>

<p>我们这里演示使用 <code>md5</code> 散列算法进行加密, 并用 <code>TestSalt</code> 作为盐。</p>
<p>首先导入上一章的代码，然后修改 <code>spring-shiro.xml</code> ，添加内容:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;credentialsMatcher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashAlgorithmName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;md5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后将此凭证匹配器 <code>credentialsMatcher</code> 注入到 <code>Realm</code> 中 : </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myRealm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;im.zhaojun.realm.MyRealm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;credentialsMatcher&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;credentialsMatcher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并在 Realm 中的 <code>doGetAuthenticationInfo</code> 方法里添加盐的配置 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;MyRealm doGetAuthenticationInfo...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String username = (String) authenticationToken.getPrincipal();</span><br><span class="line">    User user = selectUserByUserName(username);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">&quot;当前账户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), ByteSource.Util.bytes(<span class="string">&quot;TestSalt&quot;</span>), <span class="keyword">super</span>.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然为 Relam 配置了凭证匹配器，那么就应该把我们存储的密码也进行加密，原始我们的密码为 <code>123456</code>，这里我们使用 <code>md5</code> 散列算法进行加密，并使用 <code>TestSalt</code> 作为<strong>盐</strong> : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateHash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(<span class="string">&quot;123456&quot;</span>, ByteSource.Util.bytes(<span class="string">&quot;TestSalt&quot;</span>));</span><br><span class="line">        System.out.println(md5Hash.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果为 e5f728a966d050296c428290c9160dda</span></span><br></pre></td></tr></table></figure>

<p>然后我们将 <code>Realm</code> 中获取的密码改为加密后的值 <code>e5f728a966d050296c428290c9160dda</code> :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">selectUserByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;zhao&quot;</span>.equals(username)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username, <span class="string">&quot;e5f728a966d050296c428290c9160dda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同上一章，运行项目，进行登陆测试，即可检验结果。</p>
<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-06/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-06/</a> </p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 集成 Spring 之过滤器</title>
    <url>/shiro-07/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前 <a href="http://www.zhaojun.im/shiro-05/">Shiro 集成 Spring</a> 这一章中我们简单使用了 <code>shiroFilter</code> 中的 <code>filterChainDefinitions</code> 来做 <code>认证</code> 和 <code>授权</code> 的拦截，其实还有许多过滤器，可以做各种各样的拦截，并且 Shiro 还提供了接口来让我们自定义过滤器。</p>
<span id="more"></span>

<h2 id="身份认证相关"><a href="#身份认证相关" class="headerlink" title="身份认证相关"></a>身份认证相关</h2><h3 id="anon"><a href="#anon" class="headerlink" title="anon"></a>anon</h3><p>例：<code>/admins/**=anon</code>，没有参数，表示可以匿名使用。</p>
<h3 id="authc"><a href="#authc" class="headerlink" title="authc"></a>authc</h3><p>例：<code>/admins/user/**=authc</code>，没有参数，表示需要认证(登录)才能使用。</p>
<h3 id="authcBasic"><a href="#authcBasic" class="headerlink" title="authcBasic"></a>authcBasic</h3><p>例：<code>/admins/user/**=authcBasic</code>，没有参数，表示 httpBasic 认证。</p>
<h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><p>例：<code>/admins/user/**=user</code> ，没有参数，表示用户已登陆或 <code>rememberMe</code> 状态可访问。</p>
<h3 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h3><p>例：<code>/logout=logout</code>，没有参数，注销当前登陆用户，成功后会重定向地址到 <code>/</code>。</p>
<h2 id="授权相关"><a href="#授权相关" class="headerlink" title="授权相关"></a>授权相关</h2><h3 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h3><p>例：<code>/admins/user/**=roles[admin]</code>，参数可以写多个，用逗号分割，当有多个参数时，例如 <code>admins/user/**=roles[admin, guest]</code>，每个参数通过才算通过，相当于 <code>hasAllRoles()</code> 方法。</p>
<h3 id="perms"><a href="#perms" class="headerlink" title="perms"></a>perms</h3><p>例：<code>/admins/user/**=perms[user:add:*]</code>，参数可以写多个，用逗号分割，如：<code>/admins/user/**=perms[user:add:*, user:modify:*]</code>，当有多个参数时必须每个参数都通过才通过，想当于 <code>isPermitedAll()</code> 方法。</p>
<h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>例： <code>/admins/user/**=port[8081]</code>，单个参数，当请求的 url 的端口不是 <code>8081</code> 时重定向到 <code>schemal://hostName:8081?queryString</code>, 也就是说，除了端口，其他东西都会保留。</p>
<h3 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h3><p>例：<code>/admins/user/**=rest[user]</code>，根据请求的方法，相当于 <code>/admins/user/**=perms[user:method]</code>，其中method为post，get，delete等。</p>
<h3 id="ssl"><a href="#ssl" class="headerlink" title="ssl"></a>ssl</h3><p>例：<code>/admins/user/**=ssl</code> 没有参数，表示安全的 url 请求，协议为 <code>https</code>，其实也等同于 <code>/admin/user/**=port[443]</code>，即重定向到 443 端口。</p>
<h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>以 <code>roles</code> 过滤器为例：<code>/admin/page1= roles[&quot;admin, user&quot;]</code> ，表示 <code>/admin/page1</code> 这个页面必须需要用户同时具备 <code>admin</code> 与 <code>user</code> 角色才可访问。</p>
<p>我们开发一个自定义的过滤器，判定需要 <code>admin</code> 或 <code>user</code> 可访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.authz.AuthorizationFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnyRolesFilter</span> <span class="keyword">extends</span> <span class="title">AuthorizationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">this</span>.getSubject(request, response);</span><br><span class="line">        String[] rolesArray = (String[]) ((String[]) mappedValue);</span><br><span class="line">        <span class="keyword">if</span> (rolesArray != <span class="keyword">null</span> &amp;&amp; rolesArray.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String role : rolesArray) &#123;</span><br><span class="line">                <span class="keyword">if</span> (subject.hasRole(role)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：这里用到了 <code>ServletRequest</code> 和  <code>ServletResponse</code> 类，所以还需要导入相应的库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后将其配置到 IOC 容器中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;anyRolesFilter&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;im.zhaojun.filter.AnyRolesFilter&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>最后为其分配别名，并添加到过滤器链中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /login = anon</span><br><span class="line">                /user.jsp = anyRoles[user, admin]</span><br><span class="line">                /userList.jsp = perms[select:delete]</span><br><span class="line">                /logout = logout</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;anyRoles&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;anyRolesFilter&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们分别将 <code>/user.jsp</code> 设为 <code>roles[user, admin]</code> 和 <code>anyRoles[user, admin]</code>。</p>
<p>目前 Relam 中的用户 <code>zhao</code> - <code>123456</code> 仅具备 <code>user</code> 角色，所以可以分别测试出，<code>anyRoles</code> 过滤的页面可以正常访问，而 <code>roles</code> 过滤器的内容因未同时具备 <code>user</code> 与 <code>admin</code> 角色而被拦截，跳转到未授权页面。</p>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>上面的示例中，我们还用到了 <code>**</code> 做通配符，其实还有几个通配符：</p>
<p><code>?</code>：匹配一个<strong>字符</strong>，如 <code>/admin?</code> 可以匹配 <code>/admin1</code>、<code>/admin2</code>，但不能匹配 <code>/admin</code>。</p>
<p><code>*</code>：匹配零个或一个或多个<strong>字符</strong>，如 <code>/admin*</code> 可以匹配  <code>/admin</code>、<code>/admin1</code>、<code>/admin123</code>，但不能匹配 <code>/admin/123</code>。</p>
<p><code>**</code>：匹配零个或多个<strong>路径</strong>，如 <code>/admin/**</code> 可以匹配 <code>/admin</code>、<code>/admin/a/b/c</code>。</p>
<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-07/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-07/</a> </p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 集成 Spring 之授权缓存</title>
    <url>/shiro-08/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <a href="http://www.zhaojun.im/java-permission-1/">手撸 Java Web RBAC 权限管理</a> 中，我们自己实现了一个简易的 RBAC 权限管理框架，且我们也提到了一些缺陷，其中一点就是 :  <strong>每次请求需要授权的页面都会去数据库查询此用户对应的权限数据和角色数据，太耗费资源，应该进行缓存。</strong></p>
<p>本章我们就来讲讲如何将 Shiro 中的授权数据缓存到 Redis 中。</p>
<span id="more"></span>

<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Shiro 为授权数据的缓存提供了两个借口，一个是 <code>CacheManager</code>，一个是 <code>Cache</code>。</p>
<p>根据这两个接口，我们完全可以将授权数据缓存到任何地方，包括 <code>redis</code>、<code>ehcache</code> 、内存等。</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>既然我们要缓存到 Redis 中，我们需要搭建 Redis 环境，并导入 Redis 工具类：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建配置文件 <code>spring-redis.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jedisPool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.JedisPool&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Jedis 配置信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;poolConfig&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jedisPoolConfig&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Redis URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;127.0.0.1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Redis 端口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6379&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Redis 密码 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;constructor-arg value=&quot;&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jedisPoolConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxTotal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;500&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大闲置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最小闲置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大等待 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWaitMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以获取 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>我们来创建一个 <code>RedisCache</code> 继承自 <code>org.apache.shiro.cache.Cache</code>，来实现它的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> im.zhaojun.util.JedisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.SerializationUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(RedisCache.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JedisUtil jedisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String CACHE_PREFIX = <span class="string">&quot;shiro-cache:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getKeyBytes(K k) &#123;</span><br><span class="line">        <span class="keyword">return</span> (CACHE_PREFIX + k).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;从 Redis 中读取授权信息...&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] key = getKeyBytes(k);</span><br><span class="line">        <span class="keyword">byte</span>[] value = jedisUtil.get(key);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (V) SerializationUtils.deserialize(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k, V v)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = getKeyBytes(k);</span><br><span class="line">        <span class="keyword">byte</span>[] value = SerializationUtils.serialize(v);</span><br><span class="line">        jedisUtil.set(key, value);</span><br><span class="line">        jedisUtil.expire(key, <span class="number">600</span>);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = getKeyBytes(k);</span><br><span class="line">        <span class="keyword">byte</span>[] value = jedisUtil.get(key);</span><br><span class="line">        jedisUtil.del(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            SerializationUtils.deserialize(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        jedisUtil.delKeysByPrefix(CACHE_PREFIX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisUtil.getKeysByPrefix(CACHE_PREFIX).size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;K&gt;) jedisUtil.getKeysByPrefix(CACHE_PREFIX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisUtil.getValuesByPrefix(CACHE_PREFIX);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中没什么难点，只是对 redis 的基本增删改查操作，由于是存储到 redis 中，所以我们为缓存数据的 key 添加了前缀，以便再次获取。</p>
<h2 id="CacheManager"><a href="#CacheManager" class="headerlink" title="CacheManager"></a>CacheManager</h2><p>我们创建一个 <code>RedisCacheManager</code> 类来继承自 <code>org.apache.shiro.cache.AbstractCacheManager</code>，当然你也可以直接继承自 <code>org.apache.shiro.cacheCacheManager</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.AbstractCacheManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheManager</span> <span class="keyword">extends</span> <span class="title">AbstractCacheManager</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cache <span class="title">createCache</span><span class="params">(String s)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里在 <code>createCache() </code> 方法中返回我们的自定义 <code>RedisCache</code> 对象即可。</p>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>然后我们将 <code>RedisCacheManager</code> 配置到 <code>securityManager</code> 中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;redisCacheManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>以及将 <code>spring-redis.xml</code> 配置到 <code>web.xml</code> 中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:spring.xml,</span><br><span class="line">        classpath:spring-shiro.xml,</span><br><span class="line">        classpath:spring-redis.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>然后我们分别在 <code>Realm</code> 的 <code>doGetAuthorizationInfo</code> 方法和 <code>RedisCache</code> 的 <code>get</code> 方法中分别打印一条日志，看何时会访问数据库，何时会访问 <code>Redis</code> 缓存的数据。</p>
<ul>
<li><p>首先是未认证的情况下，访问需要权限的的页面，不会输出任何信息，因为需要认证后，才会根据认证信息去获取授权现象，没有认证时，会直接拦截。</p>
</li>
<li><p>认证之后，访问需要授权的页面，会输入如下信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">im.zhaojun.cache.RedisCache <span class="number">15</span>:09:<span class="number">14</span>,<span class="number">015</span>  INFO RedisCache:<span class="number">30</span> - 从 Redis 中读取授权信息...</span><br><span class="line">im.zhaojun.realm.MyRealm <span class="number">15</span>:09:<span class="number">14</span>,<span class="number">016</span>  INFO MyRealm:<span class="number">23</span> - 从数据库中读取授权信息...</span><br></pre></td></tr></table></figure>

<p>由此可见，Shiro 会先去 Redis 中取数据，如果 Redis 中没有，再去 Realm(数据库) 中取。<br>然后再次访问这个页面，输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">im.zhaojun.cache.RedisCache <span class="number">15</span>:<span class="number">11</span>:<span class="number">13</span>,<span class="number">351</span>  INFO RedisCache:<span class="number">30</span> - 从 Redis 中读取授权信息...</span><br></pre></td></tr></table></figure>

<p>因为缓存中已经有了，就不再去数据库中查询了。</p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实频繁从 Redis 中读取也是比较浪费资源的， Redis 的连接同样宝贵，最好的办法还是直接存储在内存中，但也是各有利弊，需要根据实际项目来决定使用哪种方案。</p>
<blockquote>
<p>放到 Redis 的好处是：可以用来做跨项目/机器的数据缓存，可以集群，持久化等。</p>
<p>放到内存的好处是：速度快，使用方便快捷。</p>
<p><strong>但使用这种缓存还有一个比较重要的事情，就是当数据库中的授权数据发生修改时，也要记得刷新缓存中的数据，不然会出现数据错乱，实现方式可以通过直接覆盖缓存，消息队列通知等方式，需要根据不同项目来选区不同方式，由于篇幅原因这里不再展开讲了。</strong></p>
</blockquote>
<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-08/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-08/</a> </p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 集成 Spring 之会话管理</title>
    <url>/shiro-09/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Shiro 提供了完整的会话管理功能，可以在不依赖底层容器，不仅可以在 WEB 环境下使用 Session，还可以在 JavaSE 环境下使用，且提供了会话管理，会话事件监听，会话持久化，过期支持。</p>
<span id="more"></span>



<h2 id="会话操作"><a href="#会话操作" class="headerlink" title="会话操作"></a>会话操作</h2><p>所谓会话，即用户访问应用时保持的连接关系，在多次交互中应用能够识别出当前访问的用户是谁，且可以在多次交互中保存一些数据。如访问一些网站时登录成功后，网站可以记住用户，且在退出之前都可以识别当前用户是谁。</p>
<p>获取 Session 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">Session session = subject.getSession();</span><br></pre></td></tr></table></figure>



<p>Session 常用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.getId();					<span class="comment">// 会话 ID, 唯一标识</span></span><br><span class="line">session.getHost();  				<span class="comment">// 获取当前 Subject 的主机地址</span></span><br><span class="line"></span><br><span class="line">session.getTimeout();  				<span class="comment">// 获取 Session 超时时间</span></span><br><span class="line">session.setTimeout(<span class="keyword">long</span> time);		<span class="comment">// 设置 Session 超时时间</span></span><br><span class="line"></span><br><span class="line">session.getStartTimestamp();		<span class="comment">// 会话创建时间</span></span><br><span class="line">session.getLastAccessTime();  		<span class="comment">// 最后活跃时间</span></span><br><span class="line"></span><br><span class="line">session.touch();					<span class="comment">// 更新会话</span></span><br><span class="line">session.stop(); 					<span class="comment">// 销毁会话</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然也支持 getAttribute() 和 setAttribute() 方法</span></span><br></pre></td></tr></table></figure>



<h2 id="会话管理器"><a href="#会话管理器" class="headerlink" title="会话管理器"></a>会话管理器</h2><p>会话管理器管理应用中所有 Subject 的会话的创建、维护、删除、失效、验证等工作。</p>
<p>Shiro提供了三个默认实现：</p>
<p><strong>DefaultSessionManager</strong>：DefaultSecurityManager 使用的默认实现，用于JavaSE环境；</p>
<p><strong>ServletContainerSessionManager</strong>：DefaultWebSecurityManager使用的默认实现，用于Web环境，其直接使用Servlet容器的会话；</p>
<p><strong>DefaultWebSessionManager</strong>：用于Web环境的实现，可以替代ServletContainerSessionManager，自己维护着会话，直接废弃了Servlet容器的会话管理。</p>
<h2 id="会话监听器"><a href="#会话监听器" class="headerlink" title="会话监听器"></a>会话监听器</h2><p>会话监听器用于监听会话创建、过期及停止事件： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.session.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.SessionListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro 会话监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySessionListener</span> <span class="keyword">implements</span> <span class="title">SessionListener</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(MySessionListener.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;create session : &quot;</span> + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;session stop : &quot;</span> + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpiration</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;session expiration : &quot;</span> + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，如果你只想监听某个事件，可以继承自 <code>SessionListenerAdapter</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.session.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.SessionListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.SessionListenerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro 会话监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySessionListener2</span> <span class="keyword">extends</span> <span class="title">SessionListenerAdapter</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(MySessionListener2.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;create session : &quot;</span> + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将会话监听器配置到  <code>sessionManager</code> 中，在将 <code>sessionManager</code> 配置到  <code>securityManager</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;redisCacheManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionListeners&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mySessionListener&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="会话持久化-存储"><a href="#会话持久化-存储" class="headerlink" title="会话持久化/存储"></a>会话持久化/存储</h2><p>Shiro 提供 SessionDAO 用于会话的 CRUD，我们可以用它来从 Redis 中增删改查 Session 信息，只需要继承自 <code>SessionDAO</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> im.zhaojun.util.JedisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.UnknownSessionException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.eis.AbstractSessionDAO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.SerializationUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSessionDAO</span> <span class="keyword">extends</span> <span class="title">AbstractSessionDAO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(RedisSessionDAO.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JedisUtil jedisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SHIRO_SESSION_PREFIX = <span class="string">&quot;shiro-session:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Serializable <span class="title">doCreate</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        Serializable sessionId = generateSessionId(session);</span><br><span class="line">        assignSessionId(session, sessionId);</span><br><span class="line">        saveSession(session);</span><br><span class="line">        logger.info(<span class="string">&quot;sessionDAO doCreate : &quot;</span> + session.getId());</span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Session <span class="title">doReadSession</span><span class="params">(Serializable sessionId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sessionId == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] key = getKeyBytes(sessionId.toString());</span><br><span class="line">        <span class="keyword">byte</span>[] value = jedisUtil.get(key);</span><br><span class="line">        <span class="keyword">return</span> (Session) SerializationUtils.deserialize(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Session session)</span> <span class="keyword">throws</span> UnknownSessionException </span>&#123;</span><br><span class="line">        saveSession(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;session delete : &quot;</span> + session.getId());</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span> &amp;&amp; session.getId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] key = getKeyBytes(session.getId().toString());</span><br><span class="line">            jedisUtil.del(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Session&gt; <span class="title">getActiveSessions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;<span class="keyword">byte</span>[]&gt; keys = jedisUtil.getKeysByPrefix(SHIRO_SESSION_PREFIX);</span><br><span class="line">        Collection&lt;Session&gt; sessions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (sessions.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> sessions;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span>[] key : keys) &#123;</span><br><span class="line">            Session session = (Session) SerializationUtils.deserialize(jedisUtil.get(key));</span><br><span class="line">            sessions.add(session);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sessions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getKeyBytes(String key) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SHIRO_SESSION_PREFIX + key).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveSession</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span> &amp;&amp; session.getId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] key = getKeyBytes(session.getId().toString());</span><br><span class="line">            <span class="keyword">byte</span>[] value = SerializationUtils.serialize(session);</span><br><span class="line">            jedisUtil.set(key, value);</span><br><span class="line">            jedisUtil.expire(key, <span class="number">600</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里和上一章，授权数据的缓存很相像，那里是对授权数据的增删改查，这里是对 Session 数据的增删改查。</p>
<p>然后将其配置到 <code>sessionManager</code> 中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionListeners&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mySessionListener&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;redisSessionDAO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我们可以使用 Shiro 提供的这一系列操作会话的工具来完成很多功能，如单点登陆，单设备登陆，踢出用户，获取所有登陆用户等信息。</p>
<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-09/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-09/</a> </p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 集成 Spring 之注解</title>
    <url>/shiro-10/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集成 Spring 后我们通过过滤器链来配置每个 URL 需要的权限，但当配置多了以后就会不方便，而且只支持 URL 级别的配置。</p>
<p>好在 Shiro 提供了相应的注解用于权限控制，此处使用了 Spring MVC 来测试Shiro注解，当然 Shiro 注解不仅仅可以在 web 环境使用，在独立的JavaSE 中也是可以用的，此处只是以 web 为例了。</p>
<span id="more"></span>



<h2 id="开启注解配置"><a href="#开启注解配置" class="headerlink" title="开启注解配置"></a>开启注解配置</h2><p>首先我们需要在 <strong>Spring Web</strong> 的配置文件 <code>spring-web.xml</code> 中加入以下内容来开启 Shiro 的注解支持 :</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h2><p>接着我们就可以使用注解来配置权限：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role1&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresRoles(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">role1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role2&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresRoles(&quot;admin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">role2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 <code>role1</code> 方法需要当前用户有 <code>user</code> 角色，<code>role2</code> 方法需要 <code>admin</code> 角色。</p>
<p>当验证失败时，会抛出 <code>UnauthorizedException</code> ，我们可以使用 Spring 的  ExceptionHandler 来进行异常处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(UnauthorizedException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processUnauthorizedException</span><span class="params">(UnauthorizedException e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="更多注解"><a href="#更多注解" class="headerlink" title="更多注解"></a>更多注解</h2><p>当然不止有 <code>@RequiresRoles</code> 用来验证角色，Shiro 还提供了以下注解：</p>
<h3 id="RequiresAuthentication"><a href="#RequiresAuthentication" class="headerlink" title="@RequiresAuthentication"></a>@RequiresAuthentication</h3><p>验证用户是否登陆，等同于方法 subject.isAuthenticated() 。</p>
<h3 id="RequiresUser"><a href="#RequiresUser" class="headerlink" title="@RequiresUser"></a>@RequiresUser</h3><p>验证用户是否被 <strong>记忆</strong>，即登陆成功或 <code>RememberMe</code> 状态。等同于方法 : <code>subject.isAuthenticated()</code> 与 <code>subject.isRemembered()</code>。</p>
<h3 id="RequiresGuest"><a href="#RequiresGuest" class="headerlink" title="@RequiresGuest"></a>@RequiresGuest</h3><p>仅未登录状态可访问，与 <code>@RequiresUser</code> 完全相反。</p>
<h3 id="RequiresPermissions"><a href="#RequiresPermissions" class="headerlink" title="@RequiresPermissions"></a>@RequiresPermissions</h3><p>验证是否具备权限，可通过参数 <code>logical</code> 来配置验证策略：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拥有 admin 或 user 角色即可</span></span><br><span class="line"><span class="meta">@RequiresPermissions(logical = Logical.OR,value = &#123;&quot;admin&quot;, &quot;user&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 需同时具备 admin 与 user 角色</span></span><br><span class="line"><span class="meta">@RequiresPermissions(logical = Logical.AND,value = &#123;&quot;admin&quot;, &quot;user&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>RequiresRoles 同样可以配置验证策略。</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我们可以通过注解配置来更方便的实现权限配置，且这些方法不仅可以配置在 Controller 层，还可以在 Service 层，DAO 层等，只不过需要通过 IOC 容器来获取对象才能使用。</p>
<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-10/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-10/</a> </p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 集成 Spring 之记住我</title>
    <url>/shiro-11/</url>
    <content><![CDATA[<p>我们经常在登陆网站时看到一个选项，就是 <strong>记住我</strong>、 <strong>n天内自动登陆</strong>。本章我们使用 Shiro 来实现这个功能。</p>
<span id="more"></span>



<p>首先需要在 <code>spring-shiro.xml</code>  中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;rememberMeManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.CookieRememberMeManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cookie&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cookie&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cookie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.servlet.SimpleCookie&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cookie 名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rememberMe&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cookie 过期时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;86400&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并将 <code>rememberMeManager</code> 添加到 <code>securityManager</code>中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rememberMeManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;rememberMeManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在之前的章节中我们提到了过滤器链中的 <code>user</code> 过滤器，以及注解中的 <code>@RequiresUser</code> 都是用来表示已登陆或 <code>rememberMe</code> 状态可访问。</p>
<p>我们新建一个页面 <code>remember.jsp</code>，并为其配置 <code>user</code> 过滤器：</p>
<p>remember.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    RememberMe Page</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/remember.jsp = user</span><br></pre></td></tr></table></figure>

<p>当然，还要通过表单的单选框来告诉 Shiro，当前用户是否使用 <code>rememberMe</code> 功能，修改后的<code>login.jsp</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    username : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    password : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    rememberMe: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberMe&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并在 Controller 层接受后，将复选框选中结果配置给 Shiro：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    UsernamePasswordToken token =</span><br><span class="line">        <span class="keyword">new</span> UsernamePasswordToken(user.getUsername(), user.getPassword(), user.getRememberMe());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一切配置完成后启动项目，登陆时勾选 <code>rememberMe</code>，然后关闭浏览器，重新打开，再访问 <code>remember.jsp</code> 看是否可以访问，并对比其他配置 authc 或需要授权的页面，是否可以访问。</p>
<p>其实他的原理就是通过 cookie 实现，勾选 <code>remberMe</code> 后登陆成功会给浏览器设置一个 cookie，以及其到期时间，请求页面时验证该 cookie 的内容是否是服务器颁发的，如果是则通过，不是则跳回登陆页面。</p>
<p>也可能你配置了 <code>rememberMe</code> 功能但未生效，也没有报错，那么可能是以下两种原因。</p>
<ul>
<li>检查浏览器是否禁用了 Cookie</li>
<li>检查是否使用了注解 <code>@RequiresUser</code>并同时在过滤器链中配置了 <code>/** = authc</code>，原因是过滤器链的优先级高于 <code>@RequiresUser</code>，在 <code>/** = authc</code> 时，表示所有请求都要认证，所以还没有到注解的验证就已经被拦截并跳回到登陆页面了。</li>
</ul>
<p>不过 <code>rememberMe</code> 功能要慎用，且过期时间不要设置太久，因为这样即使修改密码后，原先的 cookie 在过期之前还是可以使用的。还有一个问题是，<code>rememberMe</code> 状态下无法获取用户的 Session 信息，从而也会引发其他的问题。</p>
<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-11/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-11/</a> </p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 进阶之从数据库读取过滤器链</title>
    <url>/shiro-12/</url>
    <content><![CDATA[<p>我们之前使用过滤器链都是在 XML 中手动添加和维护的，本章我们来介绍下如何从数据库读取这些过滤器配置，这样做的好处是便于维护，且可以通过程序来添加过滤器配置，因为我们只需要添加一条记录到数据库即可。</p>
<span id="more"></span>



<p>回顾下，之前我们是这样配置的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 登录页面, 未认证时访问需要认证或授权的资源会自动跳转到此页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 登录成功页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/index.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 登录后, 访问未授权的资源会跳转到此页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;unauthorizedUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/unauthorized.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /login = anon</span><br><span class="line">                /user.jsp = anyRoles[user, admin]</span><br><span class="line">                /userList.jsp = perms[select:delete]</span><br><span class="line">                /logout = logout</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主要是 <code>filterChainDefinitions</code> 属性，现在我们将其修改为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitionMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们点开 <code>ShiroFilterFactoryBean</code> 的 <code>filterChainDefinitionMap</code> 属性来看下，它是 Map 类型的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public void setFilterChainDefinitionMap(Map&lt;String, String&gt; filterChainDefinitionMap) &#123;</span><br><span class="line">	this.filterChainDefinitionMap = filterChainDefinitionMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们就可以创建一个类，他从数据库读取权限数据组成一个 Map 类型作为返回值即可，这里我们用实例工厂来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChainDefinitionMapBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedHashMap&lt;String, String&gt; <span class="title">buildFilterChainDefinitionMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里根据自己使用的数据库查询, 将值 put 到 Map 中.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 <code>LinkedHashMap</code> 的原因是为了保证插入顺序有序，具体连接数据库和查询代码这里就不在演示了，自行根据项目使用的 ORM 框架来实现。</p>
<p>最后的配置文件是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shiro 过滤器, 要与 web.xml 中的 Filter Name 相同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录页面, 未认证时访问需要认证或授权的资源会自动跳转到此页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录成功页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/index.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录后, 访问未授权的资源会跳转到此页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;unauthorizedUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/unauthorized.jsp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitionMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;filterChainDefinitionMap&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;filterChainDefinitionMap&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;filterChainDefinitionMapBuilder&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;buildFilterChainDefinitionMap&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;filterChainDefinitionMapBuilder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;im.zhaojun.factory.FilterChainDefinitionMapBuilder&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>本章代码地址 : <a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-12/">https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Shiro-12/</a> </p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>一款基于 Shiro 的权限管理系统，支持 restful 风格 URL.</title>
    <url>/shiro-action/</url>
    <content><![CDATA[<h1 id="Shiro-Action"><a href="#Shiro-Action" class="headerlink" title="Shiro-Action"></a>Shiro-Action</h1><p>本项目使用 Spring Boot 搭建, 用于加深对 Spring Boot 与 Shiro 的学习, 项目特色是支持 restful 风格权限控制, 支持对同一 URL, 不同 HTTP Mehtod 的权限控制, 适用于更多的场景.</p>
<p>预览地址: <a href="http://shiro.zhaojun.im/">http://shiro.zhaojun.im/</a><br>项目地址: <a href="https://github.com/zhaojun1998/Shiro-Action">https://github.com/zhaojun1998/Shiro-Action</a><br>默认管理员账号: <code>admin</code>, 密码: <code>123456</code>.<br>普通用户账号: <code>user</code>, 密码: <code>123456</code>.</p>
<blockquote>
<p>为了不影响其他人的浏览体验, 请尽量不要进行删除类的敏感操作.  <code>admin</code> 为超级管理员, 自动拥有全部权限.</p>
</blockquote>
<span id="more"></span>

<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul>
<li>JDK 1.8</li>
<li>MySQL 5.7</li>
<li>Redis</li>
</ul>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zhaojun1998&#x2F;Shiro-Action.git</span><br></pre></td></tr></table></figure>

<h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>使用自己的 IDE 导入, Eclipse 和 Intellij IDEA 均可.</p>
<h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><p>创建数据库, 字符集选择 <code>utf8</code>, 排序规则选择 <code>utf8_general_ci</code>.</p>
<p>然后导入 <code>shiro_action.sql</code> 到数据库中.</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>打开 <code>application.properties</code> 修改 <code>MySQL</code> 和 <code>Redis</code> 连接信息.</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.cache.type</span>=<span class="string">redis</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/shiro_action?useSSL=false&amp;characterEncoding=UTF8</span></span><br></pre></td></tr></table></figure>

<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>在完成了上述步骤后，找到 ShiroActionApplication 启动类, 启动即可.</p>
<p>启动后访问地址为：<a href="http://localhost:8080，用户名：zhaojun，密码：123456">http://localhost:8080，用户名：zhaojun，密码：123456</a>.</p>
<h2 id="系统预览"><a href="#系统预览" class="headerlink" title="系统预览"></a>系统预览</h2><p><img src="https://cdn.jun6.net/201904032326_720.png"></p>
<p><img src="https://cdn.jun6.net/201904032327_602.png"></p>
<p><img src="https://cdn.jun6.net/201904032327_107.png"></p>
<p><img src="https://cdn.jun6.net/201904032327_936.png"></p>
<p><img src="https://cdn.jun6.net/201904032328_32.png"></p>
<img src="https://cdn.jun6.net/201904051028_493.png" width="400px" height="463px">]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>落单的数Ⅱ</title>
    <url>/single-number-ii/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出 3*n + 1 个的数字，除其中一个数字之外其他每个数字均出现三次，找到这个数字。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <code>[1,1,2,3,3,3,2,2,4,1]</code> ，返回 4</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题跟 <a href="/single-number/" title="落单的数">落单的数</a> 很类似，只不过这里就不能简单的使用异或运算来得出结果了。</p>
<p>可以记录 32 位二进制中 1 出现的个数，当个数达到 3，则将个数归零。最终剩下的就是落单的数。</p>
<p>如一个数组 <code>[2, 2, 2, 3]</code> :</p>
<p>2 的二进制是 <code>0000 0000 0000 0000 0000 0000 0000 0010</code><br>3 的二进制是 <code>0000 0000 0000 0000 0000 0000 0000 0011</code></p>
<p>将数组中所有元素的二进制位 1 的数量加在一起就是 <code>0000 0000 0000 0000 0000 0000 0000 0041</code></p>
<p>当个数达到3，则将个数归零，最终结果就是 <code>0000 0000 0000 0000 0000 0000 0000 0011</code></p>
<p>在实际计算中每次是取一位，也就是第一次取到的是 1，第二次取到的是 4，4 满 3 对三取模即可（4 % 3），所以第二次取到的数应该算为 1。将这些单独位的二进制数再拼凑到一次。只需要进行 <code>或运算</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  0000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line">| 0000 0000 0000 0000 0000 0000 0000 0010</span><br><span class="line">-----------------------------------------</span><br><span class="line">  0000 0000 0000 0000 0000 0000 0000 0011</span><br></pre></td></tr></table></figure>

<p>如此即可将每一位的 1 拼凑到一起。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A : An integer array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> : An integer </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumberII</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++) &#123;</span><br><span class="line">                count += A[j] &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">                count %= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result |= count &lt;&lt; i;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/single-number-ii/#">LintCode：落单的数Ⅱ</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>落单的数Ⅲ</title>
    <url>/single-number-iii/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出2*n + 2个的数字，除其中两个数字之外其他每个数字均出现两次，找到这两个数字。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <code>[1,2,2,3,4,4,5,3]</code>，返回 1 和 5</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题用到了很多位运算的小技巧。</p>
<p>首先将数组中所有的数进行异或，最终的结果就是两个落单的数的异或值。</p>
<p>根据异或的规律：两值相同则为 0，不同则为 1。两者又是两个不同的数，所以最后异或的结果肯定不为 0.</p>
<p>然后取出异或值的二进制位中最低一个值为 1 的数。例如对于异或值：60（111100），取最低一个值为 1 的数，也就是：4 (100)。</p>
<p>然后将数组所有数与这个数进行与运算，将结果为 0 的数分为一组，非 0 的数分为另一组。由于上方异或得到的规律可得，两个落单的数，肯定在两个不同的组里。</p>
<p>在对这两组进行 <a href="/single-number/" title="落单的数">落单的数</a> 中的操作即可分别得到两个落单的数。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A : An integer array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> : Two integers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">singleNumberIII</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> xor = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// xor 代表的是落单的两个数的异或值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            xor ^= A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//lastBit 代表的是 xor 的二进制位中最低一个值为 1 的数。</span></span><br><span class="line">        <span class="keyword">int</span> lastBit = xor - (xor &amp; (xor - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">int</span> r1 = <span class="number">0</span>, r2 = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((lastBit &amp; A[i]) == <span class="number">0</span>) &#123;</span><br><span class="line">                r1 ^= A[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r2 ^= A[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(r1);</span><br><span class="line">        list.add(r2);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/single-number-iii/">LintCode：落单的数Ⅲ</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>落单的数</title>
    <url>/single-number/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出 2*n + 1 个的数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出<code>[1,2,2,1,3,4,3]</code>，返回 4</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在位运算中，异或（<code>^</code>）是将该数的二进制每一位进行异或运算，当前位的两个二进制表示不同则为 1 ，相同则为 0。</p>
<p>根据此特性，可以得出结论：两个相同的数进行异或运算的结果为 0。</p>
<p>即：<code>5 ^ 5 = 0</code>,那么 <code>5 ^ 5 ^ 6 </code> 的结果就是 6，这样就符合本题的要求了，6 就是那个 2n + 1 中的 1，即落单的数。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *<span class="doctag">@param</span> A : an integer array</span></span><br><span class="line"><span class="comment">      *return : a integer </span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            r ^= A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/single-number/">LintCode：落单的数</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
        <tag>数组</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>空格替换</title>
    <url>/space-replacement/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>设计一种方法，将一个字符串中的所有空格替换成 <code>%20</code> 。你可以假设该字符串有足够的空间来加入新的字符，且你得到的是“真实的”字符长度。</p>
<p>你的程序还需要返回被替换后的字符串的长度。</p>
<blockquote>
<p>注意事项：如果使用 <code>Java</code> 或 <code>Python</code>, 程序中请用字符数组表示字符串。</p>
</blockquote>
<span id="more"></span>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>对于字符串 <code>&quot;Hello World&quot;</code> , 长度为 <code>11</code><br>替换空格之后，参数中的字符串需要变为 <code>&quot;Hello%20World&quot;</code>，并且把新长度 <code>17</code> 作为结果返回。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>循环遍历字符数组</li>
<li>碰到空字符则将空字符后所有的字符向后移动两位（假设字符数组有足够长度），防止添加 <code>%20</code> 时，造成覆盖而导致数据丢失.</li>
<li>将空字符以及后两位共 <code>3</code> 个位置 替换成 <code>%20</code></li>
<li>将字符数组的长度 <code>+2</code></li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int replaceBlank(char[] string, int length) &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            if (string[i] &#x3D;&#x3D; &#39; &#39;) &#123;</span><br><span class="line">                for (int j &#x3D; length + 2; j !&#x3D; i + 2; j--) &#123;</span><br><span class="line">                    string[j] &#x3D; string[j - 2];</span><br><span class="line">                &#125;</span><br><span class="line">                string[i + 2] &#x3D; &#39;0&#39;;</span><br><span class="line">                string[i + 1] &#x3D; &#39;2&#39;;</span><br><span class="line">                string[i] &#x3D; &#39;%&#39;;</span><br><span class="line">                length +&#x3D; 2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="https://cdn.jun6.net/sdadasdwad.png" alt="无标题.png-38.5kB"></p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol>
<li>本题要求是<strong>将参数中的字符数组改变</strong>，而不能通过创建一个新字符数组进行操作，然后将新字符数组赋值给原字符数组。</li>
<li>碰到空格要将字符数组的所有字符整体向后移动两位。</li>
</ol>
<p><a href="http://www.lintcode.com/zh-cn/problem/space-replacement/">LintCode：空格替换</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>lintcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 动态注入依赖设计</title>
    <url>/spring-dynamic-injection-dependency/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在开发一个在线网盘的功能, 支持多个存储策略. 启动时, 读取数据库, 获取当前启用的存储类型, 然后项目启动后, 还可以动态切换存储类型.</p>
<p>由于是基于 Spring 开发的, 所以一般是这么写的: </p>
<p>接口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口中的方法, 以此为例.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前的存储类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  存储类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getStorageType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>阿里云实现类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunFileService</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStorageType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;阿里云&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>腾讯云实现类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TencentFileService</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStorageType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;腾讯云&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 Controller 层注入: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;xxx&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fileService.method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但, 这样肯定会出错的, 因为 <code>FileService</code> 接口, 有两个实现类, 都标注了 <code>@Service</code>, 注入时, Spring 不知道到底注入哪个.</p>
<p>这办法不可行, 即使指定了注入哪个, 也没办法实现动态切换注入的类.</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>那么换个思路, 不使用 <code>@Resource</code> 注入, 而是在项目启动完后, 获取 <code>FileService</code> 类型的所有类, 然后从数据库获取当前启用的存储类型, set 到 <code>Controller</code> 的 <code>fileService</code> 属性中. 具体看代码吧:</p>
<p>两个 <code>Service</code> 类的代码不变, 新增获取存储类型的工厂类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageTypeFactory</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, FileService&gt; storageTypeEnumFileServiceMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目启动时执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext act)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        applicationContext = act;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取 Spring 容器中所有 FileService 类型的类</span></span><br><span class="line">        storageTypeEnumFileServiceMap = act.getBeansOfType(FileService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定存储类型 Service</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileService <span class="title">getStorageTypeService</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        FileService result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (FileService fileService : storageTypeEnumFileServiceMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileService.getStorageType() == type) &#123;</span><br><span class="line">                result = fileService;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 未知的存储类型</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownStorageTypeException(type.getDescription());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;xxx&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fileService.method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PostConstruct 注解, 表示该类初始化的时候, 自动调用该方法.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateStorageType&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initStorageType</span><span class="params">(String storageType)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 如果 storageType 为空, 则表示是启动时初始化, 有值则说明是 Web 接口动态更改的</span></span><br><span class="line">		<span class="keyword">if</span> (storageType == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 伪代码, 读取数据库获取当前存储类型</span></span><br><span class="line">			storageType = xxxService.getCurrentStorage();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置 fileService 类为当前存储类型对应的 Service</span></span><br><span class="line">		fileService = StorageTypeFactory.getStorageTypeService(storageType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大概就是这样, 主要就是不直接使用 <code>@Resouce</code> 注入, 而是在启动时, 先获取所有的 <code>Service</code>, 存储到 Map 中, 提供静态方法, 然后利用 <code>@PostConstruct</code> 启动时自动调用初始化方法, 动态注入 <code>fileService</code>.</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解 Spring 的 IOC 思想?</title>
    <url>/spring-ioc/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一说起 Spring 大家都知道 Spring 有两个思想，即 IOC 和 AOP，AOP 比较容易理解，但 IOC 却在我学习 Spring 很长一段时间之后才算理解，故在此记录下来，供其他学习者参考。</p>
<span id="more"></span>

<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote>
<p>IOC 全称是 <code>Inversion of Control</code> ，是一种叫做 <strong>控制反转</strong> 的设计思想。<br>与之关联的是 DI 全称 <code>Dependency Injection</code>，即 <strong>依赖注入</strong>，IOC 容器通过 DI 来实现控制反转。</p>
<p>ps: 我知道你们也不想看这些总结性的概念，来看个例子吧。</p>
</blockquote>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>那为什么需要用到 IOC 呢？先来看看我们之前是怎么写代码的。</p>
<p>例如在一个 Person 类中需要一个 A 类的对象，调用 A 类的方法来完成工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a.xxx();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后有一天出现了一个 B 类，B 类可以实现同样的功能，且效率更高。于是你改起了代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        b.xxx();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来看这样的方式，是不是有些死板呢，需要改的地方很多，如果 100 个类中都调用了这个类，那修改的工作量未免也太大了。</p>
<p>这时其实可以将 A 和 B 之间的特型抽象出一个接口出来，叫 S。<br>让 A 和 B 都实现 S 接口，</p>
<p>那么现在的代码就成这样了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    S s = <span class="keyword">new</span> A();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s.xxx();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时，如果我们如果想换成 B 类，只需要改很少的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    S s = <span class="keyword">new</span> B();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s.xxx();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么这样还有一个问题，就是如果 A 或 B 类需要设置一些参数，那么怎么办，再修改代码？那样耦合性还是太高了。</p>
<h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>这是就用到了 IOC，将所有的对象，交由 Spring 容器来管理，<strong>只需要在 Spring 的配置文件里修改到底需要哪个类即可。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    S s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s.xxx();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--约束和一些配置略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;A&quot;</span> <span class="attr">class</span>=<span class="string">&quot;package.A&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;B&quot;</span> <span class="attr">class</span>=<span class="string">&quot;package.B&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;package.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;S&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;A&quot;</span>/&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 或 &lt;property name=&quot;S&quot; ref=&quot;B&quot;/&gt;   --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>如此就进行了进一步的解耦，其实完全可以把 Person 当作工作中的项目的 Service 类，而 A 和 B 是两个不同数据库的实现，或客户从 A 需求改到 B 需求，如此可以方便的维护我们的代码。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 统一异常处理最佳实践 -- 拓展篇</title>
    <url>/springboot-exception-expand/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一篇文章介绍了基本的统一异常处理思路: <a href="http://www.zhaojun.im/springboot-exception/">Spring MVC/Boot 统一异常处理最佳实践</a>.</p>
<p>上篇文章也有许多人提出了一些问题:</p>
<ul>
<li>如何区分 Ajax 请求和普通页面请求, 以分别返回 JSON 错误信息和错误页面.</li>
<li>如何结合 HTTP 状态码进行统一异常处理.</li>
</ul>
<p>今天这篇文章就主要来讲讲这些, 以及其他的一些拓展点.</p>
<span id="more"></span>


<h2 id="区分请求方式"><a href="#区分请求方式" class="headerlink" title="区分请求方式"></a>区分请求方式</h2><p>其实 Spring Boot 本身是内置了一个异常处理机制的, 会判断请求头的参数来区分要返回 JSON 数据还是错误页面. 源码为: <code>org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController</code>, 他会处理 <code>/error</code> 请求. 核心处理代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    produces = &#123;&quot;text/html&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="comment">// 如果请求头是 text/html, 则找到错误页面, 并返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取 HTTP 错误状态码</span></span><br><span class="line">    HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">    <span class="comment">// 2. 调用 getErrorAttributes 获取响应的 map 结果集.</span></span><br><span class="line">    Map&lt;String, Object&gt; model = Collections.unmodifiableMap(<span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">    <span class="comment">// 3. 设置响应头的状态码</span></span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    <span class="comment">// 4. 获取错误页面的路径</span></span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">this</span>.resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> modelAndView != <span class="keyword">null</span> ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">    <span class="comment">// 调用 getErrorAttributes 获取响应的 map 结果集.</span></span><br><span class="line">    Map&lt;String, Object&gt; body = <span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">    <span class="comment">// 获取 HTTP 错误状态码</span></span><br><span class="line">    HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">    <span class="comment">// 返回给页面 JSON 信息.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这两个方法的共同点是: 他们都调用了 this.getErrorAttributes(…) 方法来获取响应信息.</p>
</blockquote>
<p>然后来看看他默认情况下对于 AJAX 请求和 HTML 请求, 分别的返回结果是怎样的:<br><img src="https://cdn.jun6.net/201901271609_174.png"></p>
<p><img src="https://cdn.jun6.net/201901271611_648.png"></p>
<p>对于返回错误页面, 其中还调用了一个非常重要的方法: <code>this.resolveErrorView(...)</code> 方法, 源码我就不带大家看了, 他的作用就是根据 HTTP 状态码来去找错误页面, 如 500 错误会去找 <code>/error/500.html</code>, 403 错误回去找 <code>/error/403.html</code>, 如果找不到则再找 <code>/error/4xx.html</code> 或 <code>/error/5xx.html</code> 页面. 还找不到的话, 则会去找 <code>/error.html</code> 页面, 如果都没有配置, 则会使用 Spring Boot 默认的页面. 即:</p>
<p><img src="https://cdn.jun6.net/201901271609_174.png"></p>
<p>看到这里, 应该就清楚了, 我们主要需要做四件事:</p>
<ol>
<li>发送异常后, 重定向到 <code>BasicErrorController</code> 来处理 (既然Spring Boot 都已经写好了区分请求的功能, 我们就不必要再写这些判断代码了)</li>
<li>自定义 HTTP 错误状态码</li>
<li>他返回的信息格式可能不是我们想要的, 所以必须要改造 <code>getErrorAttributes(...)</code> 方法, 以自定义我们向页面返回的数据. (自定义错误信息)</li>
<li>创建我们自己的 <code>/error/4xx.html</code> 或 <code>/error/5xx.html</code> 等页面, (自定义错误页面)</li>
</ol>
<h3 id="BasicErrorController"><a href="#BasicErrorController" class="headerlink" title="BasicErrorController"></a>BasicErrorController</h3><p>第一点很简单, <code>BasicErrorController</code> 他处理 <code>/error</code> 请求, 我们只需要将页面重定向到 <code>/error</code> 即可, 在 ControllerAdvice 中是这样的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodArgumentNotValid</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义-HTTP-错误状态码"><a href="#自定义-HTTP-错误状态码" class="headerlink" title="自定义 HTTP 错误状态码"></a>自定义 HTTP 错误状态码</h3><p>我们来看下 <code>this.getStatus(request);</code> 的源码, 看他原来时如何获取错误状态码的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HttpStatus <span class="title">getStatus</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    Integer statusCode = (Integer)request.getAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (statusCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> HttpStatus.valueOf(statusCode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            <span class="keyword">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单来说就是从 request 域中获取 <code>javax.servlet.error.status_code</code> 的值, 如果为 null 或不合理的值, 都返回 500. 既然如何在第一步, 重定向到 <code>/error</code> 之前将其配置到 request 域中即可, 如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodArgumentNotValid</span><span class="params">(BindException e, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h3><p>也就是 getErrorAttributes 方法, 默认的代码是这样的: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">    errorAttributes.put(<span class="string">&quot;timestamp&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">this</span>.addStatus(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">this</span>.addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">    <span class="keyword">this</span>.addPath(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他获取了时间戳, 错误状态码, 错误信息, 错误路径等信息, 和我们之前看到默认的返回内容是一致的: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-01-27T07:08:30.011+0000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;/ by zero&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/user/index&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的思路, 我们将错误信息也放到 request 域中, 然后在 getErrorAttributes 中从 request 域中获取:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodArgumentNotValid</span><span class="params">(BindException e, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;code&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;参数校验失败, xxx&quot;</span>);</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再继承 <code>DefaultErrorAttributes</code> 类, 重写 <code>getErrorAttributes</code> 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDefaultErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//重写 getErrorAttributes方法-添加自己的项目数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 从 request 域中获取 code</span></span><br><span class="line">        Object code = webRequest.getAttribute(<span class="string">&quot;code&quot;</span>, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">        <span class="comment">// 从 request 域中获取 message</span></span><br><span class="line">        Object message = webRequest.getAttribute(<span class="string">&quot;message&quot;</span>, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><p>我们遵循 SpringBoot 的规则, 在 <code>/error/</code> 下建立 <code>400.html</code>, <code>500.html</code> 等页面细粒度的错误, 并配置一个 <code>/error.html</code> 用来处理细粒度未处理到的其他错误.</p>
<p><strong>/error/400.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>400<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>400<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;code&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>/error/500.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>500<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>500<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;code&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>/error.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>系统出现了错误<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ERROR PAGE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;code&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><p>到此位置, 大功告成, 然后来创造一个异常来测试一下效果:<br><img src="https://cdn.jun6.net/201901271620_141.png"></p>
<p><img src="https://cdn.jun6.net/201901271611_347.png"></p>
<p><img src="https://cdn.jun6.net/201901271612_335.png"></p>
<p><img src="https://cdn.jun6.net/201901271612_695.png"></p>
<h2 id="前端-error-处理"><a href="#前端-error-处理" class="headerlink" title="前端 error 处理"></a>前端 error 处理</h2><p>现在使用了 HTTP 状态码, 所以 Ajax 请求出现错误后, 需要在每个 Ajax 请求方法中都写 <code>error: function() &#123;&#125;</code> 方法, 甚至麻烦. 好在 jQuery 为我们提供了全局处理 Ajax 的 error 结果的方法 <a href="http://www.w3school.com.cn/jquery/ajax_ajaxerror.asp">ajaxError()</a> :</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxError(<span class="function"><span class="keyword">function</span>(<span class="params">event, response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;错误响应状态码: &quot;</span>,response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;错误响应结果: &quot;</span>,response.responseJSON);</span><br><span class="line">    alert(<span class="string">&quot;An error occurred!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>回顾一下讲到的这些内容：</p>
<ol>
<li>理解 <code>SpringBoot</code> 默认提供的 <code>BasicErrorController</code></li>
<li>自定义 HTTP 错误状态码, (通过 request 域的 <code>javax.servlet.error.status_code</code> 参数)</li>
<li>自定义错误信息, (将我们自定义的错误信息放到 request 域中, 并重写 <code>DefaultErrorAttributes</code> 的 <code>getErrorAttributes</code> 方法, 从 request 域中获取这些信息).</li>
<li>自定义错误页面, (根据 SpringBoot 查找错误页面的逻辑来自定义错误页面: <code>/error/500.html</code>, <code>/error/400.html</code>, <code>/error.html</code>)</li>
</ol>
<blockquote>
<p>可以自己根据文章一步一步走一遍, 或者看我写好的演示项目先看看效果, 总是动手实践, 而不是收藏文章并封存。<br>演示项目地址: <a href="https://github.com/zhaojun1998/exception-handler-demo">https://github.com/zhaojun1998/exception-handler-demo</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>异常处理</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC/Boot 统一异常处理最佳实践</title>
    <url>/springboot-exception/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <code>Web</code> 开发中, 我们经常会需要处理各种异常, 这是一件棘手的事情, 对于很多人来说, 可能对异常处理有以下几个问题:</p>
<ul>
<li>什么时候需要捕获(<code>try-catch</code>)异常, 什么时候需要抛出(<code>throws</code>)异常到上层.</li>
<li>在 <code>dao</code> 层捕获还是在 <code>service</code> 捕获, 还是在 <code>controller</code> 层捕获.</li>
<li>抛出异常后要怎么处理. 怎么返回给页面错误信息.</li>
</ul>
<span id="more"></span>

<h2 id="异常处理反例"><a href="#异常处理反例" class="headerlink" title="异常处理反例"></a>异常处理反例</h2><p>既然谈到异常, 我们先来说一下异常处理的反例, 也是很多人容易犯的错误, 这里我们同时讲到前端处理和后端处理 : </p>
<h3 id="捕获异常后只输出到控制台"><a href="#捕获异常后只输出到控制台" class="headerlink" title="捕获异常后只输出到控制台"></a>捕获异常后只输出到控制台</h3><p>前端代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;/user/add&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>后端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是见过最多的异常处理方式了, 如果这是一个添加商品的方法, 前台通过 ajax 发送请求到后端, 期望返回 json 信息表示添加结果. 但如果这段代码出现了异常:</p>
</blockquote>
<ul>
<li>那么用户看到的场景就是点击了添加按钮, 但没有任何反应(其实是返回了 500 错误页面, 但这里前端没有监听 error 事件, 只监听了 success 事件. 但即使加上了<code>error: function(data) &#123;alert(&quot;添加失败&quot;);&#125;</code>) 又如何呢? 到底因为啥失败了呢, 用户也不得而知. </li>
<li>后台 <code>e.printStackTrace()</code> 打印在控制台的日志也会在漫漫的日志中被埋没, 很可能会看不到输出的异常. 但这并不是最糟的情况, 更糟糕的事情是连 <code>e.printStackTrace()</code> 都没有, <code>catch</code> 块中是空的, 这样后端的控制台中更是什么都看不到了, 这段代码会像一个隐形的炸弹一样一直埋伏在系统中.</li>
</ul>
<h3 id="混乱的返回方式"><a href="#混乱的返回方式" class="headerlink" title="混乱的返回方式"></a>混乱的返回方式</h3><p>前端代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;/goods/add&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.flag) &#123;</span><br><span class="line">            alert(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(data.message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>后端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/goods/add&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">add</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        map.put(flag, <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        map.put(<span class="string">&quot;flag&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    reutrn map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这种方式捕获异常后, 返回了错误信息, 且前台做了一定的处理, 看起来很完善? 但用 <code>HashMap</code> 中的 <code>flag</code> 和 <code>message</code> 这种字符串来当键很容易处理, 例如你这里叫 <code>message</code>, 别人起名叫 <code>msg</code>, 甚至有时手抖打错了, 怎么办? 前台再改成 <code>msg</code> 或其他的字符?, 前端后端这样一直来回改?<br>更有甚者在情况 A 的情况下, 返回 json, 在情况 B 的情况下, 重定向到某个页面, 这就更乱了. 对于这种不统一的结构处理起来非常麻烦.</p>
</blockquote>
<h2 id="异常处理规范"><a href="#异常处理规范" class="headerlink" title="异常处理规范"></a>异常处理规范</h2><p>既然要进行<strong>统一</strong>异常处理, 那么肯定要有一个规范, 不能乱来. 这个规范包含前端和后端.</p>
<h3 id="不要捕获任何异常"><a href="#不要捕获任何异常" class="headerlink" title="不要捕获任何异常"></a>不要捕获任何异常</h3><p>对的, 不要在<strong>业务代码中</strong>进行捕获异常, 即 dao、service、controller 层的所以异常都全部抛出到上层. 这样不会导致业务代码中的一堆 <code>try-catch</code> 会混乱业务代码.</p>
<h3 id="统一返回结果集"><a href="#统一返回结果集" class="headerlink" title="统一返回结果集"></a>统一返回结果集</h3><p>不要使用 Map 来返回结果, Map 不易控制且容易犯错, 应该定义一个 Java 实体类. 来表示统一结果来返回, 如定义实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Collection&lt;T&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResultBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultBean <span class="title">error</span><span class="params">(<span class="keyword">int</span> code, String message)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(code);</span><br><span class="line">        resultBean.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultBean <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">0</span>);</span><br><span class="line">        resultBean.setMessage(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; <span class="function">ResultBean&lt;V&gt; <span class="title">success</span><span class="params">(Collection&lt;V&gt; data)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">0</span>);</span><br><span class="line">        resultBean.setMessage(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        resultBean.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter / setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>正常情况: 调用 <code>ResultBean.success()</code> 或 <code>ResultBean.success(Collection&lt;V&gt; data)</code>, 不需要返回数据, 即调用前者, 需要返回数据, 调用后者. 如:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/goods/add&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultBean&lt;Goods&gt; <span class="title">getAllGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Goods&gt; goods = goodsService.findAll();</span><br><span class="line">    <span class="keyword">return</span> ResultBean.success(goods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/goods/update&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultBean <span class="title">updateGoods</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">    goodsService.update(goods);</span><br><span class="line">    <span class="keyword">return</span> ResultBean.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般只有查询方法需要调用 <code>ResultBean.success(Collection&lt;V&gt; data)</code> 来返回 N 条数据, 其他诸如删除, 修改等方法都应该调用 <code>ResultBean.success()</code>, 即在业务代码中只处理正确的功能, 不对异常做任何判断. 也不需要对 update 或 delete 的更新条数做判断(个人建议, 实际需要根据业务). 只要没有抛出异常, 我们就认为用户操作成功了. 且操作成功的提示信息在前端处理, 不要后台返回 “操作成功” 等字段.</p>
<p>前台接受到的信息为: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;商品1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;price&quot;</span>: <span class="number">50.00</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;商品2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;price&quot;</span>: <span class="number">99.99</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抛出异常: 抛出异常后, 我们应该调用 <code>ResultBean.error(int code, String message)</code>, 来将状态码和错误信息返回, 我们约定 <code>code</code> 为 0 表示操作成功, <code>1</code> 或 <code>2</code> 等正数表示用户输入错误, <code>-1</code>, <code>-2</code> 等负数表示系统错误.</li>
</ul>
<p>前台接受到的信息为: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;XXX 参数有问题, 请重新填写&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端统一处理"><a href="#前端统一处理" class="headerlink" title="前端统一处理:"></a>前端统一处理:</h3><p>返回的结果集规范后, 前端就很好处理了:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示错误信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>result： 错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showError</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    alert(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理 ajax 请求结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>result： ajax 返回的结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fn： 成功的处理函数 ( 传入data: fn(result.data) )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerResult</span>(<span class="params">result, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 成功执行操作，失败提示原因</span></span><br><span class="line">    <span class="keyword">if</span> (result.code == <span class="number">0</span>) &#123;</span><br><span class="line">        fn(result.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户操作异常, 这里可以对 1 或 2 等错误码进行单独处理, 也可以 result.code &gt; 0 来粗粒度的处理, 根据业务而定.</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result.code == <span class="number">1</span>) &#123;</span><br><span class="line">        showError(result.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 系统异常, 这里可以对 -1 或 -2 等错误码进行单独处理, 也可以 result.code &gt; 0 来粗粒度的处理, 根据业务而定.</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result.code == -<span class="number">1</span>) &#123;</span><br><span class="line">        showError(result.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果进行细粒度的状态码判断, 那么就应该重点注意这里没出现过的状态码. 这个判断仅建议在开发阶段保留用来发现未定义的状态码.</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        showError(<span class="string">&quot;出现未定义的状态码:&quot;</span> + result.code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 删除商品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteGoods</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        url: <span class="string">&quot;/goods/delete&quot;</span>,</span><br><span class="line">        dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">            handlerResult(result, deleteDone);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDone</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>showError</code> 和 <code>handlerResult</code> 是公共方法, 分别用来显示错误和统一处理结果集.</p>
<p>然后将主要精力放在发送请求和处理正确结果的方法上即可, 如这里的 deleteDone 函数, 用来处理操作成功给用户的提示信息, 正所谓各司其职, 前端负责操作成功的消息提示更合理, 而错误信息只有后台知道, 所以需要后台来返回.</p>
<h3 id="后端统一处理异常"><a href="#后端统一处理异常" class="headerlink" title="后端统一处理异常"></a>后端统一处理异常</h3><p>说了这么多, 还没讲到后端不在业务层捕获任何异常的事, 既然所有业务层都没有捕获异常, 那么所有的异常都会抛出到 Controller 层, 我们只需要用 AOP 对 Controller 层的所有方法处理即可.</p>
<p>好在 Spring 为我们提供了一个注解, 用来统一处理异常:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(WebExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">unknownAccount</span><span class="params">(UnknownAccountException e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;账号不存在&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResultBean.error(<span class="number">1</span>, <span class="string">&quot;账号不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">incorrectCredentials</span><span class="params">(IncorrectCredentialsException e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;密码错误&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResultBean.error(-<span class="number">2</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">unknownException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;发生了未知异常&quot;</span>, e);</span><br><span class="line">        <span class="comment">// 发送邮件通知技术人员.</span></span><br><span class="line">        <span class="keyword">return</span> ResultBean.error(-<span class="number">99</span>, <span class="string">&quot;系统出现错误, 请联系网站管理员!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里统一配置需要处理的异常, 同样, 对于未知的异常, 一定要及时发现, 并进行处理. 推荐出现未知异常后发送邮件, 提示技术人员.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下统一异常处理的方法: </p>
<ol>
<li>不使用随意返回各种数据类型, 要统一返回值规范.</li>
<li>不在业务代码中捕获任何异常, 全部交由 <code>@ControllerAdvice</code> 来处理.</li>
</ol>
<blockquote>
<p>一个简单的演示项目: <a href="https://github.com/zhaojun1998/exception-handler-demo">https://github.com/zhaojun1998/exception-handler-demo</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>异常处理</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SLF4J MDC ☞ 将用户信息添加到日志信息中</title>
    <url>/springboot-slf4j-mdc/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你是否有过排查某个用户的操作出现 BUG 时, 从茫茫日志中寻找这个用户操作的痛苦经历, SLF4J 为我们提供了一种基于 <code>ThreadLocal</code> 来实现的 <code>MDC</code> 功能, 用来将自定义信息放入到日志中.</p>
<p>你可能没太明白啥意思, 那么先来看看效果把:</p>
<p>普通日志:<br><img src="https://cdn.jun6.net/201902041823_308.png"></p>
<p>加上MDC的日志:<br><img src="https://cdn.jun6.net/201902041825_734.png"></p>
<span id="more"></span>

<h2 id="食用方式"><a href="#食用方式" class="headerlink" title="食用方式"></a>食用方式</h2><p>可以使用过滤器, 拦截器或 AOP 等方式来实现, 即在用户请求时, 将用户信息写入到 <code>MDC</code> 中, 然后在请求完成后, 清空此 MDC.</p>
<p>我这里使用 SpringMVC 的拦截器 <code>HandlerInterceptor</code> 来演示下, (我这里使用了 Shiro, 所以会调用 Shiro 的代码来获取当前登录用户):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String MDC_USERNAME = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LogInterceptor.class);</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 如已进行登录, 则获取当前登录者的用户名放入 MDC 中.</span></span><br><span class="line">        String username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (SecurityUtils.getSubject().getPrincipal() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            username = ((User) SecurityUtils.getSubject().getPrincipal()).getUsername();</span><br><span class="line">        &#125;</span><br><span class="line">        MDC.put(MDC_USERNAME, username);</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;MDC : PUT MDC_USERNAME (&#123;&#125;) in logger&quot;</span>, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = MDC.get(MDC_USERNAME);</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;MDC : remove MDC_USERNAME (&#123;&#125;) from logger&quot;</span>, username);</span><br><span class="line">        MDC.remove(username);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再将其配置到 Spring 拦截器中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfigurer</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogInterceptor logInterceptor;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(logInterceptor);</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在日志格式中使用 <code>%X&#123;username&#125;</code> 将 MDC 添加进去即可, 由于我使用的是 SpringBoot 的 <code>logback</code>， 所以在保留原 SpringBoot 默认格式的同时, 加上了 MDC:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:%5p&#125;) %clr($&#123;PID&#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; [%10.10X&#123;username&#125;] %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:%wEx&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
        <tag>SLF4J</tag>
      </tags>
  </entry>
  <entry>
    <title>超级丑数</title>
    <url>/super-ugly-number/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>写一个程序来找第 n 个超级丑数。</p>
<p>超级丑数的定义是正整数并且所有的质数因子都在所给定的一个大小为 k 的质数集合内。</p>
<p>比如给你 4 个质数的集合 <code>[2, 7, 13, 19]</code>, 那么 <code>[1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]</code> 是前 12 个超级丑数。</p>
<div class="note info"><p> 注意事项</p>
<ul>
<li><code>1</code> 永远都是超级丑数不管给的质数集合是什么。</li>
<li>给你的质数集合已经按照升序排列。</li>
<li><code>0 &lt; k ≤ 100,</code> <code>0 &lt; n ≤ 10^6</code>, <code>0 &lt; primes[i] &lt; 1000</code></li>
</ul>
</div>

<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 n = <code>6</code> 和质数集合 <code>[2, 7, 13, 19]</code>。第 6 个超级丑数为 13，所以返回 <code>13</code> 作为结果。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题其实就是<a href="/ugly-number-ii/" title="丑数II">丑数II</a> 的加强版，只是原来的丑数定义质因子是固定的 3 个，现在是自定义的质因子。</p>
<p>只需要将 <a href="/ugly-number-ii/" title="丑数II">丑数II</a> 中的 lastUgly 用数组存放起来即可，其他思路还是一样的。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n a positive integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> primes the given prime list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the nth super ugly number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthSuperUglyNumber</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] primes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] uglys = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] idxPrimes = <span class="keyword">new</span> <span class="keyword">int</span>[primes.length];</span><br><span class="line">        uglys[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; primes.length; j++) &#123;</span><br><span class="line">                min = Math.min(min, primes[j] * uglys[idxPrimes[j]]);</span><br><span class="line">            &#125;</span><br><span class="line">            uglys[i] = min;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; primes.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (primes[j] * uglys[idxPrimes[j]] == min) &#123;</span><br><span class="line">                    idxPrimes[j]++;                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uglys[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/super-ugly-number/#">LintCode：超级丑数</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>两两交换链表中的节点</title>
    <url>/swap-nodes-in-pairs/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个链表，两两交换其中的节点，然后返回交换后的链表。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <code>1-&gt;2-&gt;3-&gt;4</code>, 你应该返回的链表是 <code>2-&gt;1-&gt;4-&gt;3</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题只要循环判断后两个节点不为空的情况下，将后面这两个元素进行交换即可<strong>，最重要的是，交换的时候，要记得保留原数据，以便拼接起来链表，谨防数据丢失。</strong></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head a ListNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        head = dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (head.next != <span class="keyword">null</span> &amp;&amp; head.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode n1 = head.next;</span><br><span class="line">            ListNode n2 = head.next.next;</span><br><span class="line">            </span><br><span class="line">            head.next = n2;</span><br><span class="line">            n1.next = n2.next;</span><br><span class="line">            n2.next = n1;</span><br><span class="line">            </span><br><span class="line">            head = n1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/swap-nodes-in-pairs/">LintCode：两两交换链表中的节点</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>交换两个数</title>
    <url>/swap-two-number/</url>
    <content><![CDATA[<h2 id="用临时变量交换2个数"><a href="#用临时变量交换2个数" class="headerlink" title="用临时变量交换2个数"></a>用临时变量交换2个数</h2><p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);    <span class="comment">//交换前2个数的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);     <span class="comment">//交换后2个数的值</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方式也是我们经常用到的，比较容易理解的一种方法。</p>
</blockquote>
<h2 id="不用临时变量交换2个数"><a href="#不用临时变量交换2个数" class="headerlink" title="不用临时变量交换2个数"></a>不用临时变量交换2个数</h2><span id="more"></span>

<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);    <span class="comment">//交换前2个数的值</span></span><br><span class="line"></span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);   <span class="comment">//交换后2个数的值</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用这种方式要注意：如果a和b的值非常大，容易超出int的取值范围。</p>
</blockquote>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);   <span class="comment">//交换前2个数的值</span></span><br><span class="line"></span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);  <span class="comment">//交换后2个数的值</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>本方法使用了位运算的相关知识。没有上面的方法易于理解，但是可能会被考到。</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最小差</title>
    <url>/the-smallest-difference/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定两个整数数组（第一个是数组 <code>A</code>，第二个是数组 <code>B</code>），在数组 A 中取 A[i]，数组 B 中取 B[j]，A[i] 和 B[j]两者的差越小越好(|A[i] - B[j]|)。返回最小差。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给定数组 A = <code>[3,4,6,7]</code>， B = <code>[2,3,8,9]</code>，返回 <code>0</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先对两个数组进行排序，然后设 2 个指针 i, j 分别指向 A 和 B 的第一个元素，依次向后遍历，取 <code>A[i] - A[j]</code> 的绝对值，就是差值，将遍历过程中最小的差值记录下来，若遍历过程中 <code>A[i] == A[j]</code> ，那么就直接返回 0。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A, B: Two integer arrays.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: Their smallest difference.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">smallestDifference</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span> || B == <span class="keyword">null</span> || B.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">        Arrays.sort(B);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; A.length &amp;&amp; j &lt; B.length) &#123;</span><br><span class="line">            min = Math.min(min, Math.abs(A[i] - B[j]));</span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; B[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[i] &lt; B[j]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/the-smallest-difference/">LintCode：最小差</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>两根指针</tag>
      </tags>
  </entry>
  <entry>
    <title>两个字符串是变位词</title>
    <url>/two-strings-are-anagrams/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写出一个函数 <code>anagram(s, t)</code> 判断两个字符串是否可以通过改变字母的顺序变成一样的字符串。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 s = <code>&quot;abcd&quot;</code>，t=<code>&quot;dcab&quot;</code>，返回 <code>true</code>.<br>给出 s = <code>&quot;ab&quot;</code>, t = <code>&quot;ab&quot;</code>, 返回 <code>true</code>.<br>给出 s = <code>&quot;ab&quot;</code>, t = “<code>ac&quot;</code>, 返回 <code>false</code>.</p>
<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param s: The first string</span><br><span class="line">     * @param b: The second string</span><br><span class="line">     * @return true or false</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean anagram(String s, String t) &#123;</span><br><span class="line">        &#x2F;&#x2F;转为字符数组以便使用Arrays.sort方法</span><br><span class="line">        char[] arr1 &#x3D; s.toCharArray();</span><br><span class="line">		char[] arr2 &#x3D; t.toCharArray();</span><br><span class="line">		&#x2F;&#x2F;对转换后的字符数组进行按a-z的顺序进行排序</span><br><span class="line">		Arrays.sort(arr1);</span><br><span class="line">		Arrays.sort(arr2);</span><br><span class="line">		&#x2F;&#x2F;排序完成后，再转回字符串，然后用equals方法进行比较是否为变位词</span><br><span class="line">		if(String.copyValueOf(arr1).equals(String.copyValueOf(arr2)))</span><br><span class="line">			return true;</span><br><span class="line">		else</span><br><span class="line">			return false;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>本题目来自LintCode : <a href="http://www.lintcode.com/zh-cn/problem/two-strings-are-anagrams/">两个字符串是变位词</a></p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/two-sum/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个整数数组，找到两个数使得他们的和等于一个给定的数 <code>target</code>。</p>
<p>你需要实现的函数 <code>twoSum</code> 需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是 1 到 n，不是以 0 开头。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 numbers = <code>[2, 7, 11, 15]</code>, target = 9, 返回 <code>[1, 2]</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以用一个 Map 集合，遍历数组，先记录下当前数与目标数的差值与角标，然后寻找与这个差值相同的数，找到后，将这两个数的角标加 1 后返回即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param numbers : An array of Integer</span></span><br><span class="line"><span class="comment">     * @param target : target = numbers[index1] + numbers[index2]</span></span><br><span class="line"><span class="comment">     * @return : [index1 + 1, index2 + 1] (index1 &lt; index2)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(numbers[i]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] result = &#123;map.get(numbers[i]) + <span class="number">1</span>, i + <span class="number">1</span>&#125;;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(target - numbers[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/two-sum/">LintCode：两数之和</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>哈希表</tag>
        <tag>两根指针</tag>
      </tags>
  </entry>
  <entry>
    <title>丑数II</title>
    <url>/ugly-number-ii/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>设计一个算法，找出只含素因子<code>2</code>，<code>3</code>，<code>5</code> 的第 n 大的数。</p>
<p>符合条件的数如：<code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12...</code></p>
<div class="note info"><p>注意事项：我们可以认为 1 也是一个丑数</p>
</div>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>如果n = 9， 返回 10</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实改题的题意就是在所有 <code>丑数</code> 列表中，找到第 n 个丑数。</p>
<p>最简单的做法是从 1 开始，判断每一个数是否是一个丑数，是的话则加到丑数列表中，直到丑数列表的大小等于 n，但是这种方法效率较低，我们可以根据规律而尝试只创造出有效的丑数。</p>
<pre><code>1*2=2 2*2=4  3*2=6  4*2=8  5*2=10 ...
1*3=3 2*3=6  3*3=9  4*3=12 5*3=15 ...
1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 ...
</code></pre>
<p>观察规律可得，丑数是取已有的丑数乘以 2 或 3 或 5 得到的，那么我们可以先将特殊的丑数 1 放进丑数列表中。</p>
<p>因为已存在的丑数肯定在列表中是按照顺序存放的，所以对于乘以 2 而言，肯定存在一个丑数 p2，在它之前的每一个丑数乘以 2 都是当前列表中最后一个丑数的，通用，在它之后的每一个丑数乘以 2 的结果都是大于当前列表中最后一个丑数的，我们只需要记住 p2 的这个位置，同样存在的还有 p3 和 p5，记住这 3 个数的位置，就可以一些避免不必要的比较。</p>
<p>我们只需要取出 p2, p3, p5 位置的那个数，分别乘以 2, 3, 5 将结果最小的存入到丑数列表中即可。直到丑数列表的个数达到 n。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param n: An integer</span></span><br><span class="line"><span class="comment">     * @return: the nth prime number as description.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; uglys = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        uglys.add(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p2 = <span class="number">0</span>, p3 = <span class="number">0</span>, p5 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> lastUgly = uglys.get(i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (uglys.get(p2) * <span class="number">2</span> &lt;= lastUgly) p2++;</span><br><span class="line">            <span class="keyword">while</span> (uglys.get(p3) * <span class="number">3</span> &lt;= lastUgly) p3++;</span><br><span class="line">            <span class="keyword">while</span> (uglys.get(p5) * <span class="number">5</span> &lt;= lastUgly) p5++;</span><br><span class="line">            </span><br><span class="line">            uglys.add(Math.min(</span><br><span class="line">                Math.min(uglys.get(p2) * <span class="number">2</span>, uglys.get(p3) * <span class="number">3</span>),</span><br><span class="line">                uglys.get(p5) * <span class="number">5</span>)</span><br><span class="line">                );</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> uglys.get(n -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/ugly-number-ii/">LintCode：丑数II</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>丑数</title>
    <url>/ugly-number/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>写一个程序来检测一个整数是不是<code>丑数</code>。</p>
<p>丑数的定义是，只包含质因子 <code>2, 3, 5</code> 的正整数。比如 6, 8 就是丑数，但是 14 不是丑数以为他包含了质因子 7。</p>
<p> 注意事项</p>
<p>可以认为 1 是一个特殊的丑数。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 num = 8，返回 <code>true</code>。<br>给出 num = 14，返回 <code>false</code>。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使 sum 依次对 2, 3, 5 相除，直到与 2, 3, 5 的余数不为 0，最终 sum 为 1，则代表该数只能被 2, 3, 5整除，返回 <code>true</code>，反之返回 <code>false</code>。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param num: An integer</span></span><br><span class="line"><span class="comment">     * @return: true if num is an ugly number or false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (num &gt;= <span class="number">2</span> &amp;&amp; num % <span class="number">2</span> == <span class="number">0</span>) num /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= <span class="number">3</span> &amp;&amp; num % <span class="number">3</span> == <span class="number">0</span>) num /= <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= <span class="number">5</span> &amp;&amp; num % <span class="number">5</span> == <span class="number">0</span>) num /= <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> num == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/ugly-number/">LintCode：丑数</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>判断字符串是否没有重复元素</title>
    <url>/unique-characters/</url>
    <content><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>实现一个算法确定字符串中的字符是否均唯一出现</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>给出 <code>&quot;abc&quot;</code>，返回 <code>true</code></p>
<p>给出 <code>&quot;aab&quot;</code>，返回 <code>false</code></p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>解法一：可以利用查表法，首先建立一个大小为 256 位的布尔类型的数组，因为 ASCII 表中一共就有 256 的字符，依次取字符串中的每一个位，将其在 ASCII 表中的位置放到数组中，True 表示该字符已存在，Flase 则表示该字符不存在。</p>
<p>解法二：不利用额外空间的话，就将当前位与剩余位依次进行比较才能实现，比较消耗时间。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str: a string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: a boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUnique</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">boolean</span>[] char_set = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">var</span> = str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (char_set[<span class="keyword">var</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            char_set[<span class="keyword">var</span>] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str: a string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: a boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUnique</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; str.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str.charAt(i) == str.charAt(j))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原题地址"><a href="#原题地址" class="headerlink" title="原题地址"></a>原题地址</h2><p><a href="http://www.lintcode.com/zh-cn/problem/unique-characters/">LintCode：判断字符串是否没有重复字符</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 转换 Socks5  为 HTTP 代理</title>
    <url>/windows-socks5-http/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于某墙，使我们不得已使用一些工具来查阅外面的资料，我使用的是 <code>SS/SSR</code> 配合 Chrome 应用商店的 <code>Proxy SwitchyOmega</code> 来配合上网的，但是 <code>SS/SSR</code> 给予的本地端口是 <code>Socks5</code> 的，但有一些工具仅支持 <code>HTTP</code> 协议的代理，所以只好再借助一个工具 <code>Privoxy</code> 来转换一下。</p>
<span id="more"></span>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://www.privoxy.org/sf-download-mirror/Win32/3.0.26%20%28stable%29/">下载地址</a></p>
<blockquote>
<p><code>.zip</code> 是便携版、<code>.exe</code> 是安装版，根据自己的需求下载即可</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开安装目录下的 <code>config.txt</code> 文件，然后在文件末尾加上一行 <code>forward-socks5 / 127.0.0.1:1080 .</code></p>
<blockquote>
<p>注意：这里的1080是指本机的 Shadowsocks 所在的端口号，默认为1080，后面那个点也不能省略。（此操作要在没有打开这个软件的情况下进行）</p>
</blockquote>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>请确保此时已打开 <code>SS/SSR</code>、<code>Privoxy</code> 以及确保 <code>Privoxy</code> 的配置配置文件已修改并保存。</p>
<h2 id="常用软件配置"><a href="#常用软件配置" class="headerlink" title="常用软件配置"></a>常用软件配置</h2><h3 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h3><p>打开浏览器设置点击 <code>更改代理服务器设置</code>，找不到就在设置里搜索。<br><img src="https://cdn.jun6.net/201711201512_184.png"><br><img src="https://cdn.jun6.net/201711201513_388.png"></p>
<p>配置后打开 <code>http://p.p/</code> ，如下图所示，则代表成功<br><img src="https://cdn.jun6.net/201711201506_535.png" alt="如图"></p>
<h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><p>打开 <code>Preferences &gt; Package Settings &gt; Package Control &gt; Settings - User</code> 菜单<br>编辑 <code>Package Control.sublime-settings</code>，添加两行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;http_proxy&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:8118&quot;,</span><br><span class="line">&quot;https_proxy&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:8118&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jun6.net/201711201519_542.png"></p>
<h3 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h3><p>有时使用 IDM 下载一些国外的站点的文件，会很慢，我们也配置一下带来，但毕竟 IDM 是一个下载工具，我们也不希望它下载任何东西都使用代理下载，这样会造成很大的浪费，配置如下：</p>
<p>第一个选项，使用自动配置脚本，就是为了防止一些不必要的下载浪费代理流量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;softs.fun&#x2F;Other&#x2F;pac.txt</span><br></pre></td></tr></table></figure>

<p>下面可以选择 <code>代理服务器</code> 或 <code>Socks</code>  ，使用 <code>Socks</code> 即是 <code>SS/SSR</code> 的代理端口</p>
<p><img src="https://cdn.jun6.net/201711201525_991.png"></p>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>ZFile 安装文档</title>
    <url>/zfile-install/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div style="color: red">
    更新文档地址为  http://docs.zhaojun.im/zfile   , 请访问新地址。
</div>


<hr>
<p>最近开发了一个在线网盘程序 ZFile, 支持各种对象存储、OneDrive、FTP、本地存储. 本文包含普通用户和宝塔用户的安装方式.</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS系统</span></span><br><span class="line">yum install -y java-1.8.0-openjdk unzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian/Ubuntu系统</span></span><br><span class="line">apt update</span><br><span class="line">apt install -y openjdk-8-jre-headless unzip</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<blockquote>
<p>如为更新程序, 则请先执行 <code>~/zfile/bin/stop.sh </code> 停止命令和 <code>rm -rf ~/zfile</code> 清理旧程序. 首次安装请忽略此选项. 不会删除数据文件.</p>
</blockquote>
<h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -P ~ https://c.jun6.net/ZFILE/zfile-release.war</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir zfile &amp;&amp; unzip zfile-release.war -d zfile &amp;&amp; rm -rf zfile-release.war</span><br><span class="line">chmod +x ~/zfile/bin/*.sh</span><br></pre></td></tr></table></figure>

<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── zfile</span><br><span class="line">    ├── META-INF</span><br><span class="line">    ├── WEB-INF</span><br><span class="line">    └── bin</span><br><span class="line">        ├── start.sh    <span class="comment"># 启动脚本</span></span><br><span class="line">        └── stop.sh     <span class="comment"># 停止脚本</span></span><br><span class="line">        ├── restart.sh  <span class="comment"># 重启脚本</span></span><br></pre></td></tr></table></figure>

<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/zfile/bin/start.sh</span><br></pre></td></tr></table></figure>

<h2 id="停止项目"><a href="#停止项目" class="headerlink" title="停止项目"></a>停止项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/zfile/bin/stop.sh</span><br></pre></td></tr></table></figure>

<h2 id="重启项目"><a href="#重启项目" class="headerlink" title="重启项目"></a>重启项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/zfile/bin/restart.sh</span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/zfile/WEB-INF/classes/application.yml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认启动端口为 8080, 如需请配置文件请编辑上述文件, 修改后重启程序生效.</p>
</blockquote>
<h2 id="开放端口-重点"><a href="#开放端口-重点" class="headerlink" title="开放端口 (重点)"></a>开放端口 (重点)</h2><p>如部署后无法访问, 请检查防火墙是否开启此端口:</p>
<h3 id="宝塔用户"><a href="#宝塔用户" class="headerlink" title="宝塔用户"></a>宝塔用户</h3><p>宝塔用户可以去后台开放端口:</p>
<p><img src="http://cdn.jun6.net/2020/01/30/18fa335b407ae.png" alt="Snipaste_2020-01-30_18-54-42.png"></p>
<h3 id="CentOS-7-x"><a href="#CentOS-7-x" class="headerlink" title="CentOS 7.x"></a>CentOS 7.x</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent <span class="comment"># 开放 8080 端口</span></span><br><span class="line">firewall-cmd --reload                                      <span class="comment"># 重启firewall</span></span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu-16-x-Debian-9-x"><a href="#Ubuntu-16-x-Debian-9-x" class="headerlink" title="Ubuntu 16.x / Debian 9.x"></a>Ubuntu 16.x / Debian 9.x</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">iptables-save</span><br><span class="line">sudo apt-get install iptables-persistent</span><br><span class="line">sudo netfilter-persistent save</span><br><span class="line">sudo netfilter-persistent reload</span><br></pre></td></tr></table></figure>

<h2 id="域名访问"><a href="#域名访问" class="headerlink" title="域名访问"></a>域名访问</h2><p>域名访问可直接将域名 <code>A</code> 记录解析到服务器 IP, 即可通过 <code>域名:端口</code> 访问.</p>
<p>如需直接使用域名, 不带端口, 可将程序设置为 80 端口, 或者使用 <code>nginx</code> 或 <code>caddy</code> 等工具进行反向代理.</p>
<p>这里只简单介绍下宝塔如何进行反向代理:</p>
<p>首先点击 <code>网站</code> -&gt; <code>新增站点</code>:</p>
<p><img src="http://cdn.jun6.net/2020/01/30/558b35c21519c.png" alt="Snipaste_2020-01-30_19-00-49.png"></p>
<p>点击反向代理:</p>
<p><img src="http://cdn.jun6.net/2020/01/30/2bf2585516f8d.png" alt="Snipaste_2020-01-30_19-01-31.png"></p>
<p>设置反向代理:</p>
<p><img src="http://cdn.jun6.net/2020/01/30/ac865a78a617b.png" alt="Snipaste_2020-01-30_19-03-21.png"></p>
<p>然后就可以使用域名访问了.</p>
<p>教程到此结束, 如有其它问题, 可联系我 QQ: <strong>873019219</strong></p>
<h2 id="支持作者"><a href="#支持作者" class="headerlink" title="支持作者"></a>支持作者</h2><p>如果本项目对你有帮助，请作者喝杯咖啡吧。</p>
<img src="http://cdn.jun6.net/alipay.png" width="200" height="312">
<img src="http://cdn.jun6.net/wechat.png" width="222" height="300">

]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>网盘</tag>
        <tag>ZFile</tag>
      </tags>
  </entry>
  <entry>
    <title>Z-File 在线网盘程序，支持对象存储、本地存储、S3 协议、OneDrive 商业/家庭/个人/世纪互联版</title>
    <url>/zfile-readme/</url>
    <content><![CDATA[<div style="color: red">
    更新文档地址为  http://docs.zhaojun.im/zfile   , 请访问新地址。
</div>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此项目是一个在线文件目录的程序, 支持各种对象存储和本地存储, 使用定位是个人放常用工具下载, 或做公共的文件库. 不会向多账户方向开发.</p>
<p>前端基于 <a href="https://larsjung.de/h5ai/">h5ai</a> 的原有功能使用 Vue 重新开发了一遍. 后端采用 SpringBoot, 数据库采用内嵌数据库.</p>
<p>预览地址: <a href="https://zfile.jun6.net/">https://zfile.jun6.net</a><br>项目地址: <a href="https://github.com/zhaojun1998/zfile">https://github.com/zhaojun1998/zfile</a></p>
<span id="more"></span>

<h2 id="系统特色"><a href="#系统特色" class="headerlink" title="系统特色"></a>系统特色</h2><ul>
<li>内存缓存 (免安装)</li>
<li>内存数据库 (免安装)</li>
<li>个性化配置</li>
<li>自定义目录的 header 说明文件</li>
<li>自定义 JS, CSS</li>
<li>文件夹密码</li>
<li>支持在线浏览文本文件, 视频, 图片, 音乐. (支持 FLV 和 HLS)</li>
<li>文件/目录二维码</li>
<li>缓存动态开启, 缓存自动刷新</li>
<li>全局搜索</li>
<li>支持 阿里云 OSS, FTP, 华为云 OBS, 本地存储, MINIO, OneDrive 国际/家庭/个人版, OneDrive 世纪互联版, 七牛云 KODO, 腾讯云 COS, 又拍云 USS.</li>
</ul>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>安装依赖环境:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS系统</span></span><br><span class="line">yum install -y java-1.8.0-openjdk unzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian/Ubuntu系统</span></span><br><span class="line">apt update</span><br><span class="line">apt install -y openjdk-8-jre-headless unzip</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如为更新程序, 则请先执行 <code>rm -rf ~/zfile</code> 清理旧程序. 首次安装请忽略此选项.</p>
</blockquote>
<p>下载项目:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -P ~ https://c.jun6.net/ZFILE/zfile-release.war</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir zfile &amp;&amp; unzip zfile-release.war -d zfile &amp;&amp; rm -rf zfile-release.war</span><br><span class="line">chmod +x ~/zfile/bin/*.sh</span><br></pre></td></tr></table></figure>

<p>程序的目录结构为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── zfile</span><br><span class="line">    ├── META-INF</span><br><span class="line">    ├── WEB-INF</span><br><span class="line">    └── bin</span><br><span class="line">        ├── start.sh    # 启动脚本</span><br><span class="line">        └── stop.sh     # 停止脚本</span><br><span class="line">        ├── restart.sh  # 重启脚本</span><br></pre></td></tr></table></figure>

<p>启动项目:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/zfile/bin/start.sh</span><br></pre></td></tr></table></figure>

<p>篇幅有限, 更详细的安装教程请参考: <a href="http://zhaojun.im/zfile-install">安装文档</a></p>
<p>访问地址:</p>
<p>用户前台: <a href="http://127.0.0.1:8080/#/main">http://127.0.0.1:8080/#/main</a></p>
<p>初始安装: <a href="http://127.0.0.1:8080/#/install">http://127.0.0.1:8080/#/install</a></p>
<p>管理后台: <a href="http://127.0.0.1:8080/#/admin">http://127.0.0.1:8080/#/admin</a></p>
<h2 id="OneDrive-使用教程"><a href="#OneDrive-使用教程" class="headerlink" title="OneDrive 使用教程."></a>OneDrive 使用教程.</h2><p>访问地址进行授权, 获取 accessToken 和 refreshToken:</p>
<p>国际/家庭/个人版:</p>
<p><a href="https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=09939809-c617-43c8-a220-a93c1513c5d4&amp;response_type=code&amp;redirect_uri=https://zfile.jun6.net/onedirve/callback&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All">https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=09939809-c617-43c8-a220-a93c1513c5d4&amp;response_type=code&amp;redirect_uri=https://zfile.jun6.net/onedirve/callback&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All</a></p>
<p>世纪互联版:</p>
<p><a href="https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=4a72d927-1907-488d-9eb2-1b465c53c1c5&amp;response_type=code&amp;redirect_uri=https://zfile.jun6.net/onedirve/china-callback&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All">https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=4a72d927-1907-488d-9eb2-1b465c53c1c5&amp;response_type=code&amp;redirect_uri=https://zfile.jun6.net/onedirve/china-callback&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All</a></p>
<p>然后分别填写至访问令牌和刷新令牌即可:</p>
<p><img src="http://cdn.jun6.net/2020-01-24_18-57-06.png" alt="http://cdn.jun6.net/2020-01-24_18-57-06.png"></p>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul>
<li>JDK: <code>1.8</code></li>
<li>缓存: <code>caffeine</code></li>
<li>数据库: <code>h2/mysql</code></li>
</ul>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="http://cdn.jun6.net/2020/01/29/a252a5cec7134.png" alt="前台首页"><br><img src="http://cdn.jun6.net/2020/01/29/d5c85221bcffc.png" alt="后台设置"><br><img src="http://cdn.jun6.net/2020/01/29/4b79bfba4e003.png" alt="存储策略"><br><img src="http://cdn.jun6.net/2020/01/29/60b0538e50f9f.png" alt="缓存管理"></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>缓存默认支持 <code>h2</code> 和 <code>mysql</code>, 前者为嵌入式数据库, 无需安装, 但后者相对性能更好.</p>
<h3 id="默认路径"><a href="#默认路径" class="headerlink" title="默认路径"></a>默认路径</h3><p>默认 H2 数据库文件地址: <code>~/.zfile/db/</code>, <code>~</code> 表示用户目录, windows 为 <code>C:/Users/用户名/</code>, linux 为 <code>/home/用户名/</code>, root 用户为 <code>/root/</code></p>
<h3 id="头尾文件和加密文件"><a href="#头尾文件和加密文件" class="headerlink" title="头尾文件和加密文件"></a>头尾文件和加密文件</h3><ul>
<li>目录头部显示文件名为 <code>header.md</code></li>
<li>目录需要密码访问, 添加文件 <code>password.txt</code> (无法拦截此文件被下载, 但可以改名文件)</li>
</ul>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li><input checked="" disabled="" type="checkbox"> API 支持 <a href="https://github.com/zhaojun1998/zfile/blob/master/API.md">点击查看文档</a></li>
<li><input checked="" disabled="" type="checkbox"> 更方便的部署方式</li>
<li><input disabled="" type="checkbox"> 文本预览更换更好用的编辑器</li>
<li><input disabled="" type="checkbox"> 后台支持上传、编辑、删除等操作</li>
<li><input disabled="" type="checkbox"> WebDav 支持</li>
<li><input disabled="" type="checkbox"> Docker 支持</li>
</ul>
<h2 id="支持作者"><a href="#支持作者" class="headerlink" title="支持作者"></a>支持作者</h2><p>如果本项目对你有帮助，请作者喝杯咖啡吧。</p>
<img src="http://cdn.jun6.net/alipay.png" width="200" height="312">
<img src="http://cdn.jun6.net/wechat.png" width="222" height="300">
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>网盘</tag>
        <tag>ZFile</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础：网络编程</title>
    <url>/Java%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="网络通讯要素"><a href="#网络通讯要素" class="headerlink" title="网络通讯要素"></a>网络通讯要素</h2><h3 id="IP地址-InetAddress"><a href="#IP地址-InetAddress" class="headerlink" title="IP地址(InetAddress)"></a>IP地址(InetAddress)</h3><ul>
<li>网络中设备的标识</li>
<li>不易记忆，可用主机名代替</li>
<li>本地地址：127.0.0.1</li>
<li>主机名：localhost</li>
</ul>
<h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ul>
<li>用于标识进程的逻辑地址，不同进程的标识</li>
<li>有效端口为 2 个字节(0-65535)，其中 0-1024 一般为系统使用或保留端口</li>
</ul>
<h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><ul>
<li>UDP(User Datagram Protocol)：用户数据报协议<ul>
<li>将数据及源和目的封装成数据包中，不需要建立连接。</li>
<li>每个数据报的大小限制在 64K 。</li>
<li>因无连接，是不可靠协议。</li>
<li>不需要建立连接，速度快。</li>
</ul>
</li>
</ul>
<ul>
<li>TCP(Transmission Control Protocol)：传输控制协议<ul>
<li>建立连接，然后形成传输数据的通道。</li>
<li>在连接中可以进行大数据量传输。</li>
<li>通过三次握手完成连接，是可靠协议。</li>
<li>必须建立连接，效率会稍低。</li>
</ul>
</li>
</ul>
<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul>
<li>Socket就是为网络服务提供的一种机制</li>
<li>通信等两端都有 Socket</li>
<li>网络通信其实就是 Socket 间的通信</li>
<li>数据在两 个Socket 间通过 IO 传输。</li>
</ul>
<span id="more"></span>

<h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>IP 地址是 IP 使用的 32 位或 128 位无符号数字，它是一种低级协议，UDP 和 TCP 协议都是在它的基础上构建的。</li>
<li>InetAddress 类是表示互联网协议(IP)地址。</li>
<li>InetAddress 类没有提供构造方法，所以不能 new 创建对象，要通过静态方法来初始化。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> InetAddress[] getAllByName(String host): 根据系统上配置的名称服务返回其 IP 地址所组成的数组。</span><br><span class="line"><span class="function"><span class="keyword">static</span> InetAddress <span class="title">getByAddress</span><span class="params">(<span class="keyword">byte</span>[] addr)</span>: 在给定原始 IP 地址的情况下，返回 InetAddress 对象。</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> InetAddress <span class="title">getByAddress</span><span class="params">(String host, <span class="keyword">byte</span>[] addr)</span>: 根据提供的主机名和 IP 地址创建 InetAddress。</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> InetAddress <span class="title">getByName</span><span class="params">(String host)</span>: 在给定主机名的情况下确定主机的 IP 地址。</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> InetAddress <span class="title">getLocalHost</span><span class="params">()</span>: 返回本地主机。</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常用方法演示"><a href="#常用方法演示" class="headerlink" title="常用方法演示"></a>常用方法演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">//获取本地主机</span></span><br><span class="line">        InetAddress ip = InetAddress.getLocalHost();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;本地主机ip：&quot;</span> + ip.getHostAddress() + <span class="string">&quot;,名称：&quot;</span> + ip.getHostName());</span><br><span class="line">        </span><br><span class="line">        InetAddress ip2 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;百度主机ip：&quot;</span> + ip2.getHostAddress() + <span class="string">&quot;,名称：&quot;</span> + ip2.getHostName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>UDP 协议中有 DatagramSocket 和 DatagramPacket 对象，两者分别为，UDP 服务与 数据包。</p>
<h3 id="UDP-发送端"><a href="#UDP-发送端" class="headerlink" title="UDP 发送端"></a>UDP 发送端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSendDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//建立一个 UDP 服务</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="string">&quot;Hello!&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//创建一个数据包，这里的参数分别代表字节数据，字节数据的长度，目标IP，目标端口</span></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length,</span><br><span class="line">                InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">10001</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><p>因为这里是数据发送端，所以创建的数据包中要指定目标IP与端口。</p>
</div>

<h3 id="UDP-接收端"><a href="#UDP-接收端" class="headerlink" title="UDP 接收端"></a>UDP 接收端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPReceiveDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//建立一个UDP服务，并监听发送端发送数据的端口。</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10001</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建接收数据的数据包</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将接收到的数据放到指定数据包中。</span></span><br><span class="line">        ds.receive(dp);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析并打印接收到的数据</span></span><br><span class="line">        String message = <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength());</span><br><span class="line">        String ip = dp.getAddress().getHostAddress();</span><br><span class="line">        <span class="keyword">int</span> port = dp.getPort();</span><br><span class="line">        </span><br><span class="line">        System.out.println(ip + <span class="string">&quot;::&quot;</span> + port + <span class="string">&quot;---&quot;</span> + message);</span><br><span class="line">        ds.close();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><p>接收端需要注意的是：</p>
<ul>
<li>服务端要监听发送端发送的数据包中的那个端口，才能收到数据。</li>
<li><code>DatagramSocket</code> 的 <code>receive</code> 方法是<strong>阻塞式方法</strong>，当未接收到数据包时，会一直在等待接收状态。</li>
</ul>
</div>

<h3 id="模拟自动聊天功能"><a href="#模拟自动聊天功能" class="headerlink" title="模拟自动聊天功能"></a>模拟自动聊天功能</h3><p>需求：模拟出一个与机器人自动聊天的功能，给机器人发送字符数据，机器人将字符数据的大写反馈给用户，要求用户使用键盘录入数据，并可循环发送数据，直到用户发送 over。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Send</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端已开启&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//输入流是键盘录入</span></span><br><span class="line">            BufferedReader bur = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            </span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> ((line = bur.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;over&quot;</span>.equals(line)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;本客户端已退出&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(line.getBytes(), </span><br><span class="line">                        line.length(), InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">10005</span>);</span><br><span class="line">                </span><br><span class="line">                ds.send(dp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ds != <span class="keyword">null</span>)</span><br><span class="line">                ds.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receive</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端已开启&quot;</span>);</span><br><span class="line">        DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10005</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">                </span><br><span class="line">                ds.receive(dp);</span><br><span class="line">                </span><br><span class="line">                String message = <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength());</span><br><span class="line">                String ip = dp.getAddress().getHostAddress();</span><br><span class="line">                <span class="keyword">int</span> port = dp.getPort();</span><br><span class="line">                </span><br><span class="line">                System.out.println(ip + <span class="string">&quot;::&quot;</span> + port + <span class="string">&quot;---&quot;</span> + message.toUpperCase());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ds != <span class="keyword">null</span>)</span><br><span class="line">                ds.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUDP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread send = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Send());</span><br><span class="line">        Thread receive = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Receive());</span><br><span class="line">        </span><br><span class="line">        receive.start();</span><br><span class="line">        send.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>在 TCP 协议中的客户端为：Socket，服务端为：ServerSocket，传输时使用的是字节数据。</p>
<h3 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端的 Socket 服务，指定目的和端口</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10030</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//为了发送数据，获取 Socket 流中的输出流</span></span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="string">&quot;Hello,TCP&quot;</span>.getBytes();</span><br><span class="line">        out.write(buf);</span><br><span class="line">        </span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><p>因为 TCP 是面向连接的，所以不能单独运行客户端，需要先启动服务端在启动客户端，然后发送数据过去。</p>
</div>

<h3 id="TCP-服务端"><a href="#TCP-服务端" class="headerlink" title="TCP 服务端"></a>TCP 服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务端的 Socket 服务，并监听一个用来接收数据的端口。</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10030</span>);</span><br><span class="line">        </span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        String message = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            message += <span class="keyword">new</span> String(buf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;message:&quot;</span> + message);</span><br><span class="line">        </span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><ul>
<li><code>appept</code> 方法也是一个阻塞式方法，在连接传入前会一直阻塞。</li>
<li>使用 <code>appept</code> 方法的返回值可以得到发送端的 <code>Socket</code> 对象，用这个对象获取输入流，再用其读取数据。 </li>
</ul>
</div>

<h3 id="模拟自动聊天功能-1"><a href="#模拟自动聊天功能-1" class="headerlink" title="模拟自动聊天功能"></a>模拟自动聊天功能</h3><p>这里的功能与 UDP 的方式不同，因为是面向连接的，所以会更加复杂一些。</p>
<p>Socket 对象只能获取字节流，而不能获取字符流，所以我们需要使用转换流将字节流转化为字符流在进行操作。</p>
<p><strong>客户端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPSocketClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端已开启&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义目标客户端的 IP 和端口</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10080</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用来从键盘读取用户要发送的数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用来将用户数据写入出去</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用来读取服务端的反馈信息</span></span><br><span class="line">        BufferedReader read = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从键盘读取数据，直到用户输入 over</span></span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;over&quot;</span>.equals(line)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将数据通过 Socket 流写出到服务端，由于是字符流，</span></span><br><span class="line">            <span class="comment">//要给出结束标志&quot;回车符&quot;,并刷新缓存，不然数据只会存储在内存中。</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//readLine 是阻塞式方法，等待服务端的反馈信息。</span></span><br><span class="line">            String message = read.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;从服务器接收到的反馈数据：&quot;</span> + message);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//客户端关闭之前，会给服务端发送一个结束标志，这样不会导致链接直接中断</span></span><br><span class="line">        s.close();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>服务端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPSocketServer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端已开启&quot;</span>);</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10080</span>);</span><br><span class="line">        Socket s = ss.accept();      </span><br><span class="line">        </span><br><span class="line">        String ip = s.getInetAddress().getHostAddress();</span><br><span class="line">        System.out.println(ip + <span class="string">&quot;已连接&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用来接收客户端发送的数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        <span class="comment">//用来反馈给客户端</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//这里反馈数据也要加回车标记，并刷新。</span></span><br><span class="line">            bw.write(line.toUpperCase());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note danger"><p>这里要注意的是，使用转换流后，两端互发数据，务必要加回车符，并刷新缓存。</p>
</div>

<h3 id="模拟上传文件"><a href="#模拟上传文件" class="headerlink" title="模拟上传文件"></a>模拟上传文件</h3><p>需求：模拟客户端向服务端上传一个文件，要求使用 TCP 协议，上传完成后，服务端给予反馈信息。<br><strong>客户端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10030</span>);</span><br><span class="line">        </span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\demo.jpg&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        s.shutdownOutput();</span><br><span class="line">        </span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bufIn = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> lenIn = is.read(bufIn);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bufIn, <span class="number">0</span>, lenIn));</span><br><span class="line">        </span><br><span class="line">        fis.close();</span><br><span class="line">        s.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note danger"><p>注意：客户端发送完文件后，要执行 <code>s.shutdownOutput()</code> 方法给予服务端发送结束标志，不然服务端会一直等待接收数据。</p>
</div>

<p><strong>服务端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10030</span>);</span><br><span class="line">        </span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        </span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\server.jpg&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;上传成功!&quot;</span>.getBytes());</span><br><span class="line">        </span><br><span class="line">        fos.close();</span><br><span class="line">        s.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模拟并发上传图片"><a href="#模拟并发上传图片" class="headerlink" title="模拟并发上传图片"></a>模拟并发上传图片</h3><p>在上一个例子中，客户端一次只能给服务器发送一次文件，服务器也之只能接收一次文件后就关闭了，如果给服务器的 <strong>接收文件的代码块</strong> 加上 while 循环，虽然能解决问题，但是出现的新问题就是当一个客户端未上传完数据时，其他客户端只能处于等待状态。</p>
<p>所以要用多线程处理，每有一个新的客户端发送请求，服务端就创建一个新线程来处理该客户端的上传任务。</p>
<p>假定客户端上传的都是 jpg 格式的图片，服务端接收文件后的命名规则是 <code>客户端ip(n).jpg</code>，n 代表客户端上传文件的次数。</p>
<p><strong>客户端代码不变！！！</strong></p>
<p><strong>多线程部分：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UploadThread</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ip = s.getInetAddress().getHostAddress();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(ip + <span class="string">&quot;..connected&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            InputStream is = s.getInputStream();</span><br><span class="line">            </span><br><span class="line">            File file = <span class="keyword">new</span> File(ip + <span class="string">&quot;(&quot;</span> + count++ + <span class="string">&quot;).jpg&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (file.exists())</span><br><span class="line">                file = <span class="keyword">new</span> File(ip + <span class="string">&quot;(&quot;</span> + count++ + <span class="string">&quot;).jpg&quot;</span>); </span><br><span class="line">            </span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            OutputStream os = s.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;上传成功!&quot;</span>.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;成功接收一张图片，存储位置&quot;</span> + file.getAbsolutePath());</span><br><span class="line">            </span><br><span class="line">            fos.close();</span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">new</span> RuntimeException(ip + <span class="string">&quot;:文件上传失败！&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>客户端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器已开启！&quot;</span>);</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10030</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UploadThread(s)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><ul>
<li>这里的命名规则是为了防止覆盖原文件，也可以用时间戳或其他不会出现重复的形式。</li>
</ul>
</div>


<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL 代表一个统一资源定位符，它是指向互联网“资源”的指针。</p>
<p>例如我们经常使用的百度：<code>http://www.baidu.com</code></p>
<p>由于 URL 中包含了协议、主机地址、主机端口、请求路径、请求资源等信息。所以在 Java 中也是有相应的对象来表示的。</p>
<h3 id="常用方法演示："><a href="#常用方法演示：" class="headerlink" title="常用方法演示："></a>常用方法演示：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://www.baidu.com/search/error.html?name=zhangsan&amp;age=13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;getProtocol：&quot;</span> + url.getProtocol());</span><br><span class="line">        System.out.println(<span class="string">&quot;getHost：&quot;</span> + url.getHost());</span><br><span class="line">        System.out.println(<span class="string">&quot;getPort：&quot;</span> + url.getPort());</span><br><span class="line">        System.out.println(<span class="string">&quot;getPath：&quot;</span> + url.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;getFile：&quot;</span> + url.getFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;getQuery：&quot;</span> + url.getQuery());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<pre><code>getProtocol：https
getHost：www.baidu.com
getPort：-1
getPath：/search/error.html
getFile：/search/error.html?name=zhangsan&amp;age=13
getQuery：name=zhangsan&amp;age=13
</code></pre>
<div class="note info"><p>根据运行结果可以看到根据 URL 对象的方法可以很方便的获取到 URL 的各种信息，不用再手动的进行切割信息了。</p>
<p>如 URL 中未指定端口，那么返回的是 -1 </p>
</div>

<h3 id="获取响应信息"><a href="#获取响应信息" class="headerlink" title="获取响应信息"></a>获取响应信息</h3><p>URL 对象的内部还对 Socket 对象进行封装，可以直接对某个 URL 地址发送请求，并获取服务器响应的信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://www.baidu.com/search/error.html&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//连接指定 URL 地址</span></span><br><span class="line">        URLConnection conn = url.openConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取响应头信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getContentEncoding：&quot;</span> + conn.getContentEncoding());</span><br><span class="line">        System.out.println(<span class="string">&quot;getContentLength：&quot;</span> + conn.getContentLength());</span><br><span class="line">        System.out.println(<span class="string">&quot;getContentType：&quot;</span> + conn.getContentType());</span><br><span class="line">        System.out.println(<span class="string">&quot;getDate：&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>).</span><br><span class="line">                format(<span class="keyword">new</span> Date(conn.getDate())));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取响应的数据</span></span><br><span class="line">        InputStream is = conn.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            size += len;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buf, <span class="number">0</span>, len,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<div class="note success"><p>Java 对网络编程这一块，封装的还是很好用的，需要使用更多的方法，可以去 API 文档上查看。</p>
</div>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>阿里云 Centos7.x 安装 Oracle 11g 详细过程</title>
    <url>/centos7_install_oracle/</url>
    <content><![CDATA[<h2 id="建立-swap-分区"><a href="#建立-swap-分区" class="headerlink" title="建立 swap 分区"></a>建立 swap 分区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/home/swap bs=1024 count=2097152  <span class="comment"># bs 为单位，count 为设置的大小 2048 * 1024 = 2G</span></span><br><span class="line">mkswap /home/swap                                    <span class="comment"># 格式化交换文件</span></span><br><span class="line">swapon /home/swap                                    <span class="comment"># 立即启用交换分区文件, 要停止使用新创建的swap文件,只要执行 swapoff/home/swap命令即可</span></span><br></pre></td></tr></table></figure>

<p>建立完后, 执行 <code>free -m</code> 查看结果:<br><img src="https://cdn.jun6.net/201905191326_553.png"></p>
<p>然后在 <code>/etc/fstab</code> 添加一行, 用来防止重启机器后 swap 分区会失效的问题:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;swap             swap          swap    defaults        0 0</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="创建用户和用户组"><a href="#创建用户和用户组" class="headerlink" title="创建用户和用户组"></a>创建用户和用户组</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd oinstall                           <span class="comment"># 创建用户组 oinstall</span></span><br><span class="line">groupadd dba                                <span class="comment"># 创建用户组 dba</span></span><br><span class="line">useradd -g oinstall -G dba -m oracle        <span class="comment"># 创建 oracle 用户，并加入到 oinstall 和 dba 用户组</span></span><br></pre></td></tr></table></figure>

<p>创建完后, 修改 <code>oracle</code> 用户的密码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd oracle</span><br></pre></td></tr></table></figure>

<h2 id="创建安装目录和权限"><a href="#创建安装目录和权限" class="headerlink" title="创建安装目录和权限"></a>创建安装目录和权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;oracle</span><br><span class="line">mkdir -p &#x2F;data&#x2F;oraInventory</span><br><span class="line">mkdir -p &#x2F;data&#x2F;database</span><br><span class="line">chown -R oracle:oinstall &#x2F;data&#x2F;oracle</span><br><span class="line">chown -R oracle:oinstall &#x2F;data&#x2F;oraInventory</span><br><span class="line">chown -R oracle:oinstall &#x2F;data&#x2F;database</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>/data/oracle</code>:           oracle 数据库安装目录<br><code>/data/oraInventory</code>      oracle 数据库配置文件目录<br><code>/data/database</code>          oracle 数据库软件包解压目录</p>
</blockquote>
<h2 id="修改OS系统标识"><a href="#修改OS系统标识" class="headerlink" title="修改OS系统标识"></a>修改OS系统标识</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/redhat-release</span><br></pre></td></tr></table></figure>

<p>修改成 <code>redhat-7</code>.</p>
<h2 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h2><p>编辑 <code>/etc/sysctl.conf</code> 增加以下内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">kernel.shmall = 2097152</span><br><span class="line">kernel.shmmax = 2147483648</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max= 4194304</span><br><span class="line">net.core.wmem_default= 262144</span><br><span class="line">net.core.wmem_max= 1048576</span><br></pre></td></tr></table></figure>

<p>执行命令使配置生效 <code>sysctl -p</code></p>
<p>编辑 <code>/etc/security/limits.conf</code> 增加以下内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br></pre></td></tr></table></figure>

<h2 id="配置-oracle-用户的环境变量"><a href="#配置-oracle-用户的环境变量" class="headerlink" title="配置 oracle 用户的环境变量:"></a>配置 oracle 用户的环境变量:</h2><p>编辑 <code>/home/oracle/.bash_profile</code> 文件, 增加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_BASE=/data/oracle</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="variable">$ORACLE_BASE</span>/product/11.2.0/db_1</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=orcl</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ORACLE_HOME</span>/bin:/usr/sbin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$ORACLE_HOME</span>/lib:/usr/lib</span><br><span class="line"><span class="built_in">export</span> TNS_ADMIN=<span class="variable">$ORACLE_HOME</span>/network/admin</span><br></pre></td></tr></table></figure>

<p>**注意: 这里的 ORACLE_SID 要是你的实例名, 这里我配置为了 <code>orcl</code>, 如需要的实例名不一样, 请自行更改 **</p>
<h2 id="安装需要的-rpm-包"><a href="#安装需要的-rpm-包" class="headerlink" title="安装需要的 rpm 包"></a>安装需要的 rpm 包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ make binutils compat-libstdc++-33 glibc glibc-devel libaio libaio-devel libgcc libstdc++ libstdc++-devel libXtst sysstat ksh make libXi compat-libcap1</span><br></pre></td></tr></table></figure>


<h2 id="下载-oracle-11g-镜像"><a href="#下载-oracle-11g-镜像" class="headerlink" title="下载 oracle 11g 镜像"></a>下载 oracle 11g 镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -P /root/ http://mirror.cnop.net/oracle/linux/linux.x64_11gR2_database_1of2.zip</span><br><span class="line">wget -P /root/ http://mirror.cnop.net/oracle/linux/linux.x64_11gR2_database_2of2.zip</span><br></pre></td></tr></table></figure>

<h2 id="解压镜像到对应的文件夹"><a href="#解压镜像到对应的文件夹" class="headerlink" title="解压镜像到对应的文件夹"></a>解压镜像到对应的文件夹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y unzip</span><br><span class="line">unzip /root/linux.x64_11gR2_database_1of2.zip -d /data/database/</span><br><span class="line">unzip /root/linux.x64_11gR2_database_2of2.zip -d /data/database/</span><br></pre></td></tr></table></figure>

<h2 id="修改静默安装配置信息"><a href="#修改静默安装配置信息" class="headerlink" title="修改静默安装配置信息"></a>修改静默安装配置信息</h2><p>编辑 <code>/data/database/database/db_install.rsp</code> 文件, :</p>
<p>你可以直接复制以下内容内容进行覆盖, 不过以下参数中有几个需要自己配置下:</p>
<ul>
<li><p><code>ORACLE_HOSTNAME</code>: 应该是你的主机名称, 通过命令 <code>hostname</code> 获取.<br><img src="https://cdn.jun6.net/201905191708_896.png"></p>
</li>
<li><p><code>oracle.install.db.config.starterdb.globalDBName</code>: 指定 GlobalName</p>
</li>
<li><p><code>oracle.install.db.config.starterdb.SID</code>: 指定 SID</p>
</li>
<li><p><code>oracle.install.db.config.starterdb.characterSet</code>: 字符集, 通常中文选择 ZHS16GBK 简体中文库. 根据自己的需要来配置.</p>
</li>
<li><p><code>oracle.install.db.config.starterdb.password.ALL</code>: 所有自带用户的密码 </p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################################</span></span><br><span class="line"><span class="comment">## Copyright(c) Oracle Corporation 1998,2008. All rights reserved.##</span></span><br><span class="line"><span class="comment">##                                                                ##</span></span><br><span class="line"><span class="comment">## Specify values for the variables listed below to customize     ##</span></span><br><span class="line"><span class="comment">## your installation.                                             ##</span></span><br><span class="line"><span class="comment">##                                                                ##</span></span><br><span class="line"><span class="comment">## Each variable is associated with a comment. The comment        ##</span></span><br><span class="line"><span class="comment">## can help to populate the variables with the appropriate        ##</span></span><br><span class="line"><span class="comment">## values.							  ##</span></span><br><span class="line"><span class="comment">##                                                                ##</span></span><br><span class="line"><span class="comment">## IMPORTANT <span class="doctag">NOTE:</span> This file contains plain text passwords and    ##</span></span><br><span class="line"><span class="comment">## should be secured to have read permission only by oracle user  ##</span></span><br><span class="line"><span class="comment">## or db administrator who owns this installation.                ##</span></span><br><span class="line"><span class="comment">##                                                                ##</span></span><br><span class="line"><span class="comment">####################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Do not change the following system generated value. </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.responseFileVersion</span>=<span class="string">/oracle/install/rspfmt_dbinstall_response_schema_v11_2_0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the installation option.</span></span><br><span class="line"><span class="comment"># It can be one of the following:</span></span><br><span class="line"><span class="comment"># 1. INSTALL_DB_SWONLY</span></span><br><span class="line"><span class="comment"># 2. INSTALL_DB_AND_CONFIG</span></span><br><span class="line"><span class="comment"># 3. UPGRADE_DB</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.option</span>=<span class="string">INSTALL_DB_SWONLY</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the hostname of the system as set during the install. It can be used</span></span><br><span class="line"><span class="comment"># to force the installation to use an alternative hostname rather than using the</span></span><br><span class="line"><span class="comment"># first hostname found on the system. (e.g., for systems with multiple hostnames </span></span><br><span class="line"><span class="comment"># and network interfaces)</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">ORACLE_HOSTNAME</span>=<span class="string">iZoj9kewj15nyqZ</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the Unix group to be set for the inventory directory.  </span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">UNIX_GROUP_NAME</span>=<span class="string">oinstall</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the location which holds the inventory files.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">INVENTORY_LOCATION</span>=<span class="string">/data/oraInventory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the languages in which the components will be installed.             </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># en   : English                  ja   : Japanese                  </span></span><br><span class="line"><span class="comment"># fr   : French                   ko   : Korean                    </span></span><br><span class="line"><span class="comment"># ar   : Arabic                   es   : Latin American Spanish    </span></span><br><span class="line"><span class="comment"># bn   : Bengali                  lv   : Latvian                   </span></span><br><span class="line"><span class="comment"># pt_BR: Brazilian Portuguese     lt   : Lithuanian                </span></span><br><span class="line"><span class="comment"># bg   : Bulgarian                ms   : Malay                     </span></span><br><span class="line"><span class="comment"># fr_CA: Canadian French          es_MX: Mexican Spanish           </span></span><br><span class="line"><span class="comment"># ca   : Catalan                  no   : Norwegian                 </span></span><br><span class="line"><span class="comment"># hr   : Croatian                 pl   : Polish                    </span></span><br><span class="line"><span class="comment"># cs   : Czech                    pt   : Portuguese                </span></span><br><span class="line"><span class="comment"># da   : Danish                   ro   : Romanian                  </span></span><br><span class="line"><span class="comment"># nl   : Dutch                    ru   : Russian                   </span></span><br><span class="line"><span class="comment"># ar_EG: Egyptian                 zh_CN: Simplified Chinese        </span></span><br><span class="line"><span class="comment"># en_GB: English (Great Britain)  sk   : Slovak                    </span></span><br><span class="line"><span class="comment"># et   : Estonian                 sl   : Slovenian                 </span></span><br><span class="line"><span class="comment"># fi   : Finnish                  es_ES: Spanish                   </span></span><br><span class="line"><span class="comment"># de   : German                   sv   : Swedish                   </span></span><br><span class="line"><span class="comment"># el   : Greek                    th   : Thai                      </span></span><br><span class="line"><span class="comment"># iw   : Hebrew                   zh_TW: Traditional Chinese       </span></span><br><span class="line"><span class="comment"># hu   : Hungarian                tr   : Turkish                   </span></span><br><span class="line"><span class="comment"># is   : Icelandic                uk   : Ukrainian                 </span></span><br><span class="line"><span class="comment"># in   : Indonesian               vi   : Vietnamese                </span></span><br><span class="line"><span class="comment"># it   : Italian                                                   </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example : SELECTED_LANGUAGES=en,fr,ja</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">SELECTED_LANGUAGES</span>=<span class="string">zh_CN,zh_TW,en</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the complete path of the Oracle Home.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">ORACLE_HOME</span>=<span class="string">/data/oracle/product/11.2.0/db_1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the complete path of the Oracle Base. </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">ORACLE_BASE</span>=<span class="string">/data/oracle/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the installation edition of the component.                        </span></span><br><span class="line"><span class="comment">#                                                             </span></span><br><span class="line"><span class="comment"># The value should contain only one of these choices.        </span></span><br><span class="line"><span class="comment"># EE     : Enterprise Edition                                </span></span><br><span class="line"><span class="comment"># SE     : Standard Edition                                  </span></span><br><span class="line"><span class="comment"># SEONE  : Standard Edition One</span></span><br><span class="line"><span class="comment"># PE     : Personal Edition (WINDOWS ONLY)</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.InstallEdition</span>=<span class="string">EE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># This variable is used to enable or disable custom install.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># true  : Components mentioned as part of &#x27;customComponents&#x27; property</span></span><br><span class="line"><span class="comment">#         are considered for install.</span></span><br><span class="line"><span class="comment"># false : Value for &#x27;customComponents&#x27; is not considered.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.isCustomInstall</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># This variable is considered only if &#x27;IsCustomInstall&#x27; is set to true. </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Description: List of Enterprise Edition Options you would like to install.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#              The following choices are available. You may specify any</span></span><br><span class="line"><span class="comment">#              combination of these choices.  The components you choose should</span></span><br><span class="line"><span class="comment">#              be specified in the form &quot;internal-component-name:version&quot;</span></span><br><span class="line"><span class="comment">#              Below is a list of components you may specify to install.</span></span><br><span class="line"><span class="comment">#        </span></span><br><span class="line"><span class="comment">#              oracle.rdbms.partitioning:11.2.0.1.0 - Oracle Partitioning</span></span><br><span class="line"><span class="comment">#              oracle.rdbms.dm:11.2.0.1.0 - Oracle Data Mining</span></span><br><span class="line"><span class="comment">#              oracle.rdbms.dv:11.2.0.1.0 - Oracle Database Vault </span></span><br><span class="line"><span class="comment">#              oracle.rdbms.lbac:11.2.0.1.0 - Oracle Label Security</span></span><br><span class="line"><span class="comment">#              oracle.rdbms.rat:11.2.0.1.0 - Oracle Real Application Testing </span></span><br><span class="line"><span class="comment">#              oracle.oraolap:11.2.0.1.0 - Oracle OLAP</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.customComponents</span>=<span class="string">oracle.server:11.2.0.1.0,oracle.sysman.ccr:10.2.7.0.0,oracle.xdk:11.2.0.1.0,oracle.rdbms.oci:11.2.0.1.0,oracle.network:11.2.0.1.0,oracle.network.listener:11.2.0.1.0,oracle.rdbms:11.2.0.1.0,oracle.options:11.2.0.1.0,oracle.rdbms.partitioning:11.2.0.1.0,oracle.oraolap:11.2.0.1.0,oracle.rdbms.dm:11.2.0.1.0,oracle.rdbms.dv:11.2.0.1.0,orcle.rdbms.lbac:11.2.0.1.0,oracle.rdbms.rat:11.2.0.1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                                                             #</span></span><br><span class="line"><span class="comment"># PRIVILEGED OPERATING SYSTEM GROUPS                                  	      #</span></span><br><span class="line"><span class="comment"># ------------------------------------------                                  #</span></span><br><span class="line"><span class="comment"># Provide values for the OS groups to which OSDBA and OSOPER privileges       #</span></span><br><span class="line"><span class="comment"># needs to be granted. If the install is being performed as a member of the   #		</span></span><br><span class="line"><span class="comment"># group &quot;dba&quot;, then that will be used unless specified otherwise below.	      #</span></span><br><span class="line"><span class="comment">#                                                                             #</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># The DBA_GROUP is the OS group which is to be granted OSDBA privileges.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.DBA_GROUP</span>=<span class="string">dba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># The OPER_GROUP is the OS group which is to be granted OSOPER privileges.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.OPER_GROUP</span>=<span class="string">oinstall</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the cluster node names selected during the installation.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.CLUSTER_NODES</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the type of database to create.</span></span><br><span class="line"><span class="comment"># It can be one of the following:</span></span><br><span class="line"><span class="comment"># - GENERAL_PURPOSE/TRANSACTION_PROCESSING          </span></span><br><span class="line"><span class="comment"># - DATA_WAREHOUSE                                </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.type</span>=<span class="string">GENERAL_PURPOSE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the Starter Database Global Database Name. </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.globalDBName</span>=<span class="string">orcl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the Starter Database SID.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.SID</span>=<span class="string">orcl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the Starter Database character set.</span></span><br><span class="line"><span class="comment">#                                              </span></span><br><span class="line"><span class="comment"># It can be one of the following:</span></span><br><span class="line"><span class="comment"># AL32UTF8, WE8ISO8859P15, WE8MSWIN1252, EE8ISO8859P2,</span></span><br><span class="line"><span class="comment"># EE8MSWIN1250, NE8ISO8859P10, NEE8ISO8859P4, BLT8MSWIN1257,</span></span><br><span class="line"><span class="comment"># BLT8ISO8859P13, CL8ISO8859P5, CL8MSWIN1251, AR8ISO8859P6,</span></span><br><span class="line"><span class="comment"># AR8MSWIN1256, EL8ISO8859P7, EL8MSWIN1253, IW8ISO8859P8,</span></span><br><span class="line"><span class="comment"># IW8MSWIN1255, JA16EUC, JA16EUCTILDE, JA16SJIS, JA16SJISTILDE,</span></span><br><span class="line"><span class="comment"># KO16MSWIN949, ZHS16GBK, TH8TISASCII, ZHT32EUC, ZHT16MSWIN950,</span></span><br><span class="line"><span class="comment"># ZHT16HKSCS, WE8ISO8859P9, TR8MSWIN1254, VN8MSWIN1258</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.characterSet</span>=<span class="string">ZHS16GBK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># This variable should be set to true if Automatic Memory Management </span></span><br><span class="line"><span class="comment"># in Database is desired.</span></span><br><span class="line"><span class="comment"># If Automatic Memory Management is not desired, and memory allocation</span></span><br><span class="line"><span class="comment"># is to be done manually, then set it to false.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.memoryOption</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the total memory allocation for the database. Value(in MB) should be</span></span><br><span class="line"><span class="comment"># at least 256 MB, and should not exceed the total physical memory available </span></span><br><span class="line"><span class="comment"># on the system.</span></span><br><span class="line"><span class="comment"># Example: oracle.install.db.config.starterdb.memoryLimit=512</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.memoryLimit</span>=<span class="string">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># This variable controls whether to load Example Schemas onto the starter</span></span><br><span class="line"><span class="comment"># database or not.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.installExampleSchemas</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># This variable includes enabling audit settings, configuring password profiles</span></span><br><span class="line"><span class="comment"># and revoking some grants to public. These settings are provided by default. </span></span><br><span class="line"><span class="comment"># These settings may also be disabled.    </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.enableSecuritySettings</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                                                             #</span></span><br><span class="line"><span class="comment"># Passwords can be supplied for the following four schemas in the	      #</span></span><br><span class="line"><span class="comment"># starter database:      						      #</span></span><br><span class="line"><span class="comment">#   SYS                                                                       #</span></span><br><span class="line"><span class="comment">#   SYSTEM                                                                    #</span></span><br><span class="line"><span class="comment">#   SYSMAN (used by Enterprise Manager)                                       #</span></span><br><span class="line"><span class="comment">#   DBSNMP (used by Enterprise Manager)                                       #</span></span><br><span class="line"><span class="comment">#                                                                             #</span></span><br><span class="line"><span class="comment"># Same password can be used for all accounts (not recommended) 		      #</span></span><br><span class="line"><span class="comment"># or different passwords for each account can be provided (recommended)       #</span></span><br><span class="line"><span class="comment">#                                                                             #</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># This variable holds the password that is to be used for all schemas in the</span></span><br><span class="line"><span class="comment"># starter database.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.password.ALL</span>=<span class="string">*******</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the SYS password for the starter database.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.password.SYS</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the SYSTEM password for the starter database.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.password.SYSTEM</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the SYSMAN password for the starter database.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.password.SYSMAN</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the DBSNMP password for the starter database.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.password.DBSNMP</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the management option to be selected for the starter database. </span></span><br><span class="line"><span class="comment"># It can be one of the following:</span></span><br><span class="line"><span class="comment"># 1. GRID_CONTROL</span></span><br><span class="line"><span class="comment"># 2. DB_CONTROL</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.control</span>=<span class="string">DB_CONTROL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the Management Service to use if Grid Control is selected to manage </span></span><br><span class="line"><span class="comment"># the database.      </span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.gridcontrol.gridControlServiceURL</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># This variable indicates whether to receive email notification for critical </span></span><br><span class="line"><span class="comment"># alerts when using DB control.   </span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.dbcontrol.enableEmailNotification</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the email address to which the notifications are to be sent.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.dbcontrol.emailAddress</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the SMTP server used for email notifications.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.dbcontrol.SMTPServer</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                                                             #</span></span><br><span class="line"><span class="comment"># SPECIFY BACKUP AND RECOVERY OPTIONS                                 	      #</span></span><br><span class="line"><span class="comment"># ------------------------------------		                              #</span></span><br><span class="line"><span class="comment"># Out-of-box backup and recovery options for the database can be mentioned    #</span></span><br><span class="line"><span class="comment"># using the entries below.						      #	</span></span><br><span class="line"><span class="comment">#                                                                             #</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># This variable is to be set to false if automated backup is not required. Else </span></span><br><span class="line"><span class="comment"># this can be set to true.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.automatedBackup.enable</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Regardless of the type of storage that is chosen for backup and recovery, if </span></span><br><span class="line"><span class="comment"># automated backups are enabled, a job will be scheduled to run daily at</span></span><br><span class="line"><span class="comment"># 2:00 AM to backup the database. This job will run as the operating system </span></span><br><span class="line"><span class="comment"># user that is specified in this variable.</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.automatedBackup.osuid</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Regardless of the type of storage that is chosen for backup and recovery, if </span></span><br><span class="line"><span class="comment"># automated backups are enabled, a job will be scheduled to run daily at</span></span><br><span class="line"><span class="comment"># 2:00 AM to backup the database. This job will run as the operating system user</span></span><br><span class="line"><span class="comment"># specified by the above entry. The following entry stores the password for the</span></span><br><span class="line"><span class="comment"># above operating system user.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.automatedBackup.ospwd</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the type of storage to use for the database.</span></span><br><span class="line"><span class="comment"># It can be one of the following:</span></span><br><span class="line"><span class="comment"># - FILE_SYSTEM_STORAGE</span></span><br><span class="line"><span class="comment"># - ASM_STORAGE</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.storageType</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the database file location which is a directory for datafiles, control</span></span><br><span class="line"><span class="comment"># files, redo logs.         </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Applicable only when oracle.install.db.config.starterdb.storage=FILE_SYSTEM </span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.fileSystemStorage.dataLocation</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the backup and recovery location.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Applicable only when oracle.install.db.config.starterdb.storage=FILE_SYSTEM </span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.starterdb.fileSystemStorage.recoveryLocation</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the existing ASM disk groups to be used for storage.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Applicable only when oracle.install.db.config.starterdb.storage=ASM</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.asm.diskGroup</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the password for ASMSNMP user of the ASM instance.                  </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Applicable only when oracle.install.db.config.starterdb.storage=ASM_SYSTEM </span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">oracle.install.db.config.asm.ASMSNMPPassword</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the My Oracle Support Account Username.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example   : MYORACLESUPPORT_USERNAME=metalink</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">MYORACLESUPPORT_USERNAME</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the My Oracle Support Account Username password.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example    : MYORACLESUPPORT_PASSWORD=password</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">MYORACLESUPPORT_PASSWORD</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify whether to enable the user to set the password for</span></span><br><span class="line"><span class="comment"># My Oracle Support credentials. The value can be either true or false.</span></span><br><span class="line"><span class="comment"># If left blank it will be assumed to be false.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example    : SECURITY_UPDATES_VIA_MYORACLESUPPORT=true</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">SECURITY_UPDATES_VIA_MYORACLESUPPORT</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify whether user wants to give any proxy details for connection. </span></span><br><span class="line"><span class="comment"># The value can be either true or false. If left blank it will be assumed</span></span><br><span class="line"><span class="comment"># to be false.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example    : DECLINE_SECURITY_UPDATES=false</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">DECLINE_SECURITY_UPDATES</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the Proxy server name. Length should be greater than zero.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example    : PROXY_HOST=proxy.domain.com </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">PROXY_HOST</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the proxy port number. Should be Numeric and atleast 2 chars.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example    : PROXY_PORT=25 </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">PROXY_PORT</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the proxy user name. Leave PROXY_USER and PROXY_PWD </span></span><br><span class="line"><span class="comment"># blank if your proxy server requires no authentication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example    : PROXY_USER=username </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">PROXY_USER</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Specify the proxy password. Leave PROXY_USER and PROXY_PWD  </span></span><br><span class="line"><span class="comment"># blank if your proxy server requires no authentication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example    : PROXY_PWD=password </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">PROXY_PWD</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>

<h2 id="进行安装"><a href="#进行安装" class="headerlink" title="进行安装"></a>进行安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line"><span class="built_in">cd</span> /data/database/database</span><br><span class="line">./runInstaller -silent -ignorePrereq -ignoreSysPrereqs -responseFile /data/database/database/response/db_install.rsp</span><br></pre></td></tr></table></figure>

<h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - root</span><br><span class="line">/data/oraInventory/orainstRoot.sh</span><br><span class="line">/data/oracle/product/11.2.0/db_1/root.sh</span><br></pre></td></tr></table></figure>

<h2 id="配置监听"><a href="#配置监听" class="headerlink" title="配置监听"></a>配置监听</h2><p>切换到 <code>oracle</code> 用户给:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsnrctl start  <span class="comment"># 启动</span></span><br><span class="line">lsnrctl stop   <span class="comment"># 关闭</span></span><br><span class="line">lsnrctl status <span class="comment"># 查看监听状态</span></span><br></pre></td></tr></table></figure>

<p>** 注意, 这里中间的 <code>-</code> 不能省略,**</p>
<p>创建 <code>/data/oracle/product/11.2.0/db_1/network/admin/listener.ora</code> 文件.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># listener.ora Network Configuration File: /data/oracle/product/11.2.0/db_1/network/admin/listener.ora</span></span><br><span class="line"><span class="comment"># Generated by Oracle configuration tools.</span></span><br><span class="line"></span><br><span class="line">SID_LIST_LISTENER =</span><br><span class="line">  (SID_LIST =</span><br><span class="line">    (SID_DESC =</span><br><span class="line">      (GLOBAL_DBNAME = orcl)</span><br><span class="line">      (SID_NAME = orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ORCL =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 39.106.11.126)(PORT = 1521))</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ADR_BASE_ORCL = /data/oracle</span><br></pre></td></tr></table></figure>

<p>创建 <code>/data/oracle/product/11.2.0/db_1/network/admin/tnsnames.ora</code> 文件.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tnsnames.ora Network Configuration File: /data/oracle/product/11.2.0/db_1/network/admin/tnsnames.ora</span></span><br><span class="line"><span class="comment"># Generated by Oracle configuration tools.</span></span><br><span class="line"></span><br><span class="line">ORCL =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 39.106.11.126)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVICE_NAME = orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;1521&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>阿里云</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>手撸 Java Web RBAC 权限管理</title>
    <url>/java-permission-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>权限管理是在项目中经常要使用到的模块，有着极其重要的功能。 在 Java 帝国中有两个比较出名的权限框架，分别为 <a href="http://shiro.apache.org/">Shiro</a> 和 <a href="https://spring.io/projects/spring-security">Spring Security</a>，两者各有优缺，但这不是本篇要讨论的重点，这次我们不用任何权限框架来实现 RBAC 权限管理。</p>
<blockquote>
<p>本文所有代码下载地址：<a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Basic">https://github.com/zhaojun1998/Premission-Study</a></p>
</blockquote>
<span id="more"></span>

<h2 id="RBAC-简介"><a href="#RBAC-简介" class="headerlink" title="RBAC 简介"></a>RBAC 简介</h2><p>RBAC (Role-Based Access Control) 基于角色的权限访问控制。</p>
<p>即<strong>用户</strong>拥有<strong>角色</strong>,<strong>角色</strong>拥有<strong>权限</strong>。具体关于 RBAC 的好处我就不再赘言，如感兴趣请自行查询。</p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>共有五张表，分别为用户表、角色表、权限表、用户-角色关系表、角色-权限关系表。其中用户表于角色表是多对多的关系，角色表于权限表也是多对多关系。具体每个字段的含义请查看相应的注释。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permission`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限名称&#x27;</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限描述表&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;权限表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限名称&#x27;</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限描述&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;角色表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role_premission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role_premission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role_premission`  (</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `permission_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  INDEX `role_premission_uid_fk`(`role_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `role_premission_pid_fk`(`permission_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `role_premission_pid_fk` <span class="keyword">FOREIGN</span> KEY (`permission_id`) <span class="keyword">REFERENCES</span> `permission` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> UPDATE RESTRICT,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `role_premission_uid_fk` <span class="keyword">FOREIGN</span> KEY (`role_id`) <span class="keyword">REFERENCES</span> `role` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> UPDATE RESTRICT</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;用户表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role`  (</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  INDEX `user_role_uid_fk`(`user_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `user_role_rid_fk`(`role_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `user_role_rid_fk` <span class="keyword">FOREIGN</span> KEY (`role_id`) <span class="keyword">REFERENCES</span> `role` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> UPDATE RESTRICT,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `user_role_uid_fk` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> UPDATE RESTRICT</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;用户角色表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>本次基于的环境是 Spring + SpringMVC + MyBatis，不过即使你不会这几个框架也无所谓，因为权限管理没有涉及到太多这些框架的特性，用普通的 Servlet + JDBC 同样也可以实现。</p>
<p>因篇幅原因，框架的配置文件我这里就不再贴出，但我会将源码发到 Github，你可以去下载本实例完整代码。</p>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>首先需要创建三个与数据库对应的实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DAO-数据操作层"><a href="#DAO-数据操作层" class="headerlink" title="DAO 数据操作层"></a>DAO 数据操作层</h2><h3 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectALL</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户拥有的角色列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 角色列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">selectRolesByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户所有角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除成功的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteRoles</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为用户赋予角色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId 授予的角色 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插入成功的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUserRole</span><span class="params">(<span class="meta">@Param(&quot;user_id&quot;)</span> Integer userId, <span class="meta">@Param(&quot;role_id&quot;)</span> Integer roleId)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名密码查询账号是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username  用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password  密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  查询到的账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">selectUserByUsernameAndPassword</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span>String username,<span class="meta">@Param(&quot;password&quot;)</span>String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RoleMapper"><a href="#RoleMapper" class="headerlink" title="RoleMapper"></a>RoleMapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Role record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Role <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Role record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询角色拥有的权限列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 角色 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 权限列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Permission&gt; <span class="title">selectPermissionsByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除角色所有的权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 角色 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除成功的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deletePermissions</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为角色添加一个权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId 角色 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permissionId 权限 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插入成功的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertRolePermission</span><span class="params">(<span class="meta">@Param(&quot;role_id&quot;)</span>Integer roleId, <span class="meta">@Param(&quot;permission_id&quot;)</span> Integer permissionId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PermissionMapper"><a href="#PermissionMapper" class="headerlink" title="PermissionMapper"></a>PermissionMapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PermissionMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Permission record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Permission <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Permission record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Permission&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只需要一些简单的 SQL 操作，如需要对应的 mapper.xml 可去 Github 查看。</p>
</blockquote>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="用户添加"><a href="#用户添加" class="headerlink" title="用户添加"></a>用户添加</h3><p>HTML 页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密 码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUserSubmit</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.add(user) &gt; <span class="number">0</span> ? <span class="string">&quot;success&quot;</span> : <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>service 和 dao 略.</p>
</blockquote>
<h3 id="用户登陆"><a href="#用户登陆" class="headerlink" title="用户登陆"></a>用户登陆</h3><p>HTML 页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名 :<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密  码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, HttpSession httpSession)</span> </span>&#123;</span><br><span class="line">    User user = userService.selectUserByUsernameAndPassword(username, password);</span><br><span class="line">    <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">        httpSession.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;登陆成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;登陆失败&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>service 和 dao 略.</p>
</blockquote>
<h3 id="查看用户列表"><a href="#查看用户列表" class="headerlink" title="查看用户列表"></a>查看用户列表</h3><p>HTML 页面:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;密码&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;users&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.username&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.password&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;a href=&quot;grantRoleView?id=$&#123;user.id&#125;&quot;&gt;赋予角色&lt;/a&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">listUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;user.jsp&quot;</span>).addObject(<span class="string">&quot;users&quot;</span>, userService.getAllUser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jun6.net/201807251719_361.png"></p>
<blockquote>
<p>service 和 dao 略.</p>
</blockquote>
<h3 id="为用户赋予角色"><a href="#为用户赋予角色" class="headerlink" title="为用户赋予角色"></a>为用户赋予角色</h3><p>为用户赋予角色需要先添加角色，请先看下面的添加角色后再来操作。</p>
<p>HTML 页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;grantRole&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>当前用户<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                $&#123;user.username&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>已拥有角色<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;grantRole&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>$&#123;role.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>所有角色<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;roles&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;role.id&#125;&quot;</span>&gt;</span> $&#123;role.name&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jun6.net/201807251651_861.png"></p>
<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">grantRole</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span>[] roleId)</span> </span>&#123;</span><br><span class="line">    userService.updateRoles(id, roleId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateRoles</span><span class="params">(Integer id, <span class="keyword">int</span>[] roleIds)</span> </span>&#123;</span><br><span class="line">    userMapper.deleteRoles(id);</span><br><span class="line">    <span class="keyword">if</span> (roleIds != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> roleId : roleIds) &#123;</span><br><span class="line">            userMapper.insertUserRole(id, roleId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实这里的修改授权角色只是将原来它拥有的所有角色删除，再分配给它提交的所有角色。</p>
</blockquote>
<h2 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h2><h3 id="添加角色"><a href="#添加角色" class="headerlink" title="添加角色"></a>添加角色</h3><p>HTML 页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;addRole&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    角色名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    角色描述:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addRole</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> roleService.add(role) &gt; <span class="number">0</span> ? <span class="string">&quot;success&quot;</span> : <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>service 和 dao 略.</p>
</blockquote>
<h3 id="角色列表"><a href="#角色列表" class="headerlink" title="角色列表"></a>角色列表</h3><p>HTML 页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>角色名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>角色描述<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;roles&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;role.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;role.description&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;grantPermissionView?id=$&#123;role.id&#125;&quot;</span>&gt;</span>赋予权限<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">listRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;role.jsp&quot;</span>).addObject(<span class="string">&quot;roles&quot;</span>, roleService.getAll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jun6.net/201807251725_998.png"></p>
<blockquote>
<p>service 和 dao 略.</p>
</blockquote>
<h3 id="为角色赋予权限"><a href="#为角色赋予权限" class="headerlink" title="为角色赋予权限"></a>为角色赋予权限</h3><p>HTML 页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;grantPermission&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>当前角色<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                $&#123;role.name&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;role.id&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>已拥有权限<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;grantPermission&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;permission&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>$&#123;permission.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>所有权限<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;permissions&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;permission&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;premissionId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;permission.id&#125;&quot;</span>&gt;</span> $&#123;permission.name&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">grantPermission</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span>[] premissionId)</span> </span>&#123;</span><br><span class="line">    roleService.updatePermission(id, premissionId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePermission</span><span class="params">(Integer roleId, <span class="keyword">int</span>[] permissionsIds)</span> </span>&#123;</span><br><span class="line">    roleMapper.deletePermissions(roleId);</span><br><span class="line">    <span class="keyword">if</span> (permissionsIds != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> permissionId : permissionsIds) &#123;</span><br><span class="line">            roleMapper.insertRolePermission(roleId, permissionId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jun6.net/201807251726_81.png"></p>
<blockquote>
<p>这里的为角色赋予权限同样也是先删除角色所拥有的权限，再添加表单提交的所有权限。</p>
</blockquote>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h3><p>HTML 页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;addPermission&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    权限名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    权限描述:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Permission permission)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> permissionService.add(permission) &gt; <span class="number">0</span> ? <span class="string">&quot;success&quot;</span> : <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>service 和 dao 略.</p>
</blockquote>
<h3 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表"></a>权限列表</h3><p>HTML 页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;addPermission&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    权限名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    权限描述:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Permission permission)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> permissionService.add(permission) &gt; <span class="number">0</span> ? <span class="string">&quot;success&quot;</span> : <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jun6.net/201807251726_658.png"></p>
<blockquote>
<p>service 和 dao 略.</p>
</blockquote>
<h2 id="权限拦截"><a href="#权限拦截" class="headerlink" title="权限拦截"></a>权限拦截</h2><p>既然已经分配好用户，角色以及权限之间的关系了，那么我们就可以设置一些需要权限才能访问的资源了。</p>
<p>我设置了 5 个 url, 并标注了需要何权限或何角色才可访问:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">/api/add        # add 权限</span><br><span class="line">/api/delete     # delete 权限</span><br><span class="line">/api/get        # get 权限</span><br><span class="line">/api/employee   # employee 角色</span><br><span class="line">/api/boss       # boos 角色</span><br></pre></td></tr></table></figure>

<p>我们可以用拦截器来拦截 <code>/api/*</code> 下的所有请求，那么如何区分不同请求分别需要什么权限呢？</p>
<p>这里我参考了 Shiro 的设计，即采用注解的方式，在相应的方法上用 <code>@RequiredRole</code> 和 <code>@RequiredPremission</code> 来标注相应的请求需要某个角色或某个权限才可访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APIController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredPermission(&quot;add&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加数据成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredPermission(&quot;delete&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除数据成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredPermission(&quot;get&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;查询数据成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredRole(&quot;boss&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/boss&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">boss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;此数据为 Boss 专用数据, 你是 boss, 你可以查看&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredRole(&quot;employee&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;此数据为员工专用数据, 你是员工, 可以查看&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拦截器获取拦截的方法上的注解即可得知需要什么权限，以便来进行相应的判断，Spring 拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Method method = ((HandlerMethod)handler).getMethod();</span><br><span class="line">        RequiredRole requiredRole = method.getAnnotation(RequiredRole.class);</span><br><span class="line">        RequiredPermission requiredPermission = method.getAnnotation(RequiredPermission.class);</span><br><span class="line">        User user = (User) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;未登录&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Role&gt; userRoles = userService.getUserRoles(user.getId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (requiredRole != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Role role : userRoles) &#123;</span><br><span class="line">                <span class="keyword">if</span> (role.getName().equals(requiredRole.value())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (requiredPermission != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Role role : userRoles) &#123;</span><br><span class="line">                List&lt;Permission&gt; permissions = roleService.getPermissions(role.getId());</span><br><span class="line">                <span class="keyword">for</span> (Permission persission : permissions) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (requiredPermission.value().equals(persission.getName())) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;权限不足&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本实现就这些，其实没有很复杂的东西，只是将 RBAC 这个思想运用了起来。</p>
<p>那么反观我们这个权限管理有什么缺陷呢？</p>
<p>我来列举几点：</p>
<ul>
<li>对密码没有进行加密处理, 应对密码进行加盐并散列。</li>
<li>每次请求都会去获取所对应的权限数据和角色数据，太耗费资源，应该进行缓存。</li>
<li>不支持多凭证登陆，如可用邮箱也可用手机号登陆。</li>
</ul>
<p>这些问题我会在后续的 shiro 的笔记中一一讲到。</p>
<blockquote>
<p>本文所有代码下载地址：<a href="https://github.com/zhaojun1998/Premission-Study/tree/master/Permission-Basic">https://github.com/zhaojun1998/Premission-Study</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 拓展之 Restful URL 鉴权</title>
    <url>/shiro-restful/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 Shiro 的过程中，遇到一个痛点，就是对 restful 支持不太好，也查了很多资料，各种各样的方法都有，要不就是功能不完整，要不就是解释不清楚，还有一些对原有功能的侵入性太强，经过一番探索，算是最简的配置下完成了需要的功能，这里给大家分享下。大家如果又更好的方案，也可以在评论区留言，互相探讨下。</p>
<blockquote>
<p>虽然深入到了源码进行分析，但过程并不复杂，希望大家可以跟着我的思路捋顺了耐心看下去，而不是看见源码贴就抵触。</p>
</blockquote>
<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先先回顾下 Shiro 的过滤器链，一般我们都有如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/login.html = anon</span><br><span class="line">/login = anon</span><br><span class="line">/users = perms[user:list]</span><br><span class="line">/** = authc</span><br></pre></td></tr></table></figure>

<p>不太熟悉的朋友可以了解下这篇文章：<a href="http://www.zhaojun.im/shiro-07/">Shiro 过滤器</a>。</p>
<p>其中 <code>/users</code> 请求对应到 <code>perms</code> 过滤器，对应的类: <code>org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</code>，其中的 <code>onAccessDenied</code> 方法是在没有权限时被调用的, 源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Subject subject = getSubject(request, response);</span><br><span class="line">    <span class="comment">// 如果未登录, 则重定向到配置的 loginUrl</span></span><br><span class="line">    <span class="keyword">if</span> (subject.getPrincipal() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        saveRequestAndRedirectToLogin(request, response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果当前用户没有权限, 则跳转到 UnauthorizedUrl</span></span><br><span class="line">        <span class="comment">// 如果没有配置 UnauthorizedUrl, 则返回 401 状态码.</span></span><br><span class="line">        String unauthorizedUrl = getUnauthorizedUrl();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(unauthorizedUrl)) &#123;</span><br><span class="line">            WebUtils.issueRedirect(request, response, unauthorizedUrl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            WebUtils.toHttp(response).sendError(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以在这里可以判断当前请求是否时 AJAX 请求，如果是，则不跳转到 logoUrl 或 UnauthorizedUrl 页面，而是返回 JSON 数据。</p>
<p>还有一个方法是 pathsMatch，是将当前请求的 url 与所有配置的 perms 过滤器链进行匹配，是则进行权限检查，不是则接着与下一个过滤器链进行匹配，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">pathsMatch</span><span class="params">(String path, ServletRequest request)</span> </span>&#123;</span><br><span class="line">    String requestURI = getPathWithinApplication(request);</span><br><span class="line">    log.trace(<span class="string">&quot;Attempting to match pattern &#x27;&#123;&#125;&#x27; with current requestURI &#x27;&#123;&#125;&#x27;...&quot;</span>, path, requestURI);</span><br><span class="line">    <span class="keyword">return</span> pathsMatch(path, requestURI);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>了解完这两个方法，我来说说如何利用这两个方法来实现功能。</p>
<p>我们可以从配置的过滤器链来入手，原先的配置如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;users &#x3D; perms[user:list]</span><br></pre></td></tr></table></figure>

<p>我们可以改为 <code>/user==GET</code>，<code>/user==POST</code> 方式。<code>==</code> 用来分隔, 后面的部分指 <code>HTTP Method</code>。</p>
<p>使用这种方式还要注意一个方法，即：<code>org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver</code> 中的 <code>getChain</code> 方法，用来获取当前请求的 URL 应该使用的过滤器，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FilterChain <span class="title">getChain</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain originalChain)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 判断有没有配置过滤器链, 没有一个过滤器都没有则直接返回 null</span></span><br><span class="line">    FilterChainManager filterChainManager = getFilterChainManager();</span><br><span class="line">    <span class="keyword">if</span> (!filterChainManager.hasChains()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取当前请求的 URL</span></span><br><span class="line">    String requestURI = getPathWithinApplication(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 遍历所有的过滤器链</span></span><br><span class="line">    <span class="keyword">for</span> (String pathPattern : filterChainManager.getChainNames()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断当前请求的 URL 与过滤器链中的 URL 是否匹配.</span></span><br><span class="line">        <span class="keyword">if</span> (pathMatches(pathPattern, requestURI)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                log.trace(<span class="string">&quot;Matched path pattern [&quot;</span> + pathPattern + <span class="string">&quot;] for requestURI [&quot;</span> + requestURI + <span class="string">&quot;].  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Utilizing corresponding filter chain...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 5. 如果路径匹配, 则获取其实现类.(如 perms[user:list] 或 perms[user:delete] 都返回 perms)</span></span><br><span class="line">            <span class="comment">// 具体对  perms[user:list] 或 perms[user:delete] 的判断是在上面讲到的 PermissionsAuthorizationFilter 的 pathsMatch 方法中.</span></span><br><span class="line">            <span class="keyword">return</span> filterChainManager.proxy(originalChain, pathPattern);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里大家需要注意，第四步的判断，我们已经将过滤器链，也就是这里的 <code>pathPattern</code> 改为了 <code>/xxx==GET</code> 这种方式，而请求的 URL 却仅包含 <code>/xxx</code>，那么这里的 <code>pathMatches</code> 方法是肯定无法匹配成功，所以我们需要在第四步判断的时候，只判断前面的 <code>URL</code> 部分。</p>
<p>整个过程如下：</p>
<ol>
<li><p>在过滤器链上对 restful 请求配置需要的 <code>HTTP Method</code>，如：<code>/user==DELETE</code>。</p>
</li>
<li><p>修改 <code>PathMatchingFilterChainResolver</code> 的 <code>getChain</code> 方法，当前请求的 URL 与过滤器链匹配时，过滤器只取 URL 部分进行判断。</p>
</li>
<li><p>修改过滤器的 <code>pathsMatch</code> 方法，判断当前请求的 URL 与请求方式是否与过滤器链中配置的一致。</p>
</li>
<li><p>修改过滤器的 <code>onAccessDenied</code> 方法，当访问被拒绝时，根据普通请求和 <code>AJAX</code> 请求分别返回 <code>HTML</code> 和 <code>JSON</code> 数据。</p>
</li>
</ol>
<p>下面我们逐步来实现：</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="过滤器链添加-http-method"><a href="#过滤器链添加-http-method" class="headerlink" title="过滤器链添加 http method"></a>过滤器链添加 http method</h3><p>在我的项目中是从数据库获取的过滤器链，所以有如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getUrlPermsMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/fonts/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/lib/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Menu&gt; menus = selectAll();</span><br><span class="line">    <span class="keyword">for</span> (Menu menu : menus) &#123;</span><br><span class="line">        String url = menu.getUrl();</span><br><span class="line">        <span class="keyword">if</span> (menu.getMethod() != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(menu.getMethod())) &#123;</span><br><span class="line">            url += (<span class="string">&quot;==&quot;</span> + menu.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        String perms = <span class="string">&quot;perms[&quot;</span> + menu.getPerms() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        filterChainDefinitionMap.put(url, perms);</span><br><span class="line">    &#125;</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> filterChainDefinitionMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如: <code>/xxx==GET = perms[user:list]</code>这里的 <code>getUrl</code>，<code>getMethod</code> 和 <code>getPerms</code> 分别对应 <code>/xxx</code>，<code>GET</code> 和 <code>user:list</code>。</p>
<p>不过需要注意的是，如果在 XML 里配置，会被 Shiro 解析成 <code>/xxx</code> 和 <code>=GET = perms[user:list]</code>，解决办法是使用其他符号代替 <code>==</code>。</p>
</blockquote>
<h3 id="修改-PathMatchingFilterChainResolver-的-getChain-方法"><a href="#修改-PathMatchingFilterChainResolver-的-getChain-方法" class="headerlink" title="修改 PathMatchingFilterChainResolver 的 getChain 方法"></a>修改 PathMatchingFilterChainResolver 的 getChain 方法</h3><p>由于 Shiro 没有提供相应的接口，且我们不能直接修改源码，所以我们需要新建一个类继承 <code>PathMatchingFilterChainResolver</code> 并重写 <code>getChain</code> 方法，然后替换掉 <code>PathMatchingFilterChainResolver</code> 即可。</p>
<p>首先继承并重写方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.mgt.FilterChainManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestPathMatchingFilterChainResolver</span> <span class="keyword">extends</span> <span class="title">PathMatchingFilterChainResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RestPathMatchingFilterChainResolver.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">getChain</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain originalChain)</span> </span>&#123;</span><br><span class="line">        FilterChainManager filterChainManager = getFilterChainManager();</span><br><span class="line">        <span class="keyword">if</span> (!filterChainManager.hasChains()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String requestURI = getPathWithinApplication(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//the &#x27;chain names&#x27; in this implementation are actually path patterns defined by the user.  We just use them</span></span><br><span class="line">        <span class="comment">//as the chain name for the FilterChainManager&#x27;s requirements</span></span><br><span class="line">        <span class="keyword">for</span> (String pathPattern : filterChainManager.getChainNames()) &#123;</span><br><span class="line"></span><br><span class="line">            String[] pathPatternArray = pathPattern.split(<span class="string">&quot;==&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 只用过滤器链的 URL 部分与请求的 URL 进行匹配</span></span><br><span class="line">            <span class="keyword">if</span> (pathMatches(pathPatternArray[<span class="number">0</span>], requestURI)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                    log.trace(<span class="string">&quot;Matched path pattern [&quot;</span> + pathPattern + <span class="string">&quot;] for requestURI [&quot;</span> + requestURI + <span class="string">&quot;].  &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;Utilizing corresponding filter chain...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> filterChainManager.proxy(originalChain, pathPattern);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后替换掉 <code>PathMatchingFilterChainResolver</code>，它是在 <code>ShiroFilterFactoryBean</code> 的 <code>createInstance</code> 方法里初始化的。</p>
<p><img src="https://cdn.jun6.net/201811172337_769.png"></p>
<p>所以同样的套路，继承 <code>ShiroFilterFactoryBean</code> 并重写 <code>createInstance</code> 方法，将 <code>new PathMatchingFilterChainResolver();</code> 改为 <code>new RestPathMatchingFilterChainResolver();</code> 即可。</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.mgt.FilterChainManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.mgt.FilterChainResolver;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.WebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.servlet.AbstractShiroFilter;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanInitializationException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestShiroFilterFactoryBean</span> <span class="keyword">extends</span> <span class="title">ShiroFilterFactoryBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RestShiroFilterFactoryBean.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AbstractShiroFilter <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;Creating Shiro Filter instance.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SecurityManager securityManager = getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (securityManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String msg = <span class="string">&quot;SecurityManager property must be set.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(securityManager <span class="keyword">instanceof</span> WebSecurityManager)) &#123;</span><br><span class="line">            String msg = <span class="string">&quot;The security manager does not implement the WebSecurityManager interface.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FilterChainManager manager = createFilterChainManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Expose the constructed FilterChainManager by first wrapping it in a</span></span><br><span class="line">        <span class="comment">// FilterChainResolver implementation. The AbstractShiroFilter implementations</span></span><br><span class="line">        <span class="comment">// do not know about FilterChainManagers - only resolvers:</span></span><br><span class="line">        PathMatchingFilterChainResolver chainResolver = <span class="keyword">new</span> RestPathMatchingFilterChainResolver();</span><br><span class="line">        chainResolver.setFilterChainManager(manager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Now create a concrete ShiroFilter instance and apply the acquired SecurityManager and built</span></span><br><span class="line">        <span class="comment">//FilterChainResolver.  It doesn&#x27;t matter that the instance is an anonymous inner class</span></span><br><span class="line">        <span class="comment">//here - we&#x27;re just using it because it is a concrete AbstractShiroFilter instance that accepts</span></span><br><span class="line">        <span class="comment">//injection of the SecurityManager and FilterChainResolver:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringShiroFilter((WebSecurityManager) securityManager, chainResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringShiroFilter</span> <span class="keyword">extends</span> <span class="title">AbstractShiroFilter</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">SpringShiroFilter</span><span class="params">(WebSecurityManager webSecurityManager, FilterChainResolver resolver)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">if</span> (webSecurityManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;WebSecurityManager property cannot be null.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setSecurityManager(webSecurityManager);</span><br><span class="line">            <span class="keyword">if</span> (resolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">                setFilterChainResolver(resolver);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后记得将 <code>ShiroFilterFactoryBean</code> 改为 <code>RestShiroFilterFactoryBean</code>。</p>
<p>XML 方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;im.zhaojun.shiro.RestShiroFilterFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数配置略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Bean 方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> RestShiroFilterFactoryBean();</span><br><span class="line">    <span class="comment">// 参数配置略</span></span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改过滤器的-pathsMatch-方法"><a href="#修改过滤器的-pathsMatch-方法" class="headerlink" title="修改过滤器的 pathsMatch 方法"></a>修改过滤器的 pathsMatch 方法</h3><p>同样新建一个类继承原有的 <code>PermissionsAuthorizationFilter</code> 并重写 <code>pathsMatch</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.shiro.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.util.WebUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改后的 perms 过滤器, 添加对 AJAX 请求的支持.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">PermissionsAuthorizationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory</span><br><span class="line">            .getLogger(RestAuthorizationFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">pathsMatch</span><span class="params">(String path, ServletRequest request)</span> </span>&#123;</span><br><span class="line">        String requestURI = <span class="keyword">this</span>.getPathWithinApplication(request);</span><br><span class="line"></span><br><span class="line">        String[] strings = path.split(<span class="string">&quot;==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strings.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 普通的 URL, 正常处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.pathsMatch(strings[<span class="number">0</span>], requestURI);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取当前请求的 http method.</span></span><br><span class="line">            String httpMethod = WebUtils.toHttp(request).getMethod().toUpperCase();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 匹配当前请求的 http method 与 过滤器链中的的是否一致</span></span><br><span class="line">            <span class="keyword">return</span> httpMethod.equals(strings[<span class="number">1</span>].toUpperCase()) &amp;&amp; <span class="keyword">this</span>.pathsMatch(strings[<span class="number">0</span>], requestURI);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改过滤器的-onAccessDenied-方法"><a href="#修改过滤器的-onAccessDenied-方法" class="headerlink" title="修改过滤器的 onAccessDenied 方法"></a>修改过滤器的 onAccessDenied 方法</h3><p>同样是上一步的类，重写 <code>onAccessDenied</code> 方法即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当没有权限被拦截时:</span></span><br><span class="line"><span class="comment"> *          如果是 AJAX 请求, 则返回 JSON 数据.</span></span><br><span class="line"><span class="comment"> *          如果是普通请求, 则跳转到配置 UnauthorizedUrl 页面.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Subject subject = getSubject(request, response);</span><br><span class="line">    <span class="comment">// 如果未登录</span></span><br><span class="line">    <span class="keyword">if</span> (subject.getPrincipal() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// AJAX 请求返回 JSON</span></span><br><span class="line">        <span class="keyword">if</span> (im.zhaojun.util.WebUtils.isAjaxRequest(WebUtils.toHttp(request))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;用户: [&#123;&#125;] 请求 restful url : &#123;&#125;, 未登录被拦截.&quot;</span>, subject.getPrincipal(), <span class="keyword">this</span>.getPathWithinApplication(request));                &#125;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">            im.zhaojun.util.WebUtils.writeJson(map, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他请求跳转到登陆页面</span></span><br><span class="line">            saveRequestAndRedirectToLogin(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果已登陆, 但没有权限</span></span><br><span class="line">        <span class="comment">// 对于 AJAX 请求返回 JSON</span></span><br><span class="line">        <span class="keyword">if</span> (im.zhaojun.util.WebUtils.isAjaxRequest(WebUtils.toHttp(request))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;用户: [&#123;&#125;] 请求 restful url : &#123;&#125;, 无权限被拦截.&quot;</span>, subject.getPrincipal(), <span class="keyword">this</span>.getPathWithinApplication(request));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, -<span class="number">2</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;没有权限啊!&quot;</span>);</span><br><span class="line">            im.zhaojun.util.WebUtils.writeJson(map, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对于普通请求, 跳转到配置的 UnauthorizedUrl 页面.</span></span><br><span class="line">            <span class="comment">// 如果未设置 UnauthorizedUrl, 则返回 401 状态码</span></span><br><span class="line">            String unauthorizedUrl = getUnauthorizedUrl();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(unauthorizedUrl)) &#123;</span><br><span class="line">                WebUtils.issueRedirect(request, response, unauthorizedUrl);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                WebUtils.toHttp(response).sendError(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重写完 <code>pathsMatch</code> 和 <code>onAccessDenied</code> 方法后，将这个类替换原有的 <code>perms</code> 过滤器的类：</p>
<p>XML 方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;im.zhaojun.shiro.RestShiroFilterFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数配置略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;perms&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;restAuthorizationFilter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;restAuthorizationFilter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;im.zhaojun.shiro.filter.RestAuthorizationFilter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>Bean 方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> RestShiroFilterFactoryBean();</span><br><span class="line">    Map&lt;String, Filter&gt; filters = shiroFilterFactoryBean.getFilters();</span><br><span class="line">    filters.put(<span class="string">&quot;perms&quot;</span>, <span class="keyword">new</span> RestAuthorizationFilter());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他配置略</span></span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里只改了 <code>perms</code> 过滤器，对于其他过滤器也是同样的道理，重写过滤器的 <code>pathsMatch</code> 和 <code>onAccessDenied</code> 方法，并覆盖原有过滤器即可。</p>
</blockquote>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>上面用到的工具类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zhaojun.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.json.JSONUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jackson.JsonComponent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是Ajax请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAjaxRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String requestedWith = request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> requestedWith != <span class="keyword">null</span> &amp;&amp; <span class="string">&quot;XMLHttpRequest&quot;</span>.equalsIgnoreCase(requestedWith);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出JSON</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeJson</span><span class="params">(Object obj, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            out = response.getWriter();</span><br><span class="line">            out.write(JSONUtil.toJsonStr(obj));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>基本的过程就是这些，这是我在学习 Shiro 的过程中的一些见解，希望可以帮助到大家。具体应用的项目地址为：<a href="https://github.com/zhaojun1998/Shiro-Action">https://github.com/zhaojun1998/Shiro-Action</a>，功能在不断完善中，代码可能有些粗糙，还请见谅。</p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>权限管理 - 源码分析 - restful</tag>
      </tags>
  </entry>
</search>
